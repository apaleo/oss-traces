// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Identity.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AccountUserModel
    {
        /// <summary>
        /// Initializes a new instance of the AccountUserModel class.
        /// </summary>
        public AccountUserModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AccountUserModel class.
        /// </summary>
        /// <param name="email">Email address, used as the login</param>
        /// <param name="firstName">First name</param>
        /// <param name="lastName">Last name</param>
        /// <param name="role">Role assigned to the user. Possible values
        /// include: 'AccountAdmin', 'PropertyAdmin', 'FinanceManager',
        /// 'RevenueManager', 'ReservationOffice', 'FrontOffice',
        /// 'Housekeeping'</param>
        /// <param name="enabled">If set to {false}, the user is disabled for
        /// this account and cannot log in</param>
        /// <param name="properties">Properties that user has access to</param>
        public AccountUserModel(string email, string firstName, string lastName, string role, bool? enabled = default(bool?), IList<string> properties = default(IList<string>))
        {
            Email = email;
            Enabled = enabled;
            FirstName = firstName;
            LastName = lastName;
            Properties = properties;
            Role = role;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets email address, used as the login
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets if set to {false}, the user is disabled for this
        /// account and cannot log in
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets first name
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets last name
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets properties that user has access to
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<string> Properties { get; set; }

        /// <summary>
        /// Gets or sets role assigned to the user. Possible values include:
        /// 'AccountAdmin', 'PropertyAdmin', 'FinanceManager',
        /// 'RevenueManager', 'ReservationOffice', 'FrontOffice',
        /// 'Housekeeping'
        /// </summary>
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
            if (LastName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastName");
            }
            if (Role == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Role");
            }
        }
    }
}
