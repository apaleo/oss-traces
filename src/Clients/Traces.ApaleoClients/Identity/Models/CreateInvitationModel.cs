// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Identity.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CreateInvitationModel
    {
        /// <summary>
        /// Initializes a new instance of the CreateInvitationModel class.
        /// </summary>
        public CreateInvitationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateInvitationModel class.
        /// </summary>
        /// <param name="email">Email address, used as the login</param>
        /// <param name="isAccountAdmin">If set to {true}, user has full access
        /// to all properties. Defaults to false.</param>
        /// <param name="properties">Properties that user has access to. If the
        /// user is invited as account admin, this will be ignored.</param>
        /// <param name="role">The role to be assigned to the user. If you
        /// specfiy this and 'Roles', the combination of both will be used.
        /// If the user is invited as account admin, this will be ignored.
        /// Possible values include: 'AccountAdmin', 'PropertyAdmin',
        /// 'FinanceManager', 'RevenueManager', 'ReservationOffice',
        /// 'FrontOffice', 'Housekeeping'</param>
        /// <param name="roles">Roles that user has access to. If the user is
        /// invited as account admin, this will be ignored.</param>
        public CreateInvitationModel(string email, bool? isAccountAdmin = default(bool?), IList<string> properties = default(IList<string>), string role = default(string), IList<string> roles = default(IList<string>))
        {
            Email = email;
            IsAccountAdmin = isAccountAdmin;
            Properties = properties;
            Role = role;
            Roles = roles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets email address, used as the login
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets if set to {true}, user has full access to all
        /// properties. Defaults to false.
        /// </summary>
        [JsonProperty(PropertyName = "isAccountAdmin")]
        public bool? IsAccountAdmin { get; set; }

        /// <summary>
        /// Gets or sets properties that user has access to. If the user is
        /// invited as account admin, this will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the role to be assigned to the user. If you specfiy
        /// this and 'Roles', the combination of both will be used.
        /// If the user is invited as account admin, this will be ignored.
        /// Possible values include: 'AccountAdmin', 'PropertyAdmin',
        /// 'FinanceManager', 'RevenueManager', 'ReservationOffice',
        /// 'FrontOffice', 'Housekeeping'
        /// </summary>
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets or sets roles that user has access to. If the user is invited
        /// as account admin, this will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IList<string> Roles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
        }
    }
}
