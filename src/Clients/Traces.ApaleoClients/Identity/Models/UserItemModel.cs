// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Identity.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UserItemModel
    {
        /// <summary>
        /// Initializes a new instance of the UserItemModel class.
        /// </summary>
        public UserItemModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserItemModel class.
        /// </summary>
        /// <param name="email">Email address, used as the login</param>
        /// <param name="enabled">If set to {false}, the user is disabled for
        /// this account and cannot log in</param>
        /// <param name="firstName">First name</param>
        /// <param name="isAccountAdmin">If set to {true}, user has full access
        /// to all properties.</param>
        /// <param name="lastName">Last name</param>
        /// <param name="subjectId">Unique user identifier.</param>
        /// <param name="properties">Properties that user has access to</param>
        public UserItemModel(string email, bool enabled, string firstName, bool isAccountAdmin, string lastName, System.Guid subjectId, IList<PropertyRolesItemModel> properties = default(IList<PropertyRolesItemModel>))
        {
            Email = email;
            Enabled = enabled;
            FirstName = firstName;
            IsAccountAdmin = isAccountAdmin;
            LastName = lastName;
            Properties = properties;
            SubjectId = subjectId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets email address, used as the login
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets if set to {false}, the user is disabled for this
        /// account and cannot log in
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or sets first name
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets if set to {true}, user has full access to all
        /// properties.
        /// </summary>
        [JsonProperty(PropertyName = "isAccountAdmin")]
        public bool IsAccountAdmin { get; set; }

        /// <summary>
        /// Gets or sets last name
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets properties that user has access to
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<PropertyRolesItemModel> Properties { get; set; }

        /// <summary>
        /// Gets or sets unique user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "subjectId")]
        public System.Guid SubjectId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
            if (LastName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastName");
            }
            if (Properties != null)
            {
                foreach (var element in Properties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
