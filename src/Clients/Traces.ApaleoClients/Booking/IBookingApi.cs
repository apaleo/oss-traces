// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Resources and methods to manage guest journeys.
    /// </summary>
    public partial interface IBookingApi : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Get a list of all available unit groups in a property [DEPRECATED]
        /// </summary>
        /// <remarks>
        /// Use /availability/v1/unit-groups instead&lt;br/ &gt;Get the list of
        /// available unit groups for a specific property and time
        /// period.&lt;br&gt;You must have this scope: 'availability.read'.
        /// </remarks>
        /// <param name='propertyId'>
        /// The property id
        /// </param>
        /// <param name='fromParameter'>
        /// First day of the requested time period. The given day will be
        /// included in the response.
        /// </param>
        /// <param name='to'>
        /// Last day of the requested time period. The given day will be
        /// included in the response.
        /// </param>
        /// <param name='timeSliceTemplate'>
        /// The time slice template, defaults to 'over night'. Possible values
        /// include: 'DayUse', 'OverNight'
        /// </param>
        /// <param name='unitGroupTypes'>
        /// Filter result by requested unit group types
        /// </param>
        /// <param name='timeSliceDefinitionIds'>
        /// The time slice definition ids
        /// </param>
        /// <param name='unitGroupIds'>
        /// The unit group ids
        /// </param>
        /// <param name='adults'>
        /// The number of adults you want availability for, defaults to 1
        /// </param>
        /// <param name='childrenAges'>
        /// The ages of the children you want availability for
        /// </param>
        /// <param name='onlySellable'>
        /// When set to 'true', only the unit groups sold by the specified time
        /// slice template and time slice definition ids are returned,
        /// otherwise all unit groups are returned
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingAvailableUnitGroupsGetWithHttpMessagesAsync(string propertyId, System.DateTime fromParameter, System.DateTime to, TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), int? adults = default(int?), IList<int?> childrenAges = default(IList<int?>), bool? onlySellable = default(bool?), int? pageNumber = 1, int? pageSize = 100, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of all available units in a property [DEPRECATED]
        /// </summary>
        /// <remarks>
        /// Use /availability/v1/units instead&lt;br/ &gt;Get the list of
        /// available units for a specific property and time
        /// period.&lt;br&gt;You must have this scope: 'availability.read'.
        /// </remarks>
        /// <param name='propertyId'>
        /// The property id
        /// </param>
        /// <param name='fromParameter'>
        /// The from date and time&lt;br /&gt;A date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The to date and time&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='unitGroupId'>
        /// The unit group id
        /// </param>
        /// <param name='includeOutOfService'>
        /// Should units that are set OutOfService in the defined time period
        /// be returned as available.
        /// </param>
        /// <param name='unitCondition'>
        /// The unit condition. Possible values include: 'Clean',
        /// 'CleanToBeInspected', 'Dirty'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingAvailableUnitsGetWithHttpMessagesAsync(string propertyId, System.DateTime fromParameter, System.DateTime to, string unitGroupId = default(string), bool? includeOutOfService = default(bool?), UnitCondition? unitCondition = default(UnitCondition?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel a block.
        /// </summary>
        /// <remarks>
        /// Cancel a specific block which is in status 'Definite' or
        /// 'Tentative'.
        /// This changes the status to 'Canceled'.&lt;br&gt;You must have at
        /// least one of these scopes: 'blocks.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the block that should be processed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingBlockActionsByIdCancelPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Confirm a block.
        /// </summary>
        /// <remarks>
        /// Confirm a specific block which is in status 'Tentative'.
        /// This changes the status to 'Definite'.&lt;br&gt;You must have at
        /// least one of these scopes: 'blocks.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the block that should be processed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingBlockActionsByIdConfirmPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Release a block.
        /// </summary>
        /// <remarks>
        /// Release a specific block which is in status 'Definite'.
        /// This changes the status to 'Tentative'.&lt;br&gt;You must have at
        /// least one of these scopes: 'blocks.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the block that should be processed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingBlockActionsByIdReleasePutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Wash a block.
        /// </summary>
        /// <remarks>
        /// Wash a specific block which is in status 'Definite'.
        /// This releases all unpicked units.&lt;br&gt;You must have at least
        /// one of these scopes: 'blocks.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the block that should be processed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingBlockActionsByIdWashPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of blocks
        /// </summary>
        /// <remarks>
        /// Returns a list of all blocks, filtered by the specified parameters.
        /// If no parameters are set, returns the entire list.&lt;br&gt;You
        /// must have at least one of these scopes: 'blocks.read,
        /// reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='groupId'>
        /// Return blocks for the specific group
        /// </param>
        /// <param name='propertyIds'>
        /// Return blocks filtered by properties
        /// </param>
        /// <param name='status'>
        /// Return blocks filtered by statuses
        /// </param>
        /// <param name='unitGroupIds'>
        /// Return blocks with any of the specified unit groups
        /// </param>
        /// <param name='ratePlanIds'>
        /// Return blocks with any of the specified rate plans
        /// </param>
        /// <param name='timeSliceDefinitionIds'>
        /// Return blocks with any of the specified time slice definitions
        /// </param>
        /// <param name='unitGroupTypes'>
        /// Return blocks with any of the specified unit group types
        /// </param>
        /// <param name='timeSliceTemplate'>
        /// The time slice template, defaults to 'over night'. Possible values
        /// include: 'DayUse', 'OverNight'
        /// </param>
        /// <param name='fromParameter'>
        /// The start of the time range. All blocks that are overlapping with
        /// the interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The end of the time range. All blocks that are overlapping with the
        /// interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: actions, timeSlices. All other
        /// values will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingBlocksGetWithHttpMessagesAsync(string groupId = default(string), IList<string> propertyIds = default(IList<string>), IList<BlockStatus?> status = default(IList<BlockStatus?>), IList<string> unitGroupIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a block
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;You must have at least one of these scopes:
        /// 'blocks.create, reservations.manage'.
        /// </remarks>
        /// <param name='body'>
        /// The details for the block you want to create.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BookingBlocksPostHeaders>> BookingBlocksPostWithHttpMessagesAsync(CreateBlockModel body, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns number of blocks
        /// </summary>
        /// <remarks>
        /// Returns number of blocks matching the filter criteria&lt;br&gt;You
        /// must have at least one of these scopes: 'blocks.read,
        /// reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='groupId'>
        /// Return blocks for the specific group
        /// </param>
        /// <param name='propertyIds'>
        /// Return blocks filtered by properties
        /// </param>
        /// <param name='status'>
        /// Return blocks filtered by statuses
        /// </param>
        /// <param name='unitGroupIds'>
        /// Return blocks with any of the specified unit groups
        /// </param>
        /// <param name='ratePlanIds'>
        /// Return blocks with any of the specified rate plans
        /// </param>
        /// <param name='timeSliceDefinitionIds'>
        /// Return blocks with any of the specified time slice definitions
        /// </param>
        /// <param name='unitGroupTypes'>
        /// Return blocks with any of the specified unit group types
        /// </param>
        /// <param name='timeSliceTemplate'>
        /// The time slice template, defaults to 'over night'. Possible values
        /// include: 'DayUse', 'OverNight'
        /// </param>
        /// <param name='fromParameter'>
        /// The start of the time range. All blocks that are overlapping with
        /// the interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The end of the time range. All blocks that are overlapping with the
        /// interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingBlockscountGetWithHttpMessagesAsync(string groupId = default(string), IList<string> propertyIds = default(IList<string>), IList<BlockStatus?> status = default(IList<BlockStatus?>), IList<string> unitGroupIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a specific block
        /// </summary>
        /// <remarks>
        /// Use this call to delete a block. This is only possible as long as
        /// no reservation was picked up yet even if all of
        /// them are canceled&lt;br&gt;You must have at least one of these
        /// scopes: 'blocks.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the block.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> BookingBlocksByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a specific block.
        /// </summary>
        /// <remarks>
        /// Retrieves a block, specified by its ID.&lt;br&gt;You must have at
        /// least one of these scopes: 'blocks.read, reservations.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the block to be retrieved.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: actions, timeSlices. All other
        /// values will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingBlocksByIdGetWithHttpMessagesAsync(string id, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if a block exists
        /// </summary>
        /// <remarks>
        /// Check if a block exists by id&lt;br&gt;You must have at least one
        /// of these scopes: 'blocks.read, reservations.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the block.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> BookingBlocksByIdHeadWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows to modify the block
        /// </summary>
        /// <remarks>
        /// You can replace From, To, GrossDailyRate and
        /// BlockedUnits&lt;br&gt;You must have at least one of these scopes:
        /// 'blocks.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the block to be modified.
        /// </param>
        /// <param name='body'>
        /// Define the list of operations to be applied to the resource. Learn
        /// more about JSON Patch here: http://jsonpatch.com/.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingBlocksByIdPatchWithHttpMessagesAsync(string id, IList<Operation> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of all bookings, filtered by the specified
        /// parameters.
        /// </summary>
        /// <remarks>
        /// Returns a list of all bookings, filtered by the specified
        /// parameters. If no parameters are set, returns the entire
        /// list.&lt;br&gt;You must have at least one of these scopes:
        /// 'reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='reservationId'>
        /// Filter result by reservation id. The result set will contain all
        /// bookings having reservations with the specified id
        /// </param>
        /// <param name='groupId'>
        /// Filter result by group id. The result set will contain all bookings
        /// having groups with the specified id
        /// </param>
        /// <param name='channelCode'>
        /// Filter result by the channel code. The resul set will contain all
        /// bookings having reservations with the specified channel code
        /// </param>
        /// <param name='externalCode'>
        /// Filter result by the external code. The result set will contain all
        /// bookings having reservations with external code starting with
        /// provided value
        /// </param>
        /// <param name='textSearch'>
        /// This will filter all bookings for the provided free text. Currently
        /// it only looks up if either the lastname, firstname, email or
        /// company name of the booker
        /// contains one of the provided values
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: property, unitGroup, ratePlan,
        /// services, reservations. All other values will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingBookingsGetWithHttpMessagesAsync(string reservationId = default(string), string groupId = default(string), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), string externalCode = default(string), string textSearch = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a booking for one or more reservations.
        /// </summary>
        /// <remarks>
        /// Creates a booking taking a list of reservations as
        /// input&lt;br&gt;You must have at least one of these scopes:
        /// 'reservations.create, reservations.manage'.
        /// </remarks>
        /// <param name='body'>
        /// The list of reservations you want to create.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BookingBookingsPostHeaders>> BookingBookingsPostWithHttpMessagesAsync(CreateBookingModel body, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a booking for one or more reservations regardless of
        /// availability or restrictions.
        /// </summary>
        /// <remarks>
        /// Creates a booking taking a list of reservations as
        /// input&lt;br&gt;You must have at least one of these scopes:
        /// 'reservations.force-create, reservations.force-manage'.
        /// </remarks>
        /// <param name='body'>
        /// The list of reservations you want to create.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BookingBookingsforcePostHeaders>> BookingBookingsforcePostWithHttpMessagesAsync(CreateBookingModel body, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a specific booking.
        /// </summary>
        /// <remarks>
        /// Retrieves a booking with all its reservations.&lt;br&gt;You must
        /// have at least one of these scopes: 'reservations.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the booking to be retrieved.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: property, unitGroup, ratePlan,
        /// services, reservations, propertyValues. All other values will be
        /// silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingBookingsByIdGetWithHttpMessagesAsync(string id, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows to modify certain booking properties
        /// </summary>
        /// <remarks>
        /// Here is the list of operations that are currently allowed:
        /// - Add, replace and remove PaymentAccount
        /// - Add, replace and remove Comment
        /// - Add, replace and remove BookerComment
        /// - Copy PaymentAccount, Comment and BookerComment from the booking
        /// to any reservation, or the other way around
        /// - Replace Booker&lt;br&gt;You must have this scope:
        /// 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the booking to be modified.
        /// </param>
        /// <param name='body'>
        /// Define the list of operations to be applied to the resource. Learn
        /// more about JSON Patch here: http://jsonpatch.com/.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingBookingsByIdPatchWithHttpMessagesAsync(string id, IList<Operation> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add one or multiple reservations to an existing booking.
        /// </summary>
        /// <remarks>
        /// Creates new reservations and adds them to an existing booking
        /// taking a list of reservations as input&lt;br&gt;You must have at
        /// least one of these scopes: 'reservations.create,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the booking the reservations should be attached to.
        /// </param>
        /// <param name='body'>
        /// The list of reservations you want to add.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BookingBookingsByIdReservationsPostHeaders>> BookingBookingsByIdReservationsPostWithHttpMessagesAsync(string id, AddReservationsModel body, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add one or multiple reservations to an existing booking regardless
        /// of availability or restrictions.
        /// </summary>
        /// <remarks>
        /// Creates new reservations and adds them to an existing booking
        /// taking a list of reservations as input&lt;br&gt;You must have at
        /// least one of these scopes: 'reservations.force-create,
        /// reservations.force-manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the booking the reservations should be attached to.
        /// </param>
        /// <param name='body'>
        /// The list of reservations you want to add.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BookingBookingsByIdReservationsforcePostHeaders>> BookingBookingsByIdReservationsforcePostWithHttpMessagesAsync(string id, AddReservationsModel body, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of all group bookings, filtered by the specified
        /// parameters.
        /// </summary>
        /// <remarks>
        /// Returns a list of all group bookings, filtered by the specified
        /// parameters.
        /// If no parameters are set, returns the entire list&lt;br&gt;You must
        /// have at least one of these scopes: 'groups.read, reservations.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='textSearch'>
        /// This will filter all group bookings for the provided free text.
        /// Currently it only looks up if either the group name, lastname,
        /// firstname, email or company name of the booker contains one of the
        /// provided values
        /// </param>
        /// <param name='propertyIds'>
        /// Filter result by requested properties
        /// </param>
        /// <param name='fromParameter'>
        /// The start of the time range. All groups that have blocks
        /// overlapping with the interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The end of the time range. All groups that have blocks overlapping
        /// with the interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: blocks, actions. All other values
        /// will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingGroupsGetWithHttpMessagesAsync(string textSearch = default(string), IList<string> propertyIds = default(IList<string>), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a group booking.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;You must have at least one of these scopes:
        /// 'groups.create, reservations.manage'.
        /// </remarks>
        /// <param name='body'>
        /// The details of the group that should be created.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BookingGroupsPostHeaders>> BookingGroupsPostWithHttpMessagesAsync(CreateGroupModel body, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns number of group bookings
        /// </summary>
        /// <remarks>
        /// Returns number of group bookings matching the filter
        /// criteria&lt;br&gt;You must have at least one of these scopes:
        /// 'groups.read, reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='textSearch'>
        /// This will filter all group bookings for the provided free text.
        /// Currently it only looks up if either the group name, lastname,
        /// firstname, email or company name of the booker contains one of the
        /// provided values
        /// </param>
        /// <param name='propertyIds'>
        /// Filter result by requested properties
        /// </param>
        /// <param name='fromParameter'>
        /// The start of the time range. All groups that have blocks
        /// overlapping with the interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The end of the time range. All groups that have blocks overlapping
        /// with the interval specified by from and to
        /// will be returned&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingGroupscountGetWithHttpMessagesAsync(string textSearch = default(string), IList<string> propertyIds = default(IList<string>), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a certain group booking
        /// </summary>
        /// <remarks>
        /// Use this call to delete a group booking. This is only possible as
        /// long as no blocks exist that are linked to
        /// this group booking&lt;br&gt;You must have at least one of these
        /// scopes: 'groups.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the group booking to be deleted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> BookingGroupsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a specific group booking.
        /// </summary>
        /// <remarks>
        /// Retrieves a specific group booking with all its related
        /// blocks&lt;br&gt;You must have at least one of these scopes:
        /// 'groups.read, reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the group booking to be retrieved.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: blocks, actions. All other values
        /// will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingGroupsByIdGetWithHttpMessagesAsync(string id, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if a certain group booking exists
        /// </summary>
        /// <remarks>
        /// Check if a group booking exists by id&lt;br&gt;You must have at
        /// least one of these scopes: 'groups.read, reservations.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the group booking to be checked for existence.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> BookingGroupsByIdHeadWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows to modify certain group booking properties
        /// </summary>
        /// <remarks>
        /// Here is the list of operations that are currently allowed:
        /// - Add and replace Name
        /// - Add, replace and remove Comment
        /// - Add, replace and remove BookerComment
        /// - Add, replace and remove PaymentAccount
        /// - Add, replace and remove PropertyIds
        /// - Replace Booker&lt;br&gt;You must have at least one of these
        /// scopes: 'groups.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the group booking to be modified.
        /// </param>
        /// <param name='body'>
        /// Define the list of operations to be applied to the resource. Learn
        /// more about JSON Patch here: http://jsonpatch.com/.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingGroupsByIdPatchWithHttpMessagesAsync(string id, IList<Operation> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add one or multiple reservations to an existing group booking using
        /// blocked inventory.
        /// </summary>
        /// <remarks>
        /// Creates new reservations and adds them to an existing group booking
        /// taking a list of reservations as input&lt;br&gt;You must have at
        /// least one of these scopes: 'groups.manage, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the group booking the reservations should be attached to.
        /// </param>
        /// <param name='body'>
        /// The list of reservations you want to create.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BookingGroupsByIdReservationsPostHeaders>> BookingGroupsByIdReservationsPostWithHttpMessagesAsync(string id, PickUpReservationsModel body, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns offers with rates and availabilities for the specified
        /// range.
        /// </summary>
        /// <remarks>
        /// Calculates and returns offers per time slice for a specific rate
        /// plan, arrival and departure date.&lt;br&gt;You must have at least
        /// one of these scopes: 'offer-index.read, offers.read'.
        /// </remarks>
        /// <param name='ratePlanId'>
        /// </param>
        /// <param name='fromParameter'>
        /// &lt;br /&gt;Specify either a pure date or a date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// &lt;br /&gt;Specify either a pure date or a date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='channelCode'>
        /// Possible values include: 'Direct', 'BookingCom', 'Ibe',
        /// 'ChannelManager', 'Expedia', 'Homelike'
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingOfferIndexGetWithHttpMessagesAsync(string ratePlanId, string fromParameter, string to, ChannelCode channelCode, int? pageNumber = 1, int? pageSize = 100, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns offers for one specific stay.
        /// </summary>
        /// <remarks>
        /// Calculates and returns available offers for a specific property,
        /// arrival and departure date.&lt;br&gt;You must have at least one of
        /// these scopes: 'offers.read, reservations.manage'.
        /// </remarks>
        /// <param name='propertyId'>
        /// The property ID
        /// </param>
        /// <param name='arrival'>
        /// Date and optional time of arrival&lt;br /&gt;Specify either a pure
        /// date or a date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='departure'>
        /// Date and optional time of departure. Cannot be more than 5 years
        /// after arrival.&lt;br /&gt;Specify either a pure date or a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='adults'>
        /// The number of adults you want offers for
        /// </param>
        /// <param name='timeSliceTemplate'>
        /// The time slice template used to filter the rate plans, defaults to
        /// 'over night'. Possible values include: 'DayUse', 'OverNight'
        /// </param>
        /// <param name='timeSliceDefinitionIds'>
        /// Time slice definition IDs, used to filter rate plans
        /// </param>
        /// <param name='unitGroupIds'>
        /// Unit group IDs, used to filter rate plans
        /// </param>
        /// <param name='unitGroupTypes'>
        /// Unit group types, used to filter rate plans
        /// </param>
        /// <param name='channelCode'>
        /// Channel code, used to filter the rate plans. Possible values
        /// include: 'Direct', 'BookingCom', 'Ibe', 'ChannelManager',
        /// 'Expedia', 'Homelike'
        /// </param>
        /// <param name='promoCode'>
        /// The promo code associated with a certain special offer
        /// </param>
        /// <param name='corporateCode'>
        /// The code associated with a corporate rate
        /// </param>
        /// <param name='childrenAges'>
        /// The ages of the children you want offers for
        /// </param>
        /// <param name='includeUnavailable'>
        /// Return also offers that are currently not publicly bookable as
        /// restrictions are violated. By default only available offers are
        /// returned
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingOffersGetWithHttpMessagesAsync(string propertyId, string arrival, string departure, int adults, TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), ChannelCode? channelCode = default(ChannelCode?), string promoCode = default(string), string corporateCode = default(string), IList<int?> childrenAges = default(IList<int?>), bool? includeUnavailable = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns offers for a specific rate plan.
        /// </summary>
        /// <remarks>
        /// Calculates and returns available offers for a specific rate plan,
        /// arrival and departure date.&lt;br&gt;You must have at least one of
        /// these scopes: 'offers.read, reservations.manage'.
        /// </remarks>
        /// <param name='ratePlanId'>
        /// The rate plan ID
        /// </param>
        /// <param name='arrival'>
        /// Date and optional time of arrival&lt;br /&gt;Specify either a pure
        /// date or a date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='departure'>
        /// Date and optional time of departure. Cannot be more than 5 years
        /// after arrival.&lt;br /&gt;Specify either a pure date or a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='adults'>
        /// The number of adults you want offers for
        /// </param>
        /// <param name='channelCode'>
        /// The channel code. Possible values include: 'Direct', 'BookingCom',
        /// 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
        /// </param>
        /// <param name='childrenAges'>
        /// The ages of the children you want offers for
        /// </param>
        /// <param name='includeUnavailable'>
        /// Return also offers that are currently not publicly bookable as
        /// restrictions are violated. By default only available offers are
        /// returned
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingRatePlanOffersGetWithHttpMessagesAsync(string ratePlanId, string arrival, string departure, int adults, ChannelCode? channelCode = default(ChannelCode?), IList<int?> childrenAges = default(IList<int?>), bool? includeUnavailable = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows you to amend the stay details of a reservation
        /// </summary>
        /// <remarks>
        /// Modifies the stay-related data of a reservation.&lt;br /&gt;
        /// If a reservation is 'Confirmed', you can change all fields.&lt;br
        /// /&gt;
        /// If a reservation is 'InHouse', only changes to future time slices
        /// are possible.&lt;br /&gt;
        /// Changes to reservations that are in the status 'CheckedOut' or
        /// 'Canceled' are not possible at all.&lt;br&gt;You must have this
        /// scope: 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation that should be modified
        /// </param>
        /// <param name='body'>
        /// The new stay details that should be applied to the reservation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdAmendPutWithHttpMessagesAsync(string id, DesiredStayDetailsModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows you to amend the stay details of a reservation regardless of
        /// availability or restrictions.
        /// </summary>
        /// <remarks>
        /// Modifies the stay-related data of a reservation.&lt;br /&gt;
        /// If a reservation is 'Confirmed', you can change all fields.&lt;br
        /// /&gt;
        /// If a reservation is 'InHouse', only changes to future time slices
        /// are possible.&lt;br /&gt;
        /// Changes to reservations that are in the status 'CheckedOut' or
        /// 'Canceled' are not possible at all.&lt;br&gt;You must have this
        /// scope: 'reservations.force-manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation that should be modified
        /// </param>
        /// <param name='body'>
        /// The new stay details that should be applied to the reservation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdAmendforcePutWithHttpMessagesAsync(string id, DesiredStayDetailsModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign a unit to a reservation.
        /// </summary>
        /// <remarks>
        /// Assigns one of the available units to a reservation which is in
        /// state 'Confirmed' or 'InHouse'.&lt;br&gt;You must have at least one
        /// of these scopes: 'reservations.assign-unit, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation a unit should be assigned to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationActionsByIdAssignUnitPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign a specific unit to a reservation.
        /// </summary>
        /// <remarks>
        /// Assigns a specific unit to a reservation which is in state
        /// 'Confirmed' or 'InHouse'.&lt;br /&gt;If the unit is not available,
        /// the call will return an error, and no unit will be
        /// assigned.&lt;br&gt;You must have at least one of these scopes:
        /// 'reservations.assign-unit, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation the unit should be assigned to.
        /// </param>
        /// <param name='unitId'>
        /// The id of the unit to be assigned.
        /// </param>
        /// <param name='fromParameter'>
        /// The start date and optional time for the unit assignment. If not
        /// specified, the reservation's arrival will be used.&lt;br
        /// /&gt;Specify either a pure date or a date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The end date and optional time for the unit assignment. If not
        /// specified, the reservation's departure will be used.&lt;br
        /// /&gt;Specify either a pure date or a date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationActionsByIdAssignUnitByUnitIdPutWithHttpMessagesAsync(string id, string unitId, string fromParameter = default(string), string to = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Book the service for a specific reservation.
        /// </summary>
        /// <remarks>
        /// Use this to book a service for a specific reservation.
        /// Please note that when dates are specified, all desired dates must
        /// be specified or they will be removed if not posted to the
        /// folio.&lt;br&gt;You must have this scope: 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdBookServicePutWithHttpMessagesAsync(string id, BookReservationServiceModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel a reservation.
        /// </summary>
        /// <remarks>
        /// Cancel a specific reservation which is in status 'Confirmed' and
        /// where the arrival time is in the future.
        /// This changes the status to 'Canceled', and sets the cancellation
        /// date and time.&lt;br&gt;You must have this scope:
        /// 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation that should be processed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdCancelPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check-in of a reservation.
        /// </summary>
        /// <remarks>
        /// Check in a specific reservation which is in status 'Confirmed', and
        /// has a unit assigned. This changes the status to 'InHouse', and sets
        /// the check-in date and time.&lt;br&gt;You must have this scope:
        /// 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation that should be processed.
        /// </param>
        /// <param name='withCityTax'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdCheckinPutWithHttpMessagesAsync(string id, bool? withCityTax = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check-out of a reservation.
        /// </summary>
        /// <remarks>
        /// Check out a specific reservation which is in status 'InHouse'. This
        /// changes the status to 'CheckedOut', and sets the check-out date and
        /// time.
        /// All open charges on the folio will be posted.
        /// &lt;br /&gt;
        /// Check-out is only possible, if the departure date is not later than
        /// tomorrow. Otherwise, first amend the reservation and shorten the
        /// stay.&lt;br&gt;You must have this scope: 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation that should be processed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdCheckoutPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set a reservation to No-show.
        /// </summary>
        /// <remarks>
        /// Set a specific reservation to No-show which is in status
        /// 'Confirmed' and where the arrival date is in the past.
        /// This changes the status to 'NoShow', and sets the no-show date and
        /// time.&lt;br&gt;You must have this scope: 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation that should be processed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdNoshowPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unassign units from a reservation.
        /// </summary>
        /// <remarks>
        /// Unassigns units for all time slices of the given reservation. If no
        /// units are assigned for the
        /// reservation nothing will happen. It will fail for reservations in
        /// status 'CheckedOut'.&lt;br&gt;You must have at least one of these
        /// scopes: 'reservations.assign-unit, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation the unit should be unassigned for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationActionsByIdUnassignUnitsPutWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of all reservations, filtered by the specified
        /// parameters.
        /// </summary>
        /// <remarks>
        /// Returns a list of all reservations, filtered by the specified
        /// parameters. If no parameters are set, returns the entire
        /// list.&lt;br&gt;You must have at least one of these scopes:
        /// 'reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='bookingId'>
        /// Filter result by booking id
        /// </param>
        /// <param name='propertyIds'>
        /// Filter result by requested properties
        /// </param>
        /// <param name='ratePlanIds'>
        /// Filter result by requested rate plans
        /// </param>
        /// <param name='companyIds'>
        /// Filter result by requested companies
        /// </param>
        /// <param name='unitIds'>
        /// Filter result by assigned units
        /// </param>
        /// <param name='unitGroupIds'>
        /// Filter result by requested unit groups
        /// </param>
        /// <param name='unitGroupTypes'>
        /// Filter result by requested unit group types
        /// </param>
        /// <param name='blockIds'>
        /// Filter result by requested blocks
        /// </param>
        /// <param name='status'>
        /// Filter result by reservation status
        /// </param>
        /// <param name='dateFilter'>
        /// Filter by date and time attributes of reservation. Use in
        /// combination with the 'To' and 'From' attributes.
        /// All filters will check if the date specified by the filter type is
        /// between from (included) and to (excluded).
        /// The exception being filtering for 'stay', which will return all
        /// reservations that are overlapping with the interval specified by
        /// from and to. Possible values include: 'Arrival', 'Departure',
        /// 'Stay', 'Creation', 'Modification', 'Cancellation'
        /// </param>
        /// <param name='fromParameter'>
        /// The start of the time interval. When filtering by date, at least
        /// one of 'from' and 'to' has to be specified&lt;br /&gt;A date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The end of the time interval, must be larger than 'from'. When
        /// filtering by date, at least one of 'from' and 'to' has to be
        /// specified&lt;br /&gt;A date and time (without fractional second
        /// part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='channelCode'>
        /// Filter result by the channel code
        /// </param>
        /// <param name='sources'>
        /// Filter result by source
        /// </param>
        /// <param name='validationMessageCategory'>
        /// Filter result by validation message category
        /// </param>
        /// <param name='externalCode'>
        /// Filter result by the external code. The result set will contain all
        /// reservations that have an external code starting with the
        /// provided value
        /// </param>
        /// <param name='textSearch'>
        /// This will filter all reservations where the provided text is
        /// contained in: booker first name or last name or email or company
        /// name,
        /// primary guest first name or last name or email or company name,
        /// external code, reservation id, unit name. The search is case
        /// insensitive.
        /// </param>
        /// <param name='balanceFilter'>
        /// This will filter reservations based on their balance.&lt;br
        /// /&gt;You can provide an array of string expressions which all need
        /// to apply.&lt;br /&gt;Each expression has the form of
        /// 'OPERATION_VALUE' where VALUE needs to be of the valid format of
        /// the property type and OPERATION can be:&lt;br /&gt;'eq' for
        /// equals&lt;br /&gt;'neq' for not equals&lt;br /&gt;'lt' for less
        /// than&lt;br /&gt;'gt' for greater than&lt;br /&gt;'lte' for less
        /// than or equals&lt;br /&gt;'gte' for greater than or equals&lt;br
        /// /&gt;For instance&lt;br /&gt;'eq_5' would mean the value should
        /// equal 5&lt;br /&gt;'lte_7' would mean the value should be less than
        /// or equal to 7
        /// </param>
        /// <param name='allFoliosHaveInvoice'>
        /// If set to {true}, returns only reservations, in which all folios
        /// are closed and have an invoice.
        /// If set to {false}, returns only reservations, in which some of the
        /// folios are open or don't have an invoice
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='sort'>
        /// List of all fields that can be used to sort the results. Possible
        /// values are: arrival:asc, arrival:desc, departure:asc,
        /// departure:desc, created:asc, created:desc, updated:asc,
        /// updated:desc, id:asc, id:desc, firstname:asc, firstname:desc,
        /// lastname:asc, lastname:desc, unitname:asc, unitname:desc. All other
        /// values will be silently ignored.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: booker, actions, timeSlices,
        /// services, assignedUnits, company. All other values will be silently
        /// ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationsGetWithHttpMessagesAsync(string bookingId = default(string), IList<string> propertyIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> companyIds = default(IList<string>), IList<string> unitIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), IList<string> blockIds = default(IList<string>), IList<ReservationStatus?> status = default(IList<ReservationStatus?>), DateFilterType? dateFilter = default(DateFilterType?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), IList<string> sources = default(IList<string>), IList<ValidationMessageCategory?> validationMessageCategory = default(IList<ValidationMessageCategory?>), string externalCode = default(string), string textSearch = default(string), IList<string> balanceFilter = default(IList<string>), bool? allFoliosHaveInvoice = default(bool?), int? pageNumber = 1, int? pageSize = 100, IList<string> sort = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the number of reservations fulfilling the criteria
        /// specified in the parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are set, returns the total count of
        /// reservations.&lt;br&gt;You must have at least one of these scopes:
        /// 'reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='bookingId'>
        /// Filter result by booking id
        /// </param>
        /// <param name='propertyIds'>
        /// Filter result by requested properties
        /// </param>
        /// <param name='ratePlanIds'>
        /// Filter result by requested rate plans
        /// </param>
        /// <param name='companyIds'>
        /// Filter result by requested companies
        /// </param>
        /// <param name='unitIds'>
        /// Filter result by assigned units
        /// </param>
        /// <param name='unitGroupIds'>
        /// Filter result by requested unit groups
        /// </param>
        /// <param name='unitGroupTypes'>
        /// Filter result by requested unit group types
        /// </param>
        /// <param name='blockIds'>
        /// Filter result by requested blocks
        /// </param>
        /// <param name='status'>
        /// Filter result by reservation status
        /// </param>
        /// <param name='dateFilter'>
        /// Filter by date and time attributes of reservation. Use in
        /// combination with the 'To' and 'From' attributes.
        /// All filters will check if the date specified by the filter type is
        /// between from (included) and to (excluded).
        /// The exception being filtering for 'stay', which will return all
        /// reservations that are overlapping with the interval specified by
        /// from and to. Possible values include: 'Arrival', 'Departure',
        /// 'Stay', 'Creation', 'Modification', 'Cancellation'
        /// </param>
        /// <param name='fromParameter'>
        /// The start of the time interval. When filtering by date, at least
        /// one of 'from' and 'to' has to be specified&lt;br /&gt;A date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The end of the time interval, must be larger than 'from'. When
        /// filtering by date, at least one of 'from' and 'to' has to be
        /// specified&lt;br /&gt;A date and time (without fractional second
        /// part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='channelCode'>
        /// Filter result by the channel code
        /// </param>
        /// <param name='sources'>
        /// Filter result by source
        /// </param>
        /// <param name='validationMessageCategory'>
        /// Filter result by validation message category
        /// </param>
        /// <param name='externalCode'>
        /// Filter result by the external code. The result set will contain all
        /// reservations that have an external code starting with the
        /// provided value
        /// </param>
        /// <param name='textSearch'>
        /// This will filter all reservations where the provided text is
        /// contained in: booker first name or last name or email or company
        /// name,
        /// primary guest first name or last name or email or company name,
        /// external code, reservation id, unit name. The search is case
        /// insensitive.
        /// </param>
        /// <param name='balanceFilter'>
        /// This will filter reservations based on their balance.&lt;br
        /// /&gt;You can provide an array of string expressions which all need
        /// to apply.&lt;br /&gt;Each expression has the form of
        /// 'OPERATION_VALUE' where VALUE needs to be of the valid format of
        /// the property type and OPERATION can be:&lt;br /&gt;'eq' for
        /// equals&lt;br /&gt;'neq' for not equals&lt;br /&gt;'lt' for less
        /// than&lt;br /&gt;'gt' for greater than&lt;br /&gt;'lte' for less
        /// than or equals&lt;br /&gt;'gte' for greater than or equals&lt;br
        /// /&gt;For instance&lt;br /&gt;'eq_5' would mean the value should
        /// equal 5&lt;br /&gt;'lte_7' would mean the value should be less than
        /// or equal to 7
        /// </param>
        /// <param name='allFoliosHaveInvoice'>
        /// If set to {true}, returns only reservations, in which all folios
        /// are closed and have an invoice.
        /// If set to {false}, returns only reservations, in which some of the
        /// folios are open or don't have an invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationscountGetWithHttpMessagesAsync(string bookingId = default(string), IList<string> propertyIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> companyIds = default(IList<string>), IList<string> unitIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), IList<string> blockIds = default(IList<string>), IList<ReservationStatus?> status = default(IList<ReservationStatus?>), DateFilterType? dateFilter = default(DateFilterType?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), IList<string> sources = default(IList<string>), IList<ValidationMessageCategory?> validationMessageCategory = default(IList<ValidationMessageCategory?>), string externalCode = default(string), string textSearch = default(string), IList<string> balanceFilter = default(IList<string>), bool? allFoliosHaveInvoice = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a specific reservation.
        /// </summary>
        /// <remarks>
        /// Retrieves a reservation, specified by its ID.&lt;br&gt;You must
        /// have at least one of these scopes: 'reservations.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation to be retrieved.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: timeSlices, services, booker,
        /// actions, company. All other values will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationsByIdGetWithHttpMessagesAsync(string id, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows to modify certain reservation properties
        /// </summary>
        /// <remarks>
        /// Here is the list of operations that are currently allowed:
        /// - Add, replace and remove Comment
        /// - Add, replace and remove GuestComment
        /// - Add, replace and remove PaymentAccount
        /// - Add, replace and remove TravelPurpose
        /// - Add, replace and remove AdditionalGuests
        /// - Add a company (using company/Id, and only if not already set)
        /// - Add, replace and remove Commission
        /// - Replace PrimaryGuest
        /// - Remove ValidationMessages&lt;br&gt;You must have this scope:
        /// 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation to be modified.
        /// </param>
        /// <param name='body'>
        /// Define the list of operations to be applied to the resource. Learn
        /// more about JSON Patch here: http://jsonpatch.com/.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> BookingReservationsByIdPatchWithHttpMessagesAsync(string id, IList<Operation> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of all available units for a reservation [DEPRECATED]
        /// </summary>
        /// <remarks>
        /// This method has been moved to availability, use
        /// /availability/v1/reservations/{id}/units instead. It will be
        /// removed on 10/07/2020&lt;br/ &gt;Get the list of available units
        /// for a specific reservation and time period.&lt;br&gt;You must have
        /// at least one of these scopes: 'availability.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the reservation
        /// </param>
        /// <param name='unitGroupId'>
        /// The unit group id
        /// </param>
        /// <param name='fromParameter'>
        /// The from date and time&lt;br /&gt;A date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='to'>
        /// The to date and time&lt;br /&gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='includeOutOfService'>
        /// Should units that are set OutOfService in the defined time period
        /// be returned as available.
        /// </param>
        /// <param name='unitCondition'>
        /// The unit condition. Possible values include: 'Clean',
        /// 'CleanToBeInspected', 'Dirty'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationsByIdAvailableUnitsGetWithHttpMessagesAsync(string id, string unitGroupId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), bool? includeOutOfService = default(bool?), UnitCondition? unitCondition = default(UnitCondition?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns offers for one specific reservation.
        /// </summary>
        /// <remarks>
        /// Calculates and returns offers for amending a specific
        /// reservation.&lt;br&gt;You must have at least one of these scopes:
        /// 'offers.read, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation to be amended.
        /// </param>
        /// <param name='arrival'>
        /// Date and optional time of arrival&lt;br /&gt;Specify either a pure
        /// date or a date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='departure'>
        /// Date and optional time of departure. Cannot be more than 5 years
        /// after arrival.&lt;br /&gt;Specify either a pure date or a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='adults'>
        /// Number of adults
        /// </param>
        /// <param name='childrenAges'>
        /// Ages of children
        /// </param>
        /// <param name='channelCode'>
        /// The channel code used to filter the rate plans. Possible values
        /// include: 'Direct', 'BookingCom', 'Ibe', 'ChannelManager',
        /// 'Expedia', 'Homelike'
        /// </param>
        /// <param name='promoCode'>
        /// The promo code associated with a certain special offer, like
        /// corporate rate
        /// </param>
        /// <param name='requote'>
        /// Whether the offers should be re-quoted based on current prices, or
        /// only additions like change of number of adults should be
        /// calculated.
        /// Defaults to 'false'
        /// </param>
        /// <param name='includeUnavailable'>
        /// Return also offers that are currently not publicly bookable as
        /// restrictions are violated. By default only available offers are
        /// returned
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationsByIdOffersGetWithHttpMessagesAsync(string id, string arrival = default(string), string departure = default(string), int? adults = default(int?), IList<int?> childrenAges = default(IList<int?>), ChannelCode? channelCode = default(ChannelCode?), string promoCode = default(string), bool? requote = default(bool?), bool? includeUnavailable = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns service offers for one specific reservation.
        /// </summary>
        /// <remarks>
        /// Calculates and returns service offers for a specific
        /// reservation.&lt;br&gt;You must have at least one of these scopes:
        /// 'offers.read, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation.
        /// </param>
        /// <param name='channelCode'>
        /// The channel code used to filter the services. Possible values
        /// include: 'Direct', 'BookingCom', 'Ibe', 'ChannelManager',
        /// 'Expedia', 'Homelike'
        /// </param>
        /// <param name='onlyDefaultDates'>
        /// Depending on the postNextDay setting of a service it will by
        /// default be posted before or after midnight.
        /// Breakfast is usually delivered on the next morning, so all the
        /// dates from the day after arrival to the departure day
        /// are default dates and will have this flag set to true. For services
        /// like a dinner it is the other way around.
        /// With this query parameter, you can also ask for the dates, that
        /// usually the service will not be booked. It defaults to true.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationsByIdServiceOffersGetWithHttpMessagesAsync(string id, ChannelCode? channelCode = default(ChannelCode?), bool? onlyDefaultDates = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a service from a reservation.
        /// </summary>
        /// <remarks>
        /// Removes a service from a reservation. The service will not be
        /// removed if it is already posted or if the service date is in the
        /// past.&lt;br&gt;You must have this scope: 'reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation.
        /// </param>
        /// <param name='serviceId'>
        /// The id of the service to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> BookingReservationsByIdServicesDeleteWithHttpMessagesAsync(string id, string serviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the services booked for a specific reservation.
        /// </summary>
        /// <remarks>
        /// Returns the services booked for a specific
        /// reservation.&lt;br&gt;You must have at least one of these scopes:
        /// 'reservations.read, reservations.manage'.
        /// </remarks>
        /// <param name='id'>
        /// Id of the reservation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingReservationsByIdServicesGetWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns service offers for one specific stay.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;You must have at least one of these scopes: 'offers.read,
        /// reservations.manage'.
        /// </remarks>
        /// <param name='ratePlanId'>
        /// The rate plan ID
        /// </param>
        /// <param name='arrival'>
        /// Date and optional time of arrival&lt;br /&gt;Specify either a pure
        /// date or a date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='departure'>
        /// Date and optional time of departure. Cannot be more than 5 years
        /// after arrival.&lt;br /&gt;Specify either a pure date or a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
        /// </param>
        /// <param name='adults'>
        /// The number of adults you want offers for
        /// </param>
        /// <param name='channelCode'>
        /// The channel code used to filter the services. Possible values
        /// include: 'Direct', 'BookingCom', 'Ibe', 'ChannelManager',
        /// 'Expedia', 'Homelike'
        /// </param>
        /// <param name='childrenAges'>
        /// The ages of the children you want offers for
        /// </param>
        /// <param name='onlyDefaultDates'>
        /// Depending on the postNextDay setting of a service it will be posted
        /// before or after midnight.
        /// Breakfast is usually delivered on the next morning, having
        /// 'postNextDay' set to true. Its 'default dates' are from the day
        /// after
        /// arrival until the departure day. For services like dinner
        /// 'postNextDay' is false, and default dates are day of arrival until
        /// one
        /// day before departure.
        /// With this query parameter set to 'false', you can also ask for
        /// dates outside of those default dates. It defaults to true.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingServiceOffersGetWithHttpMessagesAsync(string ratePlanId, string arrival, string departure, int adults, ChannelCode? channelCode = default(ChannelCode?), IList<int?> childrenAges = default(IList<int?>), bool? onlyDefaultDates = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of supported sources.
        /// </summary>
        /// <remarks>
        /// Returns a list of channels that could be used as a source to create
        /// bookings.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BookingTypesSourcesGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
