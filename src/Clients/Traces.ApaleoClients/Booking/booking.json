{
  "definitions": {
    "ActionModel[BlockAction,NotAllowedBlockActionReason]": {
      "properties": {
        "action": {
          "enum": [
            "Delete",
            "Confirm",
            "Release",
            "Cancel",
            "Pickup",
            "Modify",
            "Wash"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "BlockAction"
          }
        },
        "isAllowed": {
          "type": "boolean"
        },
        "reasons": {
          "items": {
            "$ref": "#/definitions/ActionReasonModel[NotAllowedBlockActionReason]"
          },
          "type": "array"
        }
      },
      "required": [
        "action",
        "isAllowed"
      ],
      "type": "object"
    },
    "ActionModel[GroupAction,NotAllowedGroupActionReason]": {
      "properties": {
        "action": {
          "enum": [
            "Delete"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "GroupAction"
          }
        },
        "isAllowed": {
          "type": "boolean"
        },
        "reasons": {
          "items": {
            "$ref": "#/definitions/ActionReasonModel[NotAllowedGroupActionReason]"
          },
          "type": "array"
        }
      },
      "required": [
        "action",
        "isAllowed"
      ],
      "type": "object"
    },
    "ActionModel[ReservationAction,NotAllowedReservationActionReason]": {
      "properties": {
        "action": {
          "enum": [
            "CheckIn",
            "CheckOut",
            "Cancel",
            "AmendTimeSlices",
            "AmendArrival",
            "AmendDeparture",
            "NoShow",
            "AssignUnit",
            "UnassignUnit",
            "RemoveCityTax",
            "AddCityTax",
            "RemoveService"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ReservationAction"
          }
        },
        "isAllowed": {
          "type": "boolean"
        },
        "reasons": {
          "items": {
            "$ref": "#/definitions/ActionReasonModel[NotAllowedReservationActionReason]"
          },
          "type": "array"
        }
      },
      "required": [
        "action",
        "isAllowed"
      ],
      "type": "object"
    },
    "ActionModel[ReservationTimeSliceAction,NotAllowedReservationTimeSliceActionReason]": {
      "properties": {
        "action": {
          "enum": [
            "Amend"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ReservationTimeSliceAction"
          }
        },
        "isAllowed": {
          "type": "boolean"
        },
        "reasons": {
          "items": {
            "$ref": "#/definitions/ActionReasonModel[NotAllowedReservationTimeSliceActionReason]"
          },
          "type": "array"
        }
      },
      "required": [
        "action",
        "isAllowed"
      ],
      "type": "object"
    },
    "ActionReasonModel[NotAllowedBlockActionReason]": {
      "properties": {
        "code": {
          "enum": [
            "DeleteNotAllowedForBlockWithReservations",
            "ReleaseNotAllowedForBlockWithReservations",
            "ReleaseNotAllowedForBlockInThePast",
            "ReleaseNotAllowedForBlockNotInStatusDefinite",
            "ConfirmNotAllowedForBlockNotInStatusTentative",
            "ConfirmNotAllowedForBlockInThePast",
            "CancelNotAllowedForBlockWithNotCancelledReservations",
            "CancelNotAllowedForBlockNotInStatusDefiniteOrTentative",
            "PickupNotAllowedForBlockNotInStatusDefinite",
            "PickupNotAllowedForBlockInThePast",
            "PickupNotAllowedForFullyPickedBlock",
            "ModifyNotAllowedForBlockInThePast",
            "ModifyNotAllowedForBlockInStatusCanceled",
            "WashNotAllowedForBlockNotInStatusDefinite",
            "WashNotAllowedForBlockWithoutReservations"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "NotAllowedBlockActionReason"
          }
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    },
    "ActionReasonModel[NotAllowedGroupActionReason]": {
      "properties": {
        "code": {
          "enum": [
            "DeleteNotAllowedForGroupWithBlocks"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "NotAllowedGroupActionReason"
          }
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    },
    "ActionReasonModel[NotAllowedReservationActionReason]": {
      "properties": {
        "code": {
          "enum": [
            "CheckInNotAllowedForReservationNotInStatusConfirmed",
            "CheckInNotAllowedBeforeArrivalDate",
            "CheckInNotAllowedAfterDepartureDateTime",
            "CheckInNotAllowedWithoutUnitAssignedForWholeStay",
            "CheckOutNotAllowedForReservationNotInStatusInHouse",
            "CheckOutNotAllowedForPastReservationNotInStatusConfirmedOrInHouse",
            "CheckOutNotAllowedWithDepartureDateMoreThanOneDayInTheFuture",
            "CancelNotAllowedForReservationNotInStatusConfirmed",
            "AmendNotAllowedForNotAmendableTimeSlices",
            "AmendArrivalNotAllowedForNotAmendableTimeSlices",
            "AmendArrivalNotAllowedForReservationNotInStatusConfirmed",
            "AmendDepartureNotAllowedForReservationNotInStatusConfirmedOrInHouse",
            "AmendDepartureNotAllowedForReservationDepartureDateTooFarInThePast",
            "NoShowNotAllowedForReservationNotInStatusConfirmed",
            "NoShowNotAllowedBeforeArrivalDate",
            "AssignUnitNotAllowedForReservationInThePast",
            "AssignUnitNotAllowedForReservationNotInStatusConfirmedOrInHouse",
            "UnassignUnitNotAllowedForReservationInThePast",
            "UnassignUnitNotAllowedForReservationNotInStatusConfirmed",
            "UnassignUnitNotAllowedForReservationWithoutUnit",
            "RemoveCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse",
            "RemoveCityTaxNotAllowedForReservationWithPostedCharges",
            "RemoveCityTaxNotAllowedForReservationWithoutCityTax",
            "AddCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse",
            "AddCityTaxNotAllowedForReservationWithCityTax",
            "AddCityTaxNotAllowedForReservationForRatePlanNotSubjectToCityTax",
            "AddCityTaxNotAllowedForReservationWithPostedCharges",
            "RemoveServiceNotAllowedForReservationNotInStatusConfirmedOrInHouse",
            "RemoveServiceNotAllowedForReservationInThePast"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "NotAllowedReservationActionReason"
          }
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    },
    "ActionReasonModel[NotAllowedReservationTimeSliceActionReason]": {
      "properties": {
        "code": {
          "enum": [
            "AmendNotAllowedWhenTimeSliceIsInThePast",
            "AmendNotAllowedWhenTimeSliceIsAlreadyPosted",
            "AmendNotAllowedForReservationInFinalStatus"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "NotAllowedReservationTimeSliceActionReason"
          }
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    },
    "AddReservationsModel": {
      "description": "With this request you can add reservations to an existing booking",
      "example": "{\n  \"reservations\": [\n    {\n      \"arrival\": \"2020-06-20\",\n      \"departure\": \"2020-06-22\",\n      \"adults\": 1,\n      \"comment\": \"I need a wake up service\",\n      \"externalCode\": \"812864414|381\",\n      \"channelCode\": \"BookingCom\",\n      \"primaryGuest\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Jon\",\n        \"middleInitial\": \"D\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.d@doe.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 1\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"guaranteeType\": \"Prepayment\",\n      \"timeSlices\": [\n        {\n          \"ratePlanId\": \"MUC-NONREF-DBL\"\n        },\n        {\n          \"ratePlanId\": \"MUC-NONREF-DBL\"\n        }\n      ],\n      \"services\": [\n        {\n          \"serviceId\": \"MUC-BRKF\"\n        },\n        {\n          \"serviceId\": \"MUC-YOGA\",\n          \"dates\": [\n            {\n              \"serviceDate\": \"2020-06-21\",\n              \"amount\": {\n                \"amount\": 35.0,\n                \"currency\": \"EUR\"\n              }\n            }\n          ]\n        }\n      ],\n      \"companyId\": \"UMBRELLA\",\n      \"corporateCode\": \"UMBRELLA-MUC_NONREF_DBL\"\n    },\n    {\n      \"arrival\": \"2020-06-21\",\n      \"departure\": \"2020-06-23\",\n      \"adults\": 1,\n      \"childrenAges\": [\n        6\n      ],\n      \"channelCode\": \"Direct\",\n      \"primaryGuest\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Eric\",\n        \"middleInitial\": \"E\",\n        \"lastName\": \"Steinmetz\",\n        \"email\": \"eric.e@steinmetz.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 1\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"guaranteeType\": \"CreditCard\",\n      \"timeSlices\": [\n        {\n          \"ratePlanId\": \"BER-FLEX-DBL\"\n        },\n        {\n          \"ratePlanId\": \"BER-FLEX-DBL\"\n        }\n      ],\n      \"commission\": {\n        \"commissionAmount\": {\n          \"amount\": 20.0,\n          \"currency\": \"EUR\"\n        },\n        \"beforeCommissionAmount\": {\n          \"amount\": 100.0,\n          \"currency\": \"EUR\"\n        }\n      }\n    }\n  ]\n}",
      "properties": {
        "reservations": {
          "description": "List of reservations to add to the existing booking",
          "items": {
            "$ref": "#/definitions/CreateReservationModel"
          },
          "type": "array"
        }
      },
      "required": [
        "reservations"
      ],
      "type": "object"
    },
    "AmountModel": {
      "example": "{\n  \"grossAmount\": 107.0,\n  \"netAmount\": 100.0,\n  \"vatType\": \"Reduced\",\n  \"currency\": \"USD\"\n}",
      "properties": {
        "currency": {
          "type": "string"
        },
        "grossAmount": {
          "format": "double",
          "type": "number"
        },
        "netAmount": {
          "format": "double",
          "type": "number"
        },
        "vatType": {
          "enum": [
            "Null",
            "VeryReduced",
            "Reduced",
            "Normal",
            "Without",
            "Special",
            "ReducedCovid19",
            "NormalCovid19"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "VatType"
          }
        }
      },
      "required": [
        "currency",
        "grossAmount",
        "netAmount",
        "vatType"
      ],
      "type": "object"
    },
    "AssignedUnitModel": {
      "example": "{\n  \"unit\": {\n    \"id\": \"MUC-JQI\",\n    \"name\": \"A.201\",\n    \"description\": \"Standard room.\"\n  }\n}",
      "properties": {
        "unit": {
          "$ref": "#/definitions/EmbeddedUnitModel"
        }
      },
      "required": [
        "unit"
      ],
      "type": "object"
    },
    "AutoAssignedUnitItemModel": {
      "properties": {
        "from": {
          "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "unit": {
          "$ref": "#/definitions/EmbeddedUnitModel"
        }
      },
      "required": [
        "from",
        "to",
        "unit"
      ],
      "type": "object"
    },
    "AutoAssignedUnitListModel": {
      "example": "{\n  \"timeSlices\": [\n    {\n      \"unit\": {\n        \"id\": \"MUC-JQI\",\n        \"name\": \"A.201\",\n        \"description\": \"Standard room.\"\n      },\n      \"from\": \"2020-06-18T17:00:00+02:00\",\n      \"to\": \"2020-06-19T11:00:00+02:00\"\n    },\n    {\n      \"unit\": {\n        \"id\": \"MUC-MTA\",\n        \"name\": \"A.101\",\n        \"description\": \"Standard room.\"\n      },\n      \"from\": \"2020-06-19T17:00:00+02:00\",\n      \"to\": \"2020-06-20T11:00:00+02:00\"\n    }\n  ]\n}",
      "properties": {
        "timeSlices": {
          "description": "The list of time slices with the respective assigned unit",
          "items": {
            "$ref": "#/definitions/AutoAssignedUnitItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "timeSlices"
      ],
      "type": "object"
    },
    "AvailableUnitGroupListModel": {
      "example": "{\n  \"timeSlices\": [\n    {\n      \"from\": \"2020-06-18T17:00:00+02:00\",\n      \"to\": \"2020-06-19T11:00:00+02:00\",\n      \"property\": {\n        \"physicalCount\": 30,\n        \"houseCount\": 26,\n        \"soldCount\": 13,\n        \"occupancy\": 50.0,\n        \"sellableCount\": 9,\n        \"allowedOverbookingCount\": 1,\n        \"maintenance\": {\n          \"outOfService\": 2,\n          \"outOfOrder\": 4,\n          \"outOfInventory\": 4\n        }\n      },\n      \"unitGroups\": [\n        {\n          \"unitGroup\": {\n            \"id\": \"MUC-SGL\",\n            \"code\": \"SGL\",\n            \"name\": \"Standard\",\n            \"description\": \"Standard\"\n          },\n          \"physicalCount\": 10,\n          \"houseCount\": 8,\n          \"soldCount\": 3,\n          \"occupancy\": 37.5,\n          \"availableCount\": 0,\n          \"sellableCount\": 3,\n          \"allowedOverbookingCount\": 0,\n          \"maintenance\": {\n            \"outOfService\": 1,\n            \"outOfOrder\": 2,\n            \"outOfInventory\": 2\n          }\n        },\n        {\n          \"unitGroup\": {\n            \"id\": \"MUC-DBL\",\n            \"code\": \"DBL\",\n            \"name\": \"Double\",\n            \"description\": \"Double\"\n          },\n          \"physicalCount\": 20,\n          \"houseCount\": 18,\n          \"soldCount\": 10,\n          \"occupancy\": 55.55,\n          \"availableCount\": 0,\n          \"sellableCount\": 6,\n          \"allowedOverbookingCount\": 1,\n          \"maintenance\": {\n            \"outOfService\": 1,\n            \"outOfOrder\": 2,\n            \"outOfInventory\": 2\n          }\n        }\n      ]\n    }\n  ],\n  \"count\": 1\n}",
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "timeSlices": {
          "description": "List of time slices",
          "items": {
            "$ref": "#/definitions/UnitGroupAvailabilityTimeSliceItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "timeSlices"
      ],
      "type": "object"
    },
    "AvailableUnitItemModel": {
      "properties": {
        "description": {
          "description": "The description for the unit",
          "type": "string"
        },
        "id": {
          "description": "The unit id",
          "type": "string"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name for the unit",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "status": {
          "$ref": "#/definitions/AvailableUnitItemStatusModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "description",
        "id",
        "maxPersons",
        "name",
        "property",
        "status"
      ],
      "type": "object"
    },
    "AvailableUnitItemStatusModel": {
      "properties": {
        "condition": {
          "enum": [
            "Clean",
            "CleanToBeInspected",
            "Dirty"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "UnitCondition"
          }
        },
        "isOccupied": {
          "type": "boolean"
        },
        "maintenanceType": {
          "enum": [
            "OutOfService",
            "OutOfOrder",
            "OutOfInventory"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "MaintenanceType"
          }
        }
      },
      "required": [
        "condition",
        "isOccupied"
      ],
      "type": "object"
    },
    "AvailableUnitListModel": {
      "example": "{\n  \"units\": [\n    {\n      \"id\": \"MUC-JQI\",\n      \"name\": \"A.101\",\n      \"description\": \"Room 101\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-DBL\",\n        \"code\": \"DBL\",\n        \"name\": \"Double\",\n        \"description\": \"Double\"\n      },\n      \"status\": {\n        \"isOccupied\": true,\n        \"condition\": \"Dirty\",\n        \"maintenanceType\": \"OutOfService\"\n      },\n      \"maxPersons\": 4\n    },\n    {\n      \"id\": \"MUC-ELG\",\n      \"name\": \"A.102\",\n      \"description\": \"Room 102\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\"\n      },\n      \"status\": {\n        \"isOccupied\": false,\n        \"condition\": \"Clean\"\n      },\n      \"maxPersons\": 1\n    }\n  ],\n  \"count\": 2\n}",
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "units": {
          "description": "List of units",
          "items": {
            "$ref": "#/definitions/AvailableUnitItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "units"
      ],
      "type": "object"
    },
    "BlockCreatedModel": {
      "example": "{\n  \"id\": \"MUC-HSGTDG\"\n}",
      "properties": {
        "id": {
          "description": "Block id",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "BlockItemModel": {
      "properties": {
        "actions": {
          "description": "The list of actions for this block",
          "items": {
            "$ref": "#/definitions/ActionModel[BlockAction,NotAllowedBlockActionReason]"
          },
          "type": "array"
        },
        "blockedUnits": {
          "description": "Number of units blocked - <b>DEPRECATED: This field will be removed 09.08.2020.</b>",
          "format": "int32",
          "type": "integer"
        },
        "corporateCode": {
          "description": "The corporate code associated with a certain special offer used to create the block",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "from": {
          "description": "Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "grossDailyRate": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "group": {
          "$ref": "#/definitions/EmbeddedGroupModel"
        },
        "id": {
          "description": "Block id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "pickedReservations": {
          "description": "Number of reservations already picked from this block",
          "format": "int32",
          "type": "integer"
        },
        "promoCode": {
          "description": "The promo code associated with a certain special offer used to create the block",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "status": {
          "description": "Status of the block",
          "enum": [
            "Tentative",
            "Definite",
            "Canceled"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "BlockStatus"
          }
        },
        "timeSlices": {
          "description": "The list of blocked units for each time slice",
          "items": {
            "$ref": "#/definitions/BlockTimeSliceModel"
          },
          "type": "array"
        },
        "to": {
          "description": "End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "blockedUnits",
        "created",
        "from",
        "grossDailyRate",
        "group",
        "id",
        "modified",
        "pickedReservations",
        "property",
        "ratePlan",
        "status",
        "to",
        "unitGroup"
      ],
      "type": "object"
    },
    "BlockListModel": {
      "example": "{\n  \"blocks\": [\n    {\n      \"id\": \"MUC-HSGTDG\",\n      \"group\": {\n        \"id\": \"XPGMSXGF\",\n        \"name\": \"apaleo Summer Festival 2021\"\n      },\n      \"status\": \"Tentative\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_SGL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\"\n      },\n      \"grossDailyRate\": {\n        \"amount\": 160.0,\n        \"currency\": \"EUR\"\n      },\n      \"from\": \"2020-06-23T17:00:00+02:00\",\n      \"to\": \"2020-06-24T11:00:00+02:00\",\n      \"blockedUnits\": 2,\n      \"pickedReservations\": 0,\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"modified\": \"0001-01-01T00:00:00Z\",\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-23T17:00:00+02:00\",\n          \"to\": \"2020-06-24T11:00:00+02:00\",\n          \"blockedUnits\": 2,\n          \"pickedUnits\": 0\n        }\n      ]\n    },\n    {\n      \"id\": \"MUC-JAIULS\",\n      \"group\": {\n        \"id\": \"XPGMSXGF\",\n        \"name\": \"apaleo Summer Festival 2021\"\n      },\n      \"status\": \"Definite\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_DBL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-DBL\",\n        \"code\": \"DBL\",\n        \"name\": \"Double\",\n        \"description\": \"Double\"\n      },\n      \"grossDailyRate\": {\n        \"amount\": 190.0,\n        \"currency\": \"EUR\"\n      },\n      \"from\": \"2020-06-23T17:00:00+02:00\",\n      \"to\": \"2020-06-25T11:00:00+02:00\",\n      \"blockedUnits\": 3,\n      \"pickedReservations\": 1,\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"modified\": \"0001-01-01T00:00:00Z\",\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-23T17:00:00+02:00\",\n          \"to\": \"2020-06-24T11:00:00+02:00\",\n          \"blockedUnits\": 2,\n          \"pickedUnits\": 1\n        },\n        {\n          \"from\": \"2020-06-24T17:00:00+02:00\",\n          \"to\": \"2020-06-25T11:00:00+02:00\",\n          \"blockedUnits\": 3,\n          \"pickedUnits\": 1\n        }\n      ]\n    }\n  ],\n  \"count\": 2\n}",
      "properties": {
        "blocks": {
          "description": "List of blocks",
          "items": {
            "$ref": "#/definitions/BlockItemModel"
          },
          "type": "array"
        },
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "blocks",
        "count"
      ],
      "type": "object"
    },
    "BlockModel": {
      "example": "{\n  \"id\": \"MUC-HSGTDG\",\n  \"group\": {\n    \"id\": \"XPGMSXGF\",\n    \"name\": \"apaleo Summer Festival 2021\"\n  },\n  \"status\": \"Tentative\",\n  \"property\": {\n    \"id\": \"MUC\",\n    \"code\": \"MUC\",\n    \"name\": \"Demo Hotel Munich\",\n    \"description\": \"This is the demo hotel Munich\"\n  },\n  \"ratePlan\": {\n    \"id\": \"MUC-NONREF_SGL\",\n    \"code\": \"NONREF\",\n    \"name\": \"Non Refundable\",\n    \"description\": \"Non Refundable\",\n    \"isSubjectToCityTax\": false\n  },\n  \"unitGroup\": {\n    \"id\": \"MUC-SGL\",\n    \"code\": \"SGL\",\n    \"name\": \"Standard\",\n    \"description\": \"Standard\"\n  },\n  \"grossDailyRate\": {\n    \"amount\": 160.0,\n    \"currency\": \"EUR\"\n  },\n  \"from\": \"2020-06-23T17:00:00+02:00\",\n  \"to\": \"2020-06-25T11:00:00+02:00\",\n  \"blockedUnits\": 3,\n  \"pickedReservations\": 0,\n  \"created\": \"0001-01-01T00:00:00Z\",\n  \"modified\": \"0001-01-01T00:00:00Z\",\n  \"timeSlices\": [\n    {\n      \"from\": \"2020-06-23T17:00:00+02:00\",\n      \"to\": \"2020-06-24T11:00:00+02:00\",\n      \"blockedUnits\": 2,\n      \"pickedUnits\": 0\n    },\n    {\n      \"from\": \"2020-06-24T17:00:00+02:00\",\n      \"to\": \"2020-06-25T11:00:00+02:00\",\n      \"blockedUnits\": 3,\n      \"pickedUnits\": 0\n    }\n  ]\n}",
      "properties": {
        "actions": {
          "description": "The list of actions for this block",
          "items": {
            "$ref": "#/definitions/ActionModel[BlockAction,NotAllowedBlockActionReason]"
          },
          "type": "array"
        },
        "blockedUnits": {
          "description": "Number of units blocked - <b>DEPRECATED: This field will be removed 09.08.2020.</b>",
          "format": "int32",
          "type": "integer"
        },
        "corporateCode": {
          "description": "The corporate code associated with a certain special offer used to create the block",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "from": {
          "description": "Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "grossDailyRate": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "group": {
          "$ref": "#/definitions/EmbeddedGroupModel"
        },
        "id": {
          "description": "Block id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "pickedReservations": {
          "description": "Number of reservations already picked from this block",
          "format": "int32",
          "type": "integer"
        },
        "promoCode": {
          "description": "The promo code associated with a certain special offer used to create the block",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "status": {
          "description": "Status of the block. Tentative will just mark inventory as requested, but still allows to sell it\r\nthrough other channels. Definite will block the inventory for selling through other channels",
          "enum": [
            "Tentative",
            "Definite",
            "Canceled"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "BlockStatus"
          }
        },
        "timeSlices": {
          "description": "The list of time slices for this block",
          "items": {
            "$ref": "#/definitions/BlockTimeSliceModel"
          },
          "type": "array"
        },
        "to": {
          "description": "End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "blockedUnits",
        "created",
        "from",
        "grossDailyRate",
        "group",
        "id",
        "modified",
        "pickedReservations",
        "property",
        "ratePlan",
        "status",
        "to",
        "unitGroup"
      ],
      "type": "object"
    },
    "BlockTimeSliceModel": {
      "properties": {
        "baseAmount": {
          "$ref": "#/definitions/AmountModel"
        },
        "blockedUnits": {
          "description": "Number of units blocked for this time slice",
          "format": "int32",
          "type": "integer"
        },
        "from": {
          "description": "Start date and time from which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "pickedUnits": {
          "description": "Number of units which have picked reservations for this time slice",
          "format": "int32",
          "type": "integer"
        },
        "to": {
          "description": "End date and time until which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "baseAmount",
        "blockedUnits",
        "from",
        "pickedUnits",
        "to",
        "totalGrossAmount"
      ],
      "type": "object"
    },
    "BlockUnitsModel": {
      "properties": {
        "definite": {
          "description": "The number of units which are definitely blocked",
          "format": "int32",
          "type": "integer"
        },
        "picked": {
          "description": "The number of units which are picked from blocked",
          "format": "int32",
          "type": "integer"
        },
        "remaining": {
          "description": "The number of units which are not yet picked",
          "format": "int32",
          "type": "integer"
        },
        "tentative": {
          "description": "The number of units which are tentatively blocked",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "definite",
        "picked",
        "remaining",
        "tentative"
      ],
      "type": "object"
    },
    "BookReservationServiceModel": {
      "example": "{\n  \"serviceId\": \"MUC-SPA\",\n  \"dates\": [\n    {\n      \"serviceDate\": \"2020-06-18\",\n      \"amount\": {\n        \"amount\": 25.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"serviceDate\": \"2020-06-19\"\n    }\n  ]\n}",
      "properties": {
        "amount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "count": {
          "description": "The number of services to book for each service date. It defaults to the service offer count when not specified.",
          "format": "int32",
          "type": "integer"
        },
        "dates": {
          "description": "The optional dates you want to book the service for; if not specified the default service pattern will be used (e.g. whole stay).",
          "items": {
            "$ref": "#/definitions/Date"
          },
          "type": "array"
        },
        "serviceId": {
          "description": "The id of the service you want to book",
          "type": "string"
        }
      },
      "required": [
        "serviceId"
      ],
      "type": "object"
    },
    "BookerModel": {
      "properties": {
        "address": {
          "$ref": "#/definitions/PersonAddressModel"
        },
        "birthDate": {
          "description": "Birth date",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/PersonCompanyModel"
        },
        "email": {
          "description": "Email address of the booker",
          "type": "string"
        },
        "firstName": {
          "description": "First name of the booker",
          "type": "string"
        },
        "gender": {
          "description": "Gender of the booker",
          "enum": [
            "Female",
            "Male",
            "Other"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "Gender"
          }
        },
        "identificationNumber": {
          "description": "The booker's identification number for the given identificationType.",
          "type": "string"
        },
        "identificationType": {
          "description": "The type of the identificationNumber",
          "enum": [
            "SocialInsuranceNumber",
            "PassportNumber",
            "IdNumber",
            "DriverLicenseNumber"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "IdentificationType"
          }
        },
        "lastName": {
          "description": "Last name of the booker",
          "type": "string"
        },
        "middleInitial": {
          "description": "Middle initial of the booker",
          "type": "string"
        },
        "nationalityCountryCode": {
          "description": "The booker's nationality, in ISO 3166-1 alpha-2 code",
          "type": "string"
        },
        "phone": {
          "description": "Phone number of the booker",
          "type": "string"
        },
        "preferredLanguage": {
          "description": "Preferred contact two-letter language code (ISO Alpha-2)",
          "type": "string"
        },
        "title": {
          "description": "Title of the booker",
          "enum": [
            "Mr",
            "Ms",
            "Dr",
            "Prof",
            "Other"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "PersonTitle"
          }
        }
      },
      "required": [
        "lastName"
      ],
      "type": "object"
    },
    "BookingCreatedModel": {
      "example": "{\n  \"id\": \"XPGMSXGF\",\n  \"reservationIds\": [\n    {\n      \"id\": \"XPGMSXGF-1\"\n    },\n    {\n      \"id\": \"XPGMSXGF-2\"\n    }\n  ]\n}",
      "properties": {
        "id": {
          "description": "Booking id",
          "type": "string"
        },
        "reservationIds": {
          "description": "List of ids for newly created reservations",
          "items": {
            "$ref": "#/definitions/ReservationCreatedModel"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "reservationIds"
      ],
      "type": "object"
    },
    "BookingItemModel": {
      "description": "A booking holds all shared metadata for a set of reservations",
      "properties": {
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookerComment": {
          "description": "Additional information and comment by the booker",
          "type": "string"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "groupId": {
          "description": "Group id",
          "type": "string"
        },
        "id": {
          "description": "Booking id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/PaymentAccountModel"
        },
        "reservations": {
          "description": "Reservations within this booking",
          "items": {
            "$ref": "#/definitions/BookingReservationModel"
          },
          "type": "array"
        }
      },
      "required": [
        "booker",
        "created",
        "id",
        "modified"
      ],
      "type": "object"
    },
    "BookingListModel": {
      "example": "{\n  \"bookings\": [\n    {\n      \"id\": \"XPGMSXGF\",\n      \"booker\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Jon\",\n        \"middleInitial\": \"D\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.d@doe.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 5\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"paymentAccount\": {\n        \"accountNumber\": \"1111\",\n        \"accountHolder\": \"John Doe\",\n        \"expiryMonth\": \"8\",\n        \"expiryYear\": \"2018\",\n        \"paymentMethod\": \"visa\",\n        \"payerEmail\": \"s.hopper@test.com\",\n        \"isVirtual\": false,\n        \"isActive\": false\n      },\n      \"comment\": \"The comment from the front desk or reservation office\",\n      \"bookerComment\": \"The comment from the booker provided via the booking channel\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"modified\": \"0001-01-01T00:00:00Z\",\n      \"reservations\": [\n        {\n          \"id\": \"XPGMSXGF-1\",\n          \"status\": \"Confirmed\",\n          \"externalCode\": \"345343345|334\",\n          \"channelCode\": \"BookingCom\",\n          \"arrival\": \"2020-06-20T17:00:00+02:00\",\n          \"departure\": \"2020-06-22T11:00:00+02:00\",\n          \"adults\": 1,\n          \"childrenAges\": [\n            6\n          ],\n          \"totalGrossAmount\": {\n            \"amount\": 130.0,\n            \"currency\": \"EUR\"\n          },\n          \"property\": {\n            \"id\": \"MUC\",\n            \"code\": \"MUC\",\n            \"name\": \"Demo Hotel Munich\",\n            \"description\": \"This is the demo hotel Munich\"\n          },\n          \"ratePlan\": {\n            \"id\": \"MUC-NONREF_DBL\",\n            \"code\": \"NONREF\",\n            \"name\": \"Non Refundable\",\n            \"description\": \"Non Refundable\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-DBL\",\n            \"code\": \"DBL\",\n            \"name\": \"Double\",\n            \"description\": \"Double\"\n          },\n          \"guestComment\": \"The comment from the guest provided via the booking channel\"\n        }\n      ]\n    }\n  ],\n  \"count\": 1\n}",
      "properties": {
        "bookings": {
          "items": {
            "$ref": "#/definitions/BookingItemModel"
          },
          "type": "array"
        },
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "bookings",
        "count"
      ],
      "type": "object"
    },
    "BookingModel": {
      "description": "A booking holds all shared metadata for a set of reservations",
      "example": "{\n  \"id\": \"XPGMSXGF\",\n  \"booker\": {\n    \"title\": \"Mr\",\n    \"gender\": \"Male\",\n    \"firstName\": \"Jon\",\n    \"middleInitial\": \"D\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.d@doe.com\",\n    \"phone\": \"+4989123343\",\n    \"address\": {\n      \"addressLine1\": \"My Street 5\",\n      \"postalCode\": \"12453\",\n      \"city\": \"MyCity\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"paymentAccount\": {\n    \"accountNumber\": \"1111\",\n    \"accountHolder\": \"John Doe\",\n    \"expiryMonth\": \"8\",\n    \"expiryYear\": \"2018\",\n    \"paymentMethod\": \"visa\",\n    \"payerEmail\": \"s.hopper@test.com\",\n    \"isVirtual\": false,\n    \"isActive\": false\n  },\n  \"comment\": \"The comment from the front desk or reservation office\",\n  \"bookerComment\": \"The comment from the booker provided via the booking channel\",\n  \"created\": \"0001-01-01T00:00:00Z\",\n  \"modified\": \"0001-01-01T00:00:00Z\",\n  \"reservations\": [\n    {\n      \"id\": \"XPGMSXGF-1\",\n      \"status\": \"Confirmed\",\n      \"externalCode\": \"345343345|334\",\n      \"channelCode\": \"BookingCom\",\n      \"arrival\": \"2020-06-20T17:00:00+02:00\",\n      \"departure\": \"2020-06-22T11:00:00+02:00\",\n      \"adults\": 1,\n      \"childrenAges\": [\n        6\n      ],\n      \"totalGrossAmount\": {\n        \"amount\": 130.0,\n        \"currency\": \"EUR\"\n      },\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_DBL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-DBL\",\n        \"code\": \"DBL\",\n        \"name\": \"Double\",\n        \"description\": \"Double\"\n      },\n      \"guestComment\": \"The comment from the guest provided via the booking channel\",\n      \"company\": {\n        \"id\": \"MUC-UMBRELLA\",\n        \"code\": \"UMBRELLA\",\n        \"name\": \"Umbrella Corp.\",\n        \"canCheckOutOnAr\": true\n      }\n    }\n  ]\n}",
      "properties": {
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookerComment": {
          "description": "Additional information and comment by the booker",
          "type": "string"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "groupId": {
          "description": "Group id",
          "type": "string"
        },
        "id": {
          "description": "Booking id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/PaymentAccountModel"
        },
        "propertyValues": {
          "description": "Property specific values like total amount and balance",
          "items": {
            "$ref": "#/definitions/PropertyValueModel"
          },
          "type": "array"
        },
        "reservations": {
          "description": "Reservations within this booking",
          "items": {
            "$ref": "#/definitions/BookingReservationModel"
          },
          "type": "array"
        }
      },
      "required": [
        "booker",
        "created",
        "id",
        "modified"
      ],
      "type": "object"
    },
    "BookingReservationModel": {
      "properties": {
        "adults": {
          "description": "Number of adults",
          "format": "int32",
          "type": "integer"
        },
        "arrival": {
          "description": "Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "cancellationFee": {
          "$ref": "#/definitions/ReservationCancellationFeeModel"
        },
        "channelCode": {
          "description": "Channel code",
          "enum": [
            "Direct",
            "BookingCom",
            "Ibe",
            "ChannelManager",
            "Expedia",
            "Homelike"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ChannelCode"
          }
        },
        "childrenAges": {
          "description": "The ages of the children",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "company": {
          "$ref": "#/definitions/EmbeddedCompanyModel"
        },
        "departure": {
          "description": "Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "externalCode": {
          "description": "Code in external system",
          "type": "string"
        },
        "guestComment": {
          "description": "Additional information and comment by the guest",
          "type": "string"
        },
        "id": {
          "description": "Reservation id",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/PaymentAccountModel"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "services": {
          "description": "The list of additional services (extras, add-ons) reserved for the stay",
          "items": {
            "$ref": "#/definitions/ReservationServiceItemModel"
          },
          "type": "array"
        },
        "source": {
          "description": "Source of the reservation (e.g Hotels.com, Orbitz, etc.)",
          "type": "string"
        },
        "status": {
          "description": "Status of the reservation",
          "enum": [
            "Confirmed",
            "InHouse",
            "CheckedOut",
            "Canceled",
            "NoShow"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ReservationStatus"
          }
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "adults",
        "arrival",
        "cancellationFee",
        "channelCode",
        "departure",
        "id",
        "property",
        "ratePlan",
        "status",
        "totalGrossAmount",
        "unitGroup"
      ],
      "type": "object"
    },
    "CommissionModel": {
      "properties": {
        "beforeCommissionAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "commissionAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "commissionAmount"
      ],
      "type": "object"
    },
    "CountModel": {
      "example": "{\n  \"count\": 50\n}",
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "count"
      ],
      "type": "object"
    },
    "CreateBlockModel": {
      "example": "{\n  \"groupId\": \"XPGMSXGF\",\n  \"ratePlanId\": \"MUC-NONREF-SGL\",\n  \"from\": \"2020-06-23\",\n  \"to\": \"2020-06-26\",\n  \"grossDailyRate\": {\n    \"amount\": 160.0,\n    \"currency\": \"EUR\"\n  },\n  \"timeSlices\": [\n    {\n      \"blockedUnits\": 3\n    },\n    {\n      \"blockedUnits\": 0\n    },\n    {\n      \"blockedUnits\": 7\n    }\n  ]\n}",
      "properties": {
        "blockedUnits": {
          "description": "Number of units to block for the defined time period",
          "format": "int32",
          "type": "integer"
        },
        "corporateCode": {
          "description": "The corporate code associated with a certain special offer",
          "type": "string"
        },
        "from": {
          "description": "Start date and time from which the inventory will be blocked<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "grossDailyRate": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "groupId": {
          "description": "ID of the group that reserved the block",
          "type": "string"
        },
        "promoCode": {
          "description": "The promo code associated with a certain special offer",
          "type": "string"
        },
        "ratePlanId": {
          "description": "The rate plan",
          "type": "string"
        },
        "timeSlices": {
          "description": "The list of blocked units for each time slice",
          "items": {
            "$ref": "#/definitions/CreateBlockTimeSliceModel"
          },
          "type": "array"
        },
        "to": {
          "description": "End date and time until which the inventory will be blocked. Cannot be more than 5 years after the start date.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        }
      },
      "required": [
        "from",
        "grossDailyRate",
        "groupId",
        "ratePlanId",
        "to"
      ],
      "type": "object"
    },
    "CreateBlockTimeSliceModel": {
      "properties": {
        "blockedUnits": {
          "description": "Number of units blocked for the time slice",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "blockedUnits"
      ],
      "type": "object"
    },
    "CreateBookingModel": {
      "description": "With this request you can create a booking",
      "example": "{\n  \"paymentAccount\": {\n    \"accountNumber\": \"1111\",\n    \"accountHolder\": \"John Doe\",\n    \"expiryMonth\": \"8\",\n    \"expiryYear\": \"2018\",\n    \"paymentMethod\": \"visa\",\n    \"payerEmail\": \"s.hopper@test.com\",\n    \"payerReference\": \"4ea6462b-cca3-4c17-a035-c7b5132db83c\",\n    \"transactionReference\": \"564578124534890J\",\n    \"isVirtual\": false\n  },\n  \"booker\": {\n    \"title\": \"Mr\",\n    \"gender\": \"Male\",\n    \"firstName\": \"Jon\",\n    \"middleInitial\": \"D\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.d@doe.com\",\n    \"phone\": \"+4989123343\",\n    \"address\": {\n      \"addressLine1\": \"My Street 1\",\n      \"postalCode\": \"12453\",\n      \"city\": \"MyCity\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"reservations\": [\n    {\n      \"arrival\": \"2020-06-20\",\n      \"departure\": \"2020-06-22\",\n      \"adults\": 1,\n      \"childrenAges\": [\n        6\n      ],\n      \"guestComment\": \"I need a wake up service\",\n      \"channelCode\": \"Direct\",\n      \"primaryGuest\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Jon\",\n        \"middleInitial\": \"D\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.d@doe.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 1\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"guaranteeType\": \"Prepayment\",\n      \"travelPurpose\": \"Business\",\n      \"timeSlices\": [\n        {\n          \"ratePlanId\": \"MUC-NONREF-FAMILY\"\n        },\n        {\n          \"ratePlanId\": \"MUC-NONREF-FAMILY\"\n        }\n      ],\n      \"services\": [\n        {\n          \"serviceId\": \"MUC-BRKF\"\n        },\n        {\n          \"serviceId\": \"MUC-YOGA\",\n          \"dates\": [\n            {\n              \"serviceDate\": \"2020-06-21\",\n              \"amount\": {\n                \"amount\": 35.0,\n                \"currency\": \"EUR\"\n              }\n            }\n          ]\n        }\n      ],\n      \"prePaymentAmount\": {\n        \"amount\": 50.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"arrival\": \"2020-06-21\",\n      \"departure\": \"2020-06-23\",\n      \"adults\": 1,\n      \"childrenAges\": [\n        6\n      ],\n      \"channelCode\": \"Direct\",\n      \"primaryGuest\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Eric\",\n        \"middleInitial\": \"E\",\n        \"lastName\": \"Steinmetz\",\n        \"email\": \"eric.e@steinmetz.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 1\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"guaranteeType\": \"CreditCard\",\n      \"timeSlices\": [\n        {\n          \"ratePlanId\": \"BER-FLEX-DBL\",\n          \"totalAmount\": {\n            \"amount\": 120.0,\n            \"currency\": \"EUR\"\n          }\n        },\n        {\n          \"ratePlanId\": \"BER-FLEX-DBL\",\n          \"totalAmount\": {\n            \"amount\": 125.0,\n            \"currency\": \"EUR\"\n          }\n        }\n      ],\n      \"companyId\": \"BER-UMBRELLA\",\n      \"commission\": {\n        \"commissionAmount\": {\n          \"amount\": 20.0,\n          \"currency\": \"EUR\"\n        },\n        \"beforeCommissionAmount\": {\n          \"amount\": 100.0,\n          \"currency\": \"EUR\"\n        }\n      }\n    }\n  ]\n}",
      "properties": {
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookerComment": {
          "description": "Additional information and comments by the booker",
          "type": "string"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/CreatePaymentAccountModel"
        },
        "reservations": {
          "description": "List of reservations to create",
          "items": {
            "$ref": "#/definitions/CreateReservationModel"
          },
          "type": "array"
        }
      },
      "required": [
        "booker",
        "reservations"
      ],
      "type": "object"
    },
    "CreateGroupModel": {
      "description": "With this request you can create a group booking request",
      "example": "{\n  \"name\": \"apaleo Summer Festival 2021\",\n  \"booker\": {\n    \"title\": \"Mr\",\n    \"gender\": \"Male\",\n    \"firstName\": \"Jon\",\n    \"middleInitial\": \"D\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.d@doe.com\",\n    \"phone\": \"+4989123343\",\n    \"address\": {\n      \"addressLine1\": \"My Street 1\",\n      \"postalCode\": \"12453\",\n      \"city\": \"MyCity\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"paymentAccount\": {\n    \"accountNumber\": \"1111\",\n    \"accountHolder\": \"John Doe\",\n    \"expiryMonth\": \"8\",\n    \"expiryYear\": \"2018\",\n    \"paymentMethod\": \"visa\",\n    \"payerEmail\": \"s.hopper@test.com\",\n    \"payerReference\": \"4ea6462b-cca3-4c17-a035-c7b5132db83c\",\n    \"isVirtual\": false\n  },\n  \"propertyIds\": [\n    \"MUC\"\n  ]\n}",
      "properties": {
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookerComment": {
          "description": "Additional information and comment by the booker",
          "type": "string"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "name": {
          "description": "Name of the group",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/CreatePaymentAccountModel"
        },
        "propertyIds": {
          "description": "List of property ids the group booking belongs to",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "booker",
        "name",
        "propertyIds"
      ],
      "type": "object"
    },
    "CreatePaymentAccountModel": {
      "properties": {
        "accountHolder": {
          "description": "The account holder (e.g. card holder)",
          "type": "string"
        },
        "accountNumber": {
          "description": "The account number (e.g. masked credit card number or last 4 digits)",
          "type": "string"
        },
        "expiryMonth": {
          "description": "The credit card's expiration month",
          "type": "string"
        },
        "expiryYear": {
          "description": "The credit card's expiration year",
          "type": "string"
        },
        "isVirtual": {
          "description": "Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false'",
          "type": "boolean"
        },
        "payerEmail": {
          "description": "The email address of the shopper / customer",
          "type": "string"
        },
        "payerReference": {
          "description": "The reference used to uniquely identify the shopper (e.g. user ID or account ID). Used for recurring payments",
          "type": "string"
        },
        "paymentMethod": {
          "description": "The payment method (e.g. visa)",
          "type": "string"
        },
        "transactionReference": {
          "description": "The reference of a payment transaction. This should be set when a payment transaction has been already initiated and should be completed upon reservation creation.",
          "type": "string"
        }
      },
      "required": [
        "accountHolder",
        "accountNumber",
        "expiryMonth",
        "expiryYear",
        "paymentMethod"
      ],
      "type": "object"
    },
    "CreateReservationModel": {
      "description": "With this request you can create a reservation",
      "properties": {
        "additionalGuests": {
          "description": "Additional guests of the reservation.",
          "items": {
            "$ref": "#/definitions/GuestModel"
          },
          "type": "array"
        },
        "adults": {
          "description": "Number of adults",
          "format": "int32",
          "type": "integer"
        },
        "arrival": {
          "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "channelCode": {
          "description": "Channel code",
          "enum": [
            "Direct",
            "BookingCom",
            "Ibe",
            "ChannelManager",
            "Expedia",
            "Homelike"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ChannelCode"
          }
        },
        "childrenAges": {
          "description": "Ages of the children",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "commission": {
          "$ref": "#/definitions/CommissionModel"
        },
        "companyId": {
          "description": "Set this if this reservation belongs to a company",
          "type": "string"
        },
        "corporateCode": {
          "description": "Corporate code provided during creation. Used to find offers during amend.",
          "type": "string"
        },
        "departure": {
          "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "externalCode": {
          "description": "Code in some system",
          "type": "string"
        },
        "guaranteeType": {
          "description": "The guarantee that has to be applied for this reservation. It has to be the same or stronger than\r\nthe minimum guarantee required by the selected rate plan",
          "enum": [
            "PM6Hold",
            "CreditCard",
            "Prepayment",
            "Company"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "MinGuaranteeType"
          }
        },
        "guestComment": {
          "description": "Additional information and comments by the guest",
          "type": "string"
        },
        "prePaymentAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "primaryGuest": {
          "$ref": "#/definitions/GuestModel"
        },
        "promoCode": {
          "description": "The promo code associated with a certain special offer",
          "type": "string"
        },
        "services": {
          "description": "Additional services (extras, add-ons) that should be added to the reservation",
          "items": {
            "$ref": "#/definitions/BookReservationServiceModel"
          },
          "type": "array"
        },
        "source": {
          "description": "Source of the reservation",
          "type": "string"
        },
        "timeSlices": {
          "description": "Gross prices including services and taxes for each time slice. They will be applied to the reservation timeslices\r\nin the order specified from arrival to departure",
          "items": {
            "$ref": "#/definitions/CreateReservationTimeSliceModel"
          },
          "type": "array"
        },
        "travelPurpose": {
          "description": "Purpose of the trip, leisure or business",
          "enum": [
            "Business",
            "Leisure"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "TravelPurpose"
          }
        }
      },
      "required": [
        "adults",
        "arrival",
        "channelCode",
        "departure",
        "timeSlices"
      ],
      "type": "object"
    },
    "CreateReservationTimeSliceModel": {
      "properties": {
        "ratePlanId": {
          "description": "The rate plan id for this time slice",
          "type": "string"
        },
        "totalAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "ratePlanId"
      ],
      "type": "object"
    },
    "Date": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "count": {
          "description": "The number of services to book for this date. It defaults to the service offer count when not specified.",
          "format": "int32",
          "type": "integer"
        },
        "serviceDate": {
          "description": "The date the service is delivered",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "serviceDate"
      ],
      "type": "object"
    },
    "DesiredStayDetailsModel": {
      "example": "{\n  \"arrival\": \"2020-06-20T17:00:00+02:00\",\n  \"departure\": \"2020-06-22T11:00:00+02:00\",\n  \"adults\": 1,\n  \"childrenAges\": [\n    6\n  ],\n  \"requote\": false,\n  \"timeSlices\": [\n    {\n      \"ratePlanId\": \"MUC-NONREF-DBL\",\n      \"totalGrossAmount\": {\n        \"amount\": 86.00,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"ratePlanId\": \"MUC-NONREF-DBL\",\n      \"totalGrossAmount\": {\n        \"amount\": 101.00,\n        \"currency\": \"EUR\"\n      }\n    }\n  ]\n}",
      "properties": {
        "adults": {
          "description": "Number of adults",
          "format": "int32",
          "type": "integer"
        },
        "arrival": {
          "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "childrenAges": {
          "description": "Ages of the children",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "departure": {
          "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "requote": {
          "description": "Whether the prices for time slices with no change to the rate plan should be re-quoted based on current prices, or if\r\nonly additions like change of number of adults should be calculated. Defaults to 'false'.",
          "type": "boolean"
        },
        "timeSlices": {
          "description": "The list of time slices",
          "items": {
            "$ref": "#/definitions/DesiredTimeSliceModel"
          },
          "type": "array"
        }
      },
      "required": [
        "adults",
        "arrival",
        "departure",
        "timeSlices"
      ],
      "type": "object"
    },
    "DesiredTimeSliceModel": {
      "properties": {
        "ratePlanId": {
          "description": "The rate plan id for this time slice",
          "type": "string"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "ratePlanId"
      ],
      "type": "object"
    },
    "EmbeddedCompanyModel": {
      "properties": {
        "canCheckOutOnAr": {
          "description": "Whether or not the company can check out on AR",
          "type": "boolean"
        },
        "code": {
          "description": "The code of the company",
          "type": "string"
        },
        "id": {
          "description": "The company ID",
          "type": "string"
        },
        "name": {
          "description": "The name of the company",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "EmbeddedGroupModel": {
      "properties": {
        "id": {
          "description": "Group booking id",
          "type": "string"
        },
        "name": {
          "description": "Name of the group",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "EmbeddedPropertyModel": {
      "properties": {
        "code": {
          "description": "The code for the property that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "description": "The description for the property",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "The property id",
          "type": "string"
        },
        "name": {
          "description": "The name for the property",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "EmbeddedRatePlanModel": {
      "properties": {
        "code": {
          "description": "The code for the rate plan that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "description": "The description for the rate plan",
          "type": "string"
        },
        "id": {
          "description": "The rate plan id",
          "type": "string"
        },
        "isSubjectToCityTax": {
          "description": "Whether the rate plan is subject to city tax or not",
          "type": "boolean"
        },
        "name": {
          "description": "The name for the rate plan",
          "type": "string"
        }
      },
      "required": [
        "id",
        "isSubjectToCityTax"
      ],
      "type": "object"
    },
    "EmbeddedServiceModel": {
      "properties": {
        "code": {
          "description": "The code for the service",
          "type": "string"
        },
        "description": {
          "description": "The description for the service",
          "type": "string"
        },
        "id": {
          "description": "The service id",
          "type": "string"
        },
        "name": {
          "description": "The name for the service",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "EmbeddedUnitGroupModel": {
      "properties": {
        "code": {
          "description": "The code for the unit group that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "description": "The description for the unit group",
          "type": "string"
        },
        "id": {
          "description": "The unit group id",
          "type": "string"
        },
        "name": {
          "description": "The name for the unit group",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "EmbeddedUnitModel": {
      "properties": {
        "description": {
          "description": "The description for the unit",
          "type": "string"
        },
        "id": {
          "description": "The unit id",
          "type": "string"
        },
        "name": {
          "description": "The name for the unit",
          "type": "string"
        },
        "unitGroupId": {
          "description": "The unit group id",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "GroupBlockModel": {
      "properties": {
        "blockedUnits": {
          "description": "Number of units blocked",
          "format": "int32",
          "type": "integer"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "from": {
          "description": "Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "grossDailyRate": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "id": {
          "description": "Block id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "pickedReservations": {
          "description": "Number of reservations already picked from this block",
          "format": "int32",
          "type": "integer"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "status": {
          "description": "Status of the block",
          "enum": [
            "Tentative",
            "Definite",
            "Canceled"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "BlockStatus"
          }
        },
        "to": {
          "description": "End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "blockedUnits",
        "created",
        "from",
        "grossDailyRate",
        "id",
        "modified",
        "pickedReservations",
        "property",
        "ratePlan",
        "status",
        "to",
        "unitGroup"
      ],
      "type": "object"
    },
    "GroupCreatedModel": {
      "example": "{\n  \"id\": \"XPGMSXGF\"\n}",
      "properties": {
        "id": {
          "description": "Id of newly created group booking",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "GroupItemModel": {
      "properties": {
        "actions": {
          "description": "The list of actions for this group",
          "items": {
            "$ref": "#/definitions/ActionModel[GroupAction,NotAllowedGroupActionReason]"
          },
          "type": "array"
        },
        "blocks": {
          "description": "Blocks within this group",
          "items": {
            "$ref": "#/definitions/GroupBlockModel"
          },
          "type": "array"
        },
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookerComment": {
          "description": "Additional information and comment by the booker",
          "type": "string"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "from": {
          "description": "Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Group id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "Name of the group",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/PaymentAccountModel"
        },
        "propertyIds": {
          "description": "The list of property ids this group belongs to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "to": {
          "description": "End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "booker",
        "created",
        "id",
        "modified",
        "name",
        "propertyIds"
      ],
      "type": "object"
    },
    "GroupListModel": {
      "example": "{\n  \"groups\": [\n    {\n      \"id\": \"XPGMSXGF\",\n      \"name\": \"apaleo Summer Festival 2021\",\n      \"booker\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Jon\",\n        \"middleInitial\": \"D\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.d@doe.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 5\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"paymentAccount\": {\n        \"accountNumber\": \"1111\",\n        \"accountHolder\": \"John Doe\",\n        \"expiryMonth\": \"8\",\n        \"expiryYear\": \"2018\",\n        \"paymentMethod\": \"visa\",\n        \"payerEmail\": \"s.hopper@test.com\",\n        \"isVirtual\": false,\n        \"isActive\": false\n      },\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"modified\": \"0001-01-01T00:00:00Z\"\n    }\n  ],\n  \"count\": 1\n}",
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/GroupItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "groups"
      ],
      "type": "object"
    },
    "GroupModel": {
      "example": "{\n  \"id\": \"XPGMSXGF\",\n  \"name\": \"apaleo Summer Festival 2021\",\n  \"from\": \"2020-06-23T17:08:08.9853672+02:00\",\n  \"to\": \"2020-06-30T17:08:08.9853672+02:00\",\n  \"booker\": {\n    \"title\": \"Mr\",\n    \"gender\": \"Male\",\n    \"firstName\": \"Jon\",\n    \"middleInitial\": \"D\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.d@doe.com\",\n    \"phone\": \"+4989123343\",\n    \"address\": {\n      \"addressLine1\": \"My Street 5\",\n      \"postalCode\": \"12453\",\n      \"city\": \"MyCity\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"paymentAccount\": {\n    \"accountNumber\": \"1111\",\n    \"accountHolder\": \"John Doe\",\n    \"expiryMonth\": \"8\",\n    \"expiryYear\": \"2018\",\n    \"paymentMethod\": \"visa\",\n    \"payerEmail\": \"s.hopper@test.com\",\n    \"isVirtual\": false,\n    \"isActive\": false\n  },\n  \"created\": \"0001-01-01T00:00:00Z\",\n  \"modified\": \"0001-01-01T00:00:00Z\",\n  \"blocks\": [\n    {\n      \"id\": \"MUC-HSGTDG\",\n      \"status\": \"Tentative\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_SGL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\"\n      },\n      \"grossDailyRate\": {\n        \"amount\": 160.0,\n        \"currency\": \"EUR\"\n      },\n      \"from\": \"2020-06-23T17:08:08.9853672+02:00\",\n      \"to\": \"2020-06-28T17:08:08.9853672+02:00\",\n      \"blockedUnits\": 10,\n      \"pickedReservations\": 0,\n      \"created\": \"2020-06-18T17:08:08.9853672+02:00\",\n      \"modified\": \"2020-06-18T17:08:08.9853672+02:00\"\n    },\n    {\n      \"id\": \"MUC-JAIULS\",\n      \"status\": \"Definite\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_DBL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-DBL\",\n        \"code\": \"DBL\",\n        \"name\": \"Double\",\n        \"description\": \"Double\"\n      },\n      \"grossDailyRate\": {\n        \"amount\": 190.0,\n        \"currency\": \"EUR\"\n      },\n      \"from\": \"2020-06-24T17:08:08.9853672+02:00\",\n      \"to\": \"2020-06-30T17:08:08.9853672+02:00\",\n      \"blockedUnits\": 8,\n      \"pickedReservations\": 3,\n      \"created\": \"2020-06-18T17:08:08.9853672+02:00\",\n      \"modified\": \"2020-06-18T17:08:08.9853672+02:00\"\n    }\n  ],\n  \"propertyIds\": [\n    \"MUC\"\n  ]\n}",
      "properties": {
        "actions": {
          "description": "The list of actions for this group",
          "items": {
            "$ref": "#/definitions/ActionModel[GroupAction,NotAllowedGroupActionReason]"
          },
          "type": "array"
        },
        "blocks": {
          "description": "Blocks within this group",
          "items": {
            "$ref": "#/definitions/GroupBlockModel"
          },
          "type": "array"
        },
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookerComment": {
          "description": "Additional information and comment by the booker",
          "type": "string"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "from": {
          "description": "Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Group id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "Name of the group",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/PaymentAccountModel"
        },
        "propertyIds": {
          "description": "The list of property ids this group belongs to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "to": {
          "description": "End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "booker",
        "created",
        "id",
        "modified",
        "name",
        "propertyIds"
      ],
      "type": "object"
    },
    "GuestModel": {
      "properties": {
        "address": {
          "$ref": "#/definitions/PersonAddressModel"
        },
        "birthDate": {
          "description": "Guest's birthdate",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/PersonCompanyModel"
        },
        "email": {
          "description": "Email address of the guest",
          "type": "string"
        },
        "firstName": {
          "description": "First name of the guest",
          "type": "string"
        },
        "gender": {
          "description": "Gender of the booker",
          "enum": [
            "Female",
            "Male",
            "Other"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "Gender"
          }
        },
        "identificationNumber": {
          "description": "The guest's identification number for the given identificationType.",
          "type": "string"
        },
        "identificationType": {
          "description": "The type of the identificationNumber",
          "enum": [
            "SocialInsuranceNumber",
            "PassportNumber",
            "IdNumber",
            "DriverLicenseNumber"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "IdentificationType"
          }
        },
        "lastName": {
          "description": "Last name of the guest",
          "type": "string"
        },
        "middleInitial": {
          "description": "Middle initial of the guest",
          "type": "string"
        },
        "nationalityCountryCode": {
          "description": "The guest's nationality, in ISO 3166-1 alpha-2 code",
          "type": "string"
        },
        "phone": {
          "description": "Phone number of the guest",
          "type": "string"
        },
        "preferredLanguage": {
          "description": "Two-letter code (ISO Alpha-2) of a language preferred for contact",
          "type": "string"
        },
        "title": {
          "description": "Title of the guest",
          "enum": [
            "Mr",
            "Ms",
            "Dr",
            "Prof",
            "Other"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "PersonTitle"
          }
        }
      },
      "required": [
        "lastName"
      ],
      "type": "object"
    },
    "MaintenanceModel": {
      "properties": {
        "outOfInventory": {
          "description": "The number of units which are out of inventory",
          "format": "int32",
          "type": "integer"
        },
        "outOfOrder": {
          "description": "The number of units which are out of order",
          "format": "int32",
          "type": "integer"
        },
        "outOfService": {
          "description": "The number of units which are out of service",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "outOfInventory",
        "outOfOrder",
        "outOfService"
      ],
      "type": "object"
    },
    "MessageItemCollection": {
      "properties": {
        "messages": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "MonetaryValueModel": {
      "properties": {
        "amount": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "type": "string"
        }
      },
      "required": [
        "amount",
        "currency"
      ],
      "type": "object"
    },
    "OfferCancellationFeeModel": {
      "properties": {
        "code": {
          "description": "The code of the cancellation policy applied",
          "type": "string"
        },
        "description": {
          "description": "The description of the cancellation policy applied",
          "type": "string"
        },
        "dueDateTime": {
          "description": "The date and time the cancellation fee will be due. After that time this fee will\r\nbe charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "name": {
          "description": "The name of the cancellation policy applied",
          "type": "string"
        }
      },
      "required": [
        "code",
        "description",
        "dueDateTime",
        "fee",
        "name"
      ],
      "type": "object"
    },
    "OfferFeeModel": {
      "properties": {
        "code": {
          "description": "The code for the fee",
          "type": "string"
        },
        "id": {
          "description": "The fee id",
          "type": "string"
        },
        "name": {
          "description": "The name for the fee",
          "type": "string"
        },
        "totalAmount": {
          "$ref": "#/definitions/AmountModel"
        }
      },
      "required": [
        "code",
        "id",
        "name",
        "totalAmount"
      ],
      "type": "object"
    },
    "OfferModel": {
      "properties": {
        "arrival": {
          "description": "The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "availableUnits": {
          "description": "The number of available units for that offer",
          "format": "int32",
          "type": "integer"
        },
        "cancellationFee": {
          "$ref": "#/definitions/OfferCancellationFeeModel"
        },
        "cityTax": {
          "$ref": "#/definitions/AmountModel"
        },
        "companyId": {
          "description": "ID of the company the offer is created for",
          "type": "string"
        },
        "corporateCode": {
          "description": "The corporate rate code the offer is created for",
          "type": "string"
        },
        "departure": {
          "description": "The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "fees": {
          "description": "The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.StayOffer.OfferModel.TotalGrossAmount when creating the booking",
          "items": {
            "$ref": "#/definitions/OfferFeeModel"
          },
          "type": "array"
        },
        "isCorporate": {
          "description": "Whether the offer is for a corporate rate plan",
          "type": "boolean"
        },
        "minGuaranteeType": {
          "description": "The minimum guarantee type for this offer",
          "enum": [
            "PM6Hold",
            "CreditCard",
            "Prepayment",
            "Company"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "MinGuaranteeType"
          }
        },
        "noShowFee": {
          "$ref": "#/definitions/OfferNoShowFeeModel"
        },
        "prePaymentAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "services": {
          "description": "The list of the mandatory services for this offer. Such services will be automatically booked when booking this offer",
          "items": {
            "$ref": "#/definitions/ServiceOfferModel"
          },
          "type": "array"
        },
        "taxDetails": {
          "description": "Tax breakdown, displaying net and tax amount for each VAT type",
          "items": {
            "$ref": "#/definitions/TaxDetailModel"
          },
          "type": "array"
        },
        "timeSlices": {
          "description": "The breakdown for each time slice for this offer",
          "items": {
            "$ref": "#/definitions/OfferTimeSliceModel"
          },
          "type": "array"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/OfferUnitGroupModel"
        },
        "validationMessages": {
          "description": "Validation rules that were applied to the offer and show the reason why the offer is not bookable",
          "items": {
            "$ref": "#/definitions/OfferValidationMessageModel"
          },
          "type": "array"
        }
      },
      "required": [
        "arrival",
        "availableUnits",
        "cancellationFee",
        "departure",
        "isCorporate",
        "minGuaranteeType",
        "noShowFee",
        "prePaymentAmount",
        "ratePlan",
        "taxDetails",
        "timeSlices",
        "totalGrossAmount",
        "unitGroup"
      ],
      "type": "object"
    },
    "OfferNoShowFeeModel": {
      "properties": {
        "code": {
          "description": "The code of the no-show policy applied",
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "code",
        "fee"
      ],
      "type": "object"
    },
    "OfferServiceModel": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/AmountModel"
        },
        "count": {
          "description": "The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.",
          "format": "int32",
          "type": "integer"
        },
        "pricingMode": {
          "description": "Whether the service price is included in or added to the base rate",
          "enum": [
            "Included",
            "Additional"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "PricingMode"
          }
        },
        "service": {
          "$ref": "#/definitions/EmbeddedServiceModel"
        },
        "serviceDate": {
          "description": "The date this service is delivered",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "count",
        "pricingMode",
        "service",
        "serviceDate"
      ],
      "type": "object"
    },
    "OfferTimeSliceModel": {
      "properties": {
        "availableUnits": {
          "description": "The number of available units for that time slice",
          "format": "int32",
          "type": "integer"
        },
        "baseAmount": {
          "$ref": "#/definitions/AmountModel"
        },
        "from": {
          "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "includedServices": {
          "description": "The breakdown for services included in the offer",
          "items": {
            "$ref": "#/definitions/OfferServiceModel"
          },
          "type": "array"
        },
        "to": {
          "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "availableUnits",
        "baseAmount",
        "from",
        "to",
        "totalGrossAmount"
      ],
      "type": "object"
    },
    "OfferUnitGroupModel": {
      "properties": {
        "code": {
          "description": "The code for the unit group that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "description": "The description for the unit group",
          "type": "string"
        },
        "id": {
          "description": "The unit group id",
          "type": "string"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit group",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name for the unit group",
          "type": "string"
        },
        "rank": {
          "description": "The unit group rank",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "code",
        "description",
        "id",
        "maxPersons",
        "name"
      ],
      "type": "object"
    },
    "OfferValidationMessageModel": {
      "properties": {
        "code": {
          "description": "The message Code",
          "enum": [
            "UnitGroupFullyBooked",
            "UnitGroupCapacityExceeded",
            "RatePlanRestrictionsViolated",
            "RatePlanSurchargesNotSet",
            "RateRestrictionsViolated",
            "RatePlanChannelNotSet",
            "RatesNotSet",
            "BlockFullyBooked",
            "IncludedServicesAmountExceededRateAmount"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "OfferValidationMessageCode"
          }
        },
        "message": {
          "description": "The message description",
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    },
    "Operation": {
      "properties": {
        "from": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "PayableAmountModel": {
      "properties": {
        "guest": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "guest"
      ],
      "type": "object"
    },
    "PaymentAccountModel": {
      "properties": {
        "accountHolder": {
          "description": "The account holder (e.g. card holder)",
          "type": "string"
        },
        "accountNumber": {
          "description": "The account number (e.g. masked credit card number or last 4 digits)",
          "type": "string"
        },
        "expiryMonth": {
          "description": "The credit card's expiration month",
          "type": "string"
        },
        "expiryYear": {
          "description": "The credit card's expiration year",
          "type": "string"
        },
        "isActive": {
          "description": "Indicates if the payment account can be used for capturing payments. A payment account is active, when it has a valid payer reference set",
          "type": "boolean"
        },
        "isVirtual": {
          "description": "Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false'",
          "type": "boolean"
        },
        "payerEmail": {
          "description": "The email address of the shopper / customer",
          "type": "string"
        },
        "payerReference": {
          "description": "The payer reference. It is used to make recurring captures and its usage is allowed only in the scope of the booking.\r\nFor the reason above this is a write-only field.",
          "type": "string"
        },
        "paymentMethod": {
          "description": "The payment method (e.g. visa)",
          "type": "string"
        }
      },
      "required": [
        "accountHolder",
        "accountNumber",
        "expiryMonth",
        "expiryYear",
        "isActive",
        "paymentMethod"
      ],
      "type": "object"
    },
    "PerOccupancyPriceItemModel": {
      "properties": {
        "adults": {
          "description": "Number of adults",
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "$ref": "#/definitions/PriceModel"
        }
      },
      "required": [
        "adults",
        "price"
      ],
      "type": "object"
    },
    "PeriodModel": {
      "properties": {
        "days": {
          "description": "The number of days within the period",
          "format": "int32",
          "type": "integer"
        },
        "hours": {
          "description": "The number of hours within the period",
          "format": "int64",
          "type": "integer"
        },
        "months": {
          "description": "The number of months within the period",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PersonAddressModel": {
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PersonCompanyModel": {
      "properties": {
        "name": {
          "description": "Name of the company",
          "type": "string"
        },
        "taxId": {
          "description": "Tax or Vat ID of the company",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PickUpReservationModel": {
      "description": "With this request you can pick up a reservation",
      "properties": {
        "additionalGuests": {
          "description": "Additional guests of the reservation.",
          "items": {
            "$ref": "#/definitions/GuestModel"
          },
          "type": "array"
        },
        "adults": {
          "description": "Number of adults",
          "format": "int32",
          "type": "integer"
        },
        "arrival": {
          "description": "Date of arrival and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "blockId": {
          "description": "ID of the block",
          "type": "string"
        },
        "childrenAges": {
          "description": "The ages of the children",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "departure": {
          "description": "Date of departure and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "guestComment": {
          "description": "Additional information and comment by the guest",
          "type": "string"
        },
        "primaryGuest": {
          "$ref": "#/definitions/GuestModel"
        },
        "services": {
          "description": "Additional services (extras, add-ons) that should be added to the reservation",
          "items": {
            "$ref": "#/definitions/BookReservationServiceModel"
          },
          "type": "array"
        },
        "travelPurpose": {
          "description": "The purpose of the trip, leisure or business",
          "enum": [
            "Business",
            "Leisure"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "TravelPurpose"
          }
        }
      },
      "required": [
        "adults",
        "arrival",
        "blockId",
        "departure"
      ],
      "type": "object"
    },
    "PickUpReservationsModel": {
      "description": "With this request you can pick up reservations to an existing group booking",
      "example": "{\n  \"reservations\": [\n    {\n      \"blockId\": \"MUC-QJNXJR\",\n      \"arrival\": \"2020-06-20\",\n      \"departure\": \"2020-06-22\",\n      \"adults\": 1,\n      \"comment\": \"I need a wake up service\",\n      \"primaryGuest\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Jon\",\n        \"middleInitial\": \"D\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.d@doe.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 1\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        },\n        \"company\": {\n          \"name\": \"Company GmbH\",\n          \"taxId\": \"1442\"\n        }\n      }\n    },\n    {\n      \"blockId\": \"MUC-WKMCKT\",\n      \"arrival\": \"2020-06-21\",\n      \"departure\": \"2020-06-23\",\n      \"adults\": 1,\n      \"childrenAges\": [\n        6\n      ],\n      \"primaryGuest\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Eric\",\n        \"middleInitial\": \"E\",\n        \"lastName\": \"Steinmetz\",\n        \"email\": \"eric.e@steinmetz.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 1\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      }\n    }\n  ]\n}",
      "properties": {
        "reservations": {
          "description": "List of reservations to pick up to the existing group booking",
          "items": {
            "$ref": "#/definitions/PickUpReservationModel"
          },
          "type": "array"
        }
      },
      "required": [
        "reservations"
      ],
      "type": "object"
    },
    "PriceModel": {
      "example": "{\n  \"grossAmount\": 100.0,\n  \"beforeTax\": 91.57,\n  \"afterTax\": 101.71,\n  \"taxes\": {\n    \"tax\": 8.43,\n    \"cityTax\": 1.71\n  },\n  \"currency\": \"USD\"\n}",
      "properties": {
        "afterTax": {
          "description": "Price including all included services, VAT and any other taxes like city tax",
          "format": "double",
          "type": "number"
        },
        "beforeTax": {
          "description": "Price including all included services without VAT or any other taxes like city tax",
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "The currency for all prices and tax details",
          "type": "string"
        },
        "grossAmount": {
          "description": "Price including all included services and VAT - <b>DEPRECATED: This field will be removed soon, use BeforeTax + Taxes.Tax instead</b>",
          "format": "double",
          "type": "number"
        },
        "taxes": {
          "$ref": "#/definitions/TaxesModel"
        }
      },
      "required": [
        "afterTax",
        "beforeTax",
        "currency",
        "grossAmount",
        "taxes"
      ],
      "type": "object"
    },
    "PropertyAvailabilityModel": {
      "properties": {
        "allowedOverbookingCount": {
          "description": "The number of units which are allowed for overbooking",
          "format": "int32",
          "type": "integer"
        },
        "block": {
          "$ref": "#/definitions/BlockUnitsModel"
        },
        "houseCount": {
          "description": "The number of units physically existing excluding the ones which are out of inventory",
          "format": "int32",
          "type": "integer"
        },
        "maintenance": {
          "$ref": "#/definitions/MaintenanceModel"
        },
        "occupancy": {
          "description": "The percent value indicating the occupancy",
          "format": "double",
          "type": "number"
        },
        "physicalCount": {
          "description": "The number of units physically existing on the property",
          "format": "int32",
          "type": "integer"
        },
        "sellableCount": {
          "description": "The number of units available for selling. This is the house count excluding the out of order and the already sold units",
          "format": "int32",
          "type": "integer"
        },
        "soldCount": {
          "description": "The number of sold units including units picked up from blocks",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "allowedOverbookingCount",
        "block",
        "houseCount",
        "maintenance",
        "occupancy",
        "physicalCount",
        "sellableCount",
        "soldCount"
      ],
      "type": "object"
    },
    "PropertyValueModel": {
      "properties": {
        "balance": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "balance",
        "property",
        "totalGrossAmount"
      ],
      "type": "object"
    },
    "RateRestrictionsModel": {
      "properties": {
        "closed": {
          "description": "Whether the rate can be booked for a stay-through reservation",
          "type": "boolean"
        },
        "closedOnArrival": {
          "description": "Whether the rate can be booked on the reservation's arrival date",
          "type": "boolean"
        },
        "closedOnDeparture": {
          "description": "Whether the rate can be booked on the reservation's departure date",
          "type": "boolean"
        },
        "maxLengthOfStay": {
          "description": "The maximum length of stay in order to book the rate. If not more than this number\r\nof time slices are covered by the stay duration the rate will be offered.",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        },
        "minLengthOfStay": {
          "description": "The minimum length of stay in order to book the rate. If at least this number\r\nof time slices are covered by the stay duration the rate will be offered.",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "closed",
        "closedOnArrival",
        "closedOnDeparture"
      ],
      "type": "object"
    },
    "ReservationAssignedUnitModel": {
      "properties": {
        "timeRanges": {
          "description": "The time ranges for which the unit is assigned to the reservation",
          "items": {
            "$ref": "#/definitions/ReservationAssignedUnitTimeRangeModel"
          },
          "type": "array"
        },
        "unit": {
          "$ref": "#/definitions/EmbeddedUnitModel"
        }
      },
      "required": [
        "timeRanges",
        "unit"
      ],
      "type": "object"
    },
    "ReservationAssignedUnitTimeRangeModel": {
      "properties": {
        "from": {
          "description": "The start date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "The end date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from",
        "to"
      ],
      "type": "object"
    },
    "ReservationCancellationFeeModel": {
      "properties": {
        "code": {
          "description": "The code of the cancellation policy applied",
          "type": "string"
        },
        "description": {
          "description": "The description of the cancellation policy applied",
          "type": "string"
        },
        "dueDateTime": {
          "description": "The date and time the cancellation fee will be due. After that time this fee will\r\nbe charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "name": {
          "description": "The name of the cancellation policy applied",
          "type": "string"
        }
      },
      "required": [
        "code",
        "description",
        "dueDateTime",
        "fee",
        "name"
      ],
      "type": "object"
    },
    "ReservationCreatedModel": {
      "properties": {
        "id": {
          "description": "Id of the reservation",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ReservationItemModel": {
      "properties": {
        "actions": {
          "description": "The list of actions for this reservation",
          "items": {
            "$ref": "#/definitions/ActionModel[ReservationAction,NotAllowedReservationActionReason]"
          },
          "type": "array"
        },
        "additionalGuests": {
          "description": "Additional guests of the reservation.",
          "items": {
            "$ref": "#/definitions/GuestModel"
          },
          "type": "array"
        },
        "adults": {
          "description": "Number of adults",
          "format": "int32",
          "type": "integer"
        },
        "allFoliosHaveInvoice": {
          "description": "Whether all folios of a reservation have an invoice",
          "type": "boolean"
        },
        "arrival": {
          "description": "Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "assignedUnits": {
          "description": "The list of units assigned to this reservation",
          "items": {
            "$ref": "#/definitions/ReservationAssignedUnitModel"
          },
          "type": "array"
        },
        "balance": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "blockId": {
          "description": "Block id",
          "type": "string"
        },
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookingId": {
          "description": "Booking id",
          "type": "string"
        },
        "cancellationFee": {
          "$ref": "#/definitions/ReservationCancellationFeeModel"
        },
        "cancellationTime": {
          "description": "Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "channelCode": {
          "description": "Channel code",
          "enum": [
            "Direct",
            "BookingCom",
            "Ibe",
            "ChannelManager",
            "Expedia",
            "Homelike"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ChannelCode"
          }
        },
        "checkInTime": {
          "description": "Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "checkOutTime": {
          "description": "Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "childrenAges": {
          "description": "The ages of the children",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "commission": {
          "$ref": "#/definitions/CommissionModel"
        },
        "company": {
          "$ref": "#/definitions/EmbeddedCompanyModel"
        },
        "corporateCode": {
          "description": "Corporate code provided during creation. Used to find offers during amend.",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "departure": {
          "description": "Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "externalCode": {
          "description": "Code in external system",
          "type": "string"
        },
        "guaranteeType": {
          "description": "The strongest guarantee for the rate plans booked in this reservation",
          "enum": [
            "PM6Hold",
            "CreditCard",
            "Prepayment",
            "Company",
            "Ota"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "GuaranteeType"
          }
        },
        "guestComment": {
          "description": "Additional information and comment by the guest",
          "type": "string"
        },
        "hasCityTax": {
          "description": "Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured",
          "type": "boolean"
        },
        "id": {
          "description": "Reservation id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "noShowFee": {
          "$ref": "#/definitions/ReservationNoShowFeeModel"
        },
        "noShowTime": {
          "description": "Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "paymentAccount": {
          "$ref": "#/definitions/PaymentAccountModel"
        },
        "primaryGuest": {
          "$ref": "#/definitions/GuestModel"
        },
        "promoCode": {
          "description": "The promo code associated with a certain special offer used to create the reservation",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "services": {
          "description": "The list of additional services (extras, add-ons) reserved for the stay",
          "items": {
            "$ref": "#/definitions/ReservationServiceItemModel"
          },
          "type": "array"
        },
        "source": {
          "description": "Source of the reservation (e.g Hotels.com, Orbitz, etc.)",
          "type": "string"
        },
        "status": {
          "description": "Status of the reservation",
          "enum": [
            "Confirmed",
            "InHouse",
            "CheckedOut",
            "Canceled",
            "NoShow"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ReservationStatus"
          }
        },
        "timeSlices": {
          "description": "The list of time slices with the reserved units / unit groups for the stay",
          "items": {
            "$ref": "#/definitions/TimeSliceModel"
          },
          "type": "array"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "travelPurpose": {
          "description": "The purpose of the trip, leisure or business",
          "enum": [
            "Business",
            "Leisure"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "TravelPurpose"
          }
        },
        "unit": {
          "$ref": "#/definitions/EmbeddedUnitModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        },
        "validationMessages": {
          "description": "Validation rules are applied to reservations during their lifetime.\r\nFor example a reservation that was created while the house or unit group is already fully booked.\r\nWhenever a rule was or is currently violated, a validation message will be added to this list.\r\nThey can be deleted whenever the hotel staff worked them off.",
          "items": {
            "$ref": "#/definitions/ReservationValidationMessageModel"
          },
          "type": "array"
        }
      },
      "required": [
        "adults",
        "arrival",
        "balance",
        "bookingId",
        "cancellationFee",
        "channelCode",
        "created",
        "departure",
        "guaranteeType",
        "hasCityTax",
        "id",
        "modified",
        "noShowFee",
        "primaryGuest",
        "property",
        "ratePlan",
        "status",
        "totalGrossAmount",
        "unitGroup"
      ],
      "type": "object"
    },
    "ReservationListModel": {
      "example": "{\n  \"reservations\": [\n    {\n      \"id\": \"XPGMSXGF-1\",\n      \"bookingId\": \"XPGMSXGF\",\n      \"status\": \"Confirmed\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_DBL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\"\n      },\n      \"unit\": {\n        \"id\": \"MUC-MTA\",\n        \"name\": \"A.101\",\n        \"description\": \"Standard room.\"\n      },\n      \"totalGrossAmount\": {\n        \"amount\": 110.0,\n        \"currency\": \"EUR\"\n      },\n      \"arrival\": \"2020-06-20T17:00:00+02:00\",\n      \"departure\": \"2020-06-20T17:00:00+02:00\",\n      \"created\": \"2020-06-18T17:08:08.9853672+02:00\",\n      \"modified\": \"2020-06-18T17:08:08.9853672+02:00\",\n      \"adults\": 1,\n      \"channelCode\": \"Direct\",\n      \"primaryGuest\": {\n        \"title\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\": \"Jon\",\n        \"middleInitial\": \"D\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.d@doe.com\",\n        \"phone\": \"+4989123343\",\n        \"address\": {\n          \"addressLine1\": \"My Street 3\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"paymentAccount\": {\n        \"accountNumber\": \"1111\",\n        \"accountHolder\": \"John Doe\",\n        \"expiryMonth\": \"8\",\n        \"expiryYear\": \"2018\",\n        \"paymentMethod\": \"visa\",\n        \"payerEmail\": \"s.hopper@test.com\",\n        \"isVirtual\": false,\n        \"isActive\": false\n      },\n      \"guaranteeType\": \"CreditCard\",\n      \"cancellationFee\": {\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"100% of the accommodation.\",\n        \"dueDateTime\": \"2020-06-18T17:08:08.9853672+02:00\",\n        \"fee\": {\n          \"amount\": 110.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"noShowFee\": {\n        \"code\": \"NOSHOW\",\n        \"fee\": {\n          \"amount\": 110.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-20T17:00:00+02:00\",\n          \"to\": \"2020-06-21T17:00:00+02:00\",\n          \"serviceDate\": \"2020-06-20\",\n          \"ratePlan\": {\n            \"id\": \"MUC-NONREF_DBL\",\n            \"code\": \"NONREF\",\n            \"name\": \"Non Refundable\",\n            \"description\": \"Non Refundable\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-SGL\",\n            \"code\": \"SGL\",\n            \"name\": \"Standard\",\n            \"description\": \"Standard\"\n          },\n          \"unit\": {\n            \"id\": \"MUC-MTA\",\n            \"name\": \"A.101\",\n            \"description\": \"Standard room.\"\n          },\n          \"baseAmount\": {\n            \"grossAmount\": 65.00,\n            \"netAmount\": 60.75,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 86.0,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-BRKF\",\n                \"code\": \"BRKF\",\n                \"name\": \"Breakfast\",\n                \"description\": \"Best breakfast on this side of the Weißwurstäquator.\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 0,\n              \"amount\": {\n                \"grossAmount\": 9.99,\n                \"netAmount\": 8.39,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false\n            }\n          ]\n        }\n      ],\n      \"company\": {\n        \"id\": \"MUC-UMBRELLA\",\n        \"code\": \"UMBRELLA\",\n        \"name\": \"Umbrella Corp.\",\n        \"canCheckOutOnAr\": false\n      },\n      \"corporateCode\": \"UMBRELLA-DBL\",\n      \"allFoliosHaveInvoice\": false,\n      \"hasCityTax\": false\n    },\n    {\n      \"id\": \"APFDRQSX-1\",\n      \"bookingId\": \"APFDRQSX\",\n      \"status\": \"CheckedOut\",\n      \"property\": {\n        \"id\": \"MUC\",\n        \"code\": \"MUC\",\n        \"name\": \"Demo Hotel Munich\",\n        \"description\": \"This is the demo hotel Munich\"\n      },\n      \"ratePlan\": {\n        \"id\": \"MUC-FLEX-DBL\",\n        \"code\": \"FLEX\",\n        \"name\": \"Flexible\",\n        \"description\": \"Flexible\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-DBL\",\n        \"code\": \"DBL\",\n        \"name\": \"Double\",\n        \"description\": \"Double\"\n      },\n      \"unit\": {\n        \"id\": \"MUC-JQI\",\n        \"name\": \"A.201\",\n        \"description\": \"Standard room.\"\n      },\n      \"totalGrossAmount\": {\n        \"amount\": 120.0,\n        \"currency\": \"EUR\"\n      },\n      \"arrival\": \"2020-06-23T17:08:08.9853672+02:00\",\n      \"departure\": \"2020-06-25T17:08:08.9853672+02:00\",\n      \"created\": \"2020-06-18T17:08:08.9853672+02:00\",\n      \"modified\": \"2020-06-18T17:08:08.9853672+02:00\",\n      \"adults\": 1,\n      \"childrenAges\": [\n        6\n      ],\n      \"channelCode\": \"Direct\",\n      \"primaryGuest\": {\n        \"title\": \"Ms\",\n        \"gender\": \"Female\",\n        \"firstName\": \"Jane\",\n        \"middleInitial\": \"D\",\n        \"lastName\": \"Doe\",\n        \"email\": \"jane.d@doe.com\",\n        \"phone\": \"+4989123789\",\n        \"address\": {\n          \"addressLine1\": \"My Street 5\",\n          \"postalCode\": \"12453\",\n          \"city\": \"MyCity\",\n          \"countryCode\": \"GB\"\n        }\n      },\n      \"guaranteeType\": \"CreditCard\",\n      \"cancellationFee\": {\n        \"code\": \"FLEX\",\n        \"name\": \"Flexible\",\n        \"description\": \"Free cancellation.\",\n        \"dueDateTime\": \"2020-06-20T17:00:00+02:00\",\n        \"fee\": {\n          \"amount\": 120.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"noShowFee\": {\n        \"code\": \"NOSHOW\",\n        \"fee\": {\n          \"amount\": 120.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-23T17:08:08.9853672+02:00\",\n          \"to\": \"2020-06-24T17:08:08.9853672+02:00\",\n          \"serviceDate\": \"2020-06-23\",\n          \"ratePlan\": {\n            \"id\": \"MUC-FLEX-DBL\",\n            \"code\": \"FLEX\",\n            \"name\": \"Flexible\",\n            \"description\": \"Flexible\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-DBL\",\n            \"code\": \"DBL\",\n            \"name\": \"Double\",\n            \"description\": \"Double\"\n          },\n          \"unit\": {\n            \"id\": \"MUC-JQI\",\n            \"name\": \"A.201\",\n            \"description\": \"Standard room.\"\n          },\n          \"baseAmount\": {\n            \"grossAmount\": 65.00,\n            \"netAmount\": 60.75,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 86.0,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-BRKF\",\n                \"code\": \"BRKF\",\n                \"name\": \"Breakfast\",\n                \"description\": \"Best breakfast on this side of the Weißwurstäquator.\"\n              },\n              \"serviceDate\": \"2020-06-23\",\n              \"count\": 0,\n              \"amount\": {\n                \"grossAmount\": 9.99,\n                \"netAmount\": 8.39,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false\n            }\n          ]\n        },\n        {\n          \"from\": \"2020-06-24T17:08:08.9853672+02:00\",\n          \"to\": \"2020-06-25T17:08:08.9853672+02:00\",\n          \"serviceDate\": \"2020-06-24\",\n          \"ratePlan\": {\n            \"id\": \"MUC-FLEX-DBL\",\n            \"code\": \"FLEX\",\n            \"name\": \"Flexible\",\n            \"description\": \"Flexible\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-DBL\",\n            \"code\": \"DBL\",\n            \"name\": \"Double\",\n            \"description\": \"Double\"\n          },\n          \"unit\": {\n            \"id\": \"MUC-JQI\",\n            \"name\": \"A.201\",\n            \"description\": \"Standard room.\"\n          },\n          \"baseAmount\": {\n            \"grossAmount\": 65.00,\n            \"netAmount\": 60.75,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 86.0,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-BRKF\",\n                \"code\": \"BRKF\",\n                \"name\": \"Breakfast\",\n                \"description\": \"Best breakfast on this side of the Weißwurstäquator.\"\n              },\n              \"serviceDate\": \"2020-06-24\",\n              \"count\": 0,\n              \"amount\": {\n                \"grossAmount\": 9.99,\n                \"netAmount\": 8.39,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false\n            }\n          ]\n        }\n      ],\n      \"validationMessages\": [\n        {\n          \"category\": \"OfferNotAvailable\",\n          \"code\": \"RatePlanRestrictionsViolated\",\n          \"message\": \"The restrictions of the rate plan are not considered\"\n        }\n      ],\n      \"allFoliosHaveInvoice\": false,\n      \"hasCityTax\": false,\n      \"commission\": {\n        \"commissionAmount\": {\n          \"amount\": 10.0,\n          \"currency\": \"EUR\"\n        },\n        \"beforeCommissionAmount\": {\n          \"amount\": 100.0,\n          \"currency\": \"EUR\"\n        }\n      }\n    }\n  ],\n  \"count\": 0\n}",
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "reservations": {
          "description": "List of reservations",
          "items": {
            "$ref": "#/definitions/ReservationItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "reservations"
      ],
      "type": "object"
    },
    "ReservationModel": {
      "example": "{\n  \"id\": \"XPGMSXGF-1\",\n  \"bookingId\": \"XPGMSXGF\",\n  \"status\": \"Confirmed\",\n  \"unit\": {\n    \"id\": \"MUC-MTA\",\n    \"name\": \"A.101\",\n    \"description\": \"Standard room.\"\n  },\n  \"property\": {\n    \"id\": \"MUC\",\n    \"code\": \"MUC\",\n    \"name\": \"Demo Hotel Munich\",\n    \"description\": \"This is the demo hotel Munich\"\n  },\n  \"ratePlan\": {\n    \"id\": \"MUC-NONREF_DBL\",\n    \"code\": \"NONREF\",\n    \"name\": \"Non Refundable\",\n    \"description\": \"Non Refundable\",\n    \"isSubjectToCityTax\": false\n  },\n  \"unitGroup\": {\n    \"id\": \"MUC-SGL\",\n    \"code\": \"SGL\",\n    \"name\": \"Standard\",\n    \"description\": \"Standard\"\n  },\n  \"totalGrossAmount\": {\n    \"amount\": 222.0,\n    \"currency\": \"EUR\"\n  },\n  \"arrival\": \"2020-06-20T17:00:00+02:00\",\n  \"departure\": \"2020-06-22T11:00:00+02:00\",\n  \"created\": \"2020-06-18T17:08:08.9853672+02:00\",\n  \"modified\": \"2020-06-18T17:08:08.9853672+02:00\",\n  \"adults\": 1,\n  \"childrenAges\": [\n    6\n  ],\n  \"externalCode\": \"812864414|369\",\n  \"channelCode\": \"BookingCom\",\n  \"primaryGuest\": {\n    \"title\": \"Mr\",\n    \"gender\": \"Male\",\n    \"firstName\": \"Jon\",\n    \"middleInitial\": \"D\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.d@doe.com\",\n    \"phone\": \"+4989123343\",\n    \"address\": {\n      \"addressLine1\": \"My Street 5\",\n      \"postalCode\": \"12453\",\n      \"city\": \"MyCity\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"paymentAccount\": {\n    \"accountNumber\": \"1111\",\n    \"accountHolder\": \"John Doe\",\n    \"expiryMonth\": \"8\",\n    \"expiryYear\": \"2018\",\n    \"paymentMethod\": \"visa\",\n    \"payerEmail\": \"s.hopper@test.com\",\n    \"isVirtual\": false,\n    \"isActive\": false\n  },\n  \"timeSlices\": [\n    {\n      \"from\": \"2020-06-20T17:00:00+02:00\",\n      \"to\": \"2020-06-21T11:00:00+02:00\",\n      \"serviceDate\": \"2020-06-20\",\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_DBL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\"\n      },\n      \"unit\": {\n        \"id\": \"MUC-MTA\",\n        \"name\": \"A.101\",\n        \"description\": \"Standard room.\"\n      },\n      \"baseAmount\": {\n        \"grossAmount\": 65.00,\n        \"netAmount\": 60.75,\n        \"vatType\": \"Reduced\",\n        \"currency\": \"EUR\"\n      },\n      \"totalGrossAmount\": {\n        \"amount\": 86.0,\n        \"currency\": \"EUR\"\n      },\n      \"includedServices\": [\n        {\n          \"service\": {\n            \"id\": \"MUC-BRKF\",\n            \"code\": \"BRKF\",\n            \"name\": \"Breakfast\",\n            \"description\": \"Best breakfast on this side of the Weißwurstäquator.\"\n          },\n          \"serviceDate\": \"2020-06-21\",\n          \"count\": 0,\n          \"amount\": {\n            \"grossAmount\": 9.99,\n            \"netAmount\": 8.39,\n            \"vatType\": \"Normal\",\n            \"currency\": \"EUR\"\n          },\n          \"bookedAsExtra\": false\n        }\n      ]\n    },\n    {\n      \"from\": \"2020-06-21T17:00:00+02:00\",\n      \"to\": \"2020-06-22T11:00:00+02:00\",\n      \"serviceDate\": \"2020-06-21\",\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_DBL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\"\n      },\n      \"unit\": {\n        \"id\": \"MUC-MTA\",\n        \"name\": \"A.101\",\n        \"description\": \"Standard room.\"\n      },\n      \"baseAmount\": {\n        \"grossAmount\": 91.01,\n        \"netAmount\": 85.06,\n        \"vatType\": \"Reduced\",\n        \"currency\": \"EUR\"\n      },\n      \"totalGrossAmount\": {\n        \"amount\": 101.0,\n        \"currency\": \"EUR\"\n      },\n      \"includedServices\": [\n        {\n          \"service\": {\n            \"id\": \"MUC-BRKF\",\n            \"code\": \"BRKF\",\n            \"name\": \"Breakfast\",\n            \"description\": \"Best breakfast on this side of the Weißwurstäquator.\"\n          },\n          \"serviceDate\": \"2020-06-22\",\n          \"count\": 0,\n          \"amount\": {\n            \"grossAmount\": 9.99,\n            \"netAmount\": 8.39,\n            \"vatType\": \"Normal\",\n            \"currency\": \"EUR\"\n          },\n          \"bookedAsExtra\": false\n        }\n      ]\n    }\n  ],\n  \"guaranteeType\": \"CreditCard\",\n  \"cancellationFee\": {\n    \"code\": \"FLEX\",\n    \"name\": \"Flexible\",\n    \"description\": \"Free cancellation.\",\n    \"dueDateTime\": \"2020-06-20T17:00:00+02:00\",\n    \"fee\": {\n      \"amount\": 202.0,\n      \"currency\": \"EUR\"\n    }\n  },\n  \"noShowFee\": {\n    \"code\": \"NOSHOW\",\n    \"fee\": {\n      \"amount\": 202.0,\n      \"currency\": \"EUR\"\n    }\n  },\n  \"validationMessages\": [\n    {\n      \"category\": \"OfferNotAvailable\",\n      \"code\": \"RatePlanRestrictionsViolated\",\n      \"message\": \"The restrictions of the rate plan are not considered\"\n    }\n  ],\n  \"company\": {\n    \"id\": \"MUC-UMBRELLA\",\n    \"code\": \"UMBRELLA\",\n    \"name\": \"Umbrella Corp.\",\n    \"canCheckOutOnAr\": false\n  },\n  \"corporateCode\": \"UMBRELLA_DBL\",\n  \"allFoliosHaveInvoice\": false,\n  \"hasCityTax\": true,\n  \"commission\": {\n    \"commissionAmount\": {\n      \"amount\": 10.0,\n      \"currency\": \"EUR\"\n    },\n    \"beforeCommissionAmount\": {\n      \"amount\": 100.0,\n      \"currency\": \"EUR\"\n    }\n  }\n}",
      "properties": {
        "actions": {
          "description": "The list of actions for this reservation",
          "items": {
            "$ref": "#/definitions/ActionModel[ReservationAction,NotAllowedReservationActionReason]"
          },
          "type": "array"
        },
        "additionalGuests": {
          "description": "Additional guests of the reservation.",
          "items": {
            "$ref": "#/definitions/GuestModel"
          },
          "type": "array"
        },
        "adults": {
          "description": "Number of adults",
          "format": "int32",
          "type": "integer"
        },
        "allFoliosHaveInvoice": {
          "description": "Whether all folios of a reservation have an invoice",
          "type": "boolean"
        },
        "arrival": {
          "description": "Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "blockId": {
          "description": "Block id",
          "type": "string"
        },
        "booker": {
          "$ref": "#/definitions/BookerModel"
        },
        "bookingId": {
          "description": "Booking id",
          "type": "string"
        },
        "cancellationFee": {
          "$ref": "#/definitions/ReservationCancellationFeeModel"
        },
        "cancellationTime": {
          "description": "Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "channelCode": {
          "description": "Channel code",
          "enum": [
            "Direct",
            "BookingCom",
            "Ibe",
            "ChannelManager",
            "Expedia",
            "Homelike"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ChannelCode"
          }
        },
        "checkInTime": {
          "description": "Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "checkOutTime": {
          "description": "Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "childrenAges": {
          "description": "The ages of the children",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "comment": {
          "description": "Additional information and comments",
          "type": "string"
        },
        "commission": {
          "$ref": "#/definitions/CommissionModel"
        },
        "company": {
          "$ref": "#/definitions/EmbeddedCompanyModel"
        },
        "corporateCode": {
          "description": "Corporate code provided during creation. Used to find offers during amend.",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "departure": {
          "description": "Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "externalCode": {
          "description": "Code in external system",
          "type": "string"
        },
        "guaranteeType": {
          "description": "The strongest guarantee for the rate plans booked in this reservation",
          "enum": [
            "PM6Hold",
            "CreditCard",
            "Prepayment",
            "Company",
            "Ota"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "GuaranteeType"
          }
        },
        "guestComment": {
          "description": "Additional information and comment by the guest",
          "type": "string"
        },
        "hasCityTax": {
          "description": "Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured",
          "type": "boolean"
        },
        "id": {
          "description": "Reservation id",
          "type": "string"
        },
        "modified": {
          "description": "Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "noShowFee": {
          "$ref": "#/definitions/ReservationNoShowFeeModel"
        },
        "noShowTime": {
          "description": "Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "payableAmount": {
          "$ref": "#/definitions/PayableAmountModel"
        },
        "paymentAccount": {
          "$ref": "#/definitions/PaymentAccountModel"
        },
        "primaryGuest": {
          "$ref": "#/definitions/GuestModel"
        },
        "promoCode": {
          "description": "The promo code associated with a certain special offer used to create the reservation",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "services": {
          "description": "The list of additional services (extras, add-ons) reserved for the stay",
          "items": {
            "$ref": "#/definitions/ReservationServiceItemModel"
          },
          "type": "array"
        },
        "source": {
          "description": "Source of the reservation (e.g Hotels.com, Orbitz, etc.)",
          "type": "string"
        },
        "status": {
          "description": "Status of the reservation",
          "enum": [
            "Confirmed",
            "InHouse",
            "CheckedOut",
            "Canceled",
            "NoShow"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ReservationStatus"
          }
        },
        "taxDetails": {
          "description": "Tax breakdown, displaying net and tax amount for each VAT type",
          "items": {
            "$ref": "#/definitions/TaxDetailModel"
          },
          "type": "array"
        },
        "timeSlices": {
          "description": "The list of time slices with the reserved units / unit groups for the stay",
          "items": {
            "$ref": "#/definitions/TimeSliceModel"
          },
          "type": "array"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "travelPurpose": {
          "description": "The purpose of the trip, leisure or business",
          "enum": [
            "Business",
            "Leisure"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "TravelPurpose"
          }
        },
        "unit": {
          "$ref": "#/definitions/EmbeddedUnitModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        },
        "validationMessages": {
          "description": "Validation rules are applied to reservations during their lifetime.\r\nFor example a reservation that was created while the house or unit group is already fully booked.\r\nWhenever a rule was or is currently violated, a validation message will be added to this list.\r\nThey can be deleted whenever the hotel staff worked them off.",
          "items": {
            "$ref": "#/definitions/ReservationValidationMessageModel"
          },
          "type": "array"
        }
      },
      "required": [
        "adults",
        "arrival",
        "balance",
        "bookingId",
        "cancellationFee",
        "channelCode",
        "created",
        "departure",
        "guaranteeType",
        "hasCityTax",
        "id",
        "modified",
        "noShowFee",
        "payableAmount",
        "primaryGuest",
        "property",
        "ratePlan",
        "status",
        "taxDetails",
        "totalGrossAmount",
        "unitGroup"
      ],
      "type": "object"
    },
    "ReservationNoShowFeeModel": {
      "properties": {
        "code": {
          "description": "The code of the no-show policy applied",
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/MonetaryValueModel"
        }
      },
      "required": [
        "code",
        "fee"
      ],
      "type": "object"
    },
    "ReservationServiceItemModel": {
      "properties": {
        "dates": {
          "description": "The dates the service will be delivered with its price",
          "items": {
            "$ref": "#/definitions/ServiceDateItemModel"
          },
          "type": "array"
        },
        "service": {
          "$ref": "#/definitions/ServiceModel"
        },
        "totalAmount": {
          "$ref": "#/definitions/AmountModel"
        }
      },
      "required": [
        "dates",
        "service",
        "totalAmount"
      ],
      "type": "object"
    },
    "ReservationServiceListModel": {
      "example": "{\n  \"services\": [\n    {\n      \"service\": {\n        \"id\": \"MUC-YOGA\",\n        \"code\": \"YOGA\",\n        \"name\": \"Sun Salutation\",\n        \"description\": \"Start the day with a private Yoga session with one of our certified trainers.\",\n        \"pricingUnit\": \"Person\",\n        \"defaultGrossPrice\": {\n          \"amount\": 35.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"totalAmount\": {\n        \"grossAmount\": 30.0,\n        \"netAmount\": 25.20,\n        \"vatType\": \"Normal\",\n        \"currency\": \"EUR\"\n      },\n      \"dates\": [\n        {\n          \"serviceDate\": \"2020-06-18\",\n          \"count\": 1,\n          \"amount\": {\n            \"grossAmount\": 30.0,\n            \"netAmount\": 25.20,\n            \"vatType\": \"Normal\",\n            \"currency\": \"EUR\"\n          },\n          \"isMandatory\": false\n        }\n      ]\n    }\n  ],\n  \"count\": 1\n}",
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "services": {
          "description": "The list of services booked for the reservation",
          "items": {
            "$ref": "#/definitions/ReservationServiceItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "services"
      ],
      "type": "object"
    },
    "ReservationServiceModel": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/AmountModel"
        },
        "bookedAsExtra": {
          "description": "Whether this service is already booked as extra",
          "type": "boolean"
        },
        "count": {
          "description": "The count of booked services",
          "format": "int32",
          "type": "integer"
        },
        "service": {
          "$ref": "#/definitions/EmbeddedServiceModel"
        },
        "serviceDate": {
          "description": "The date this service is delivered",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "bookedAsExtra",
        "count",
        "service",
        "serviceDate"
      ],
      "type": "object"
    },
    "ReservationStayOfferModel": {
      "properties": {
        "arrival": {
          "description": "The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "availableUnits": {
          "description": "The number of available units for that offer",
          "format": "int32",
          "type": "integer"
        },
        "cancellationFee": {
          "$ref": "#/definitions/OfferCancellationFeeModel"
        },
        "cityTax": {
          "$ref": "#/definitions/AmountModel"
        },
        "companyId": {
          "description": "ID of the company the offer is created for",
          "type": "string"
        },
        "corporateCode": {
          "description": "The corporate rate code the offer is created for",
          "type": "string"
        },
        "departure": {
          "description": "The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "isCorporate": {
          "description": "Whether the offer is for a corporate rate plan",
          "type": "boolean"
        },
        "minGuaranteeType": {
          "description": "The minimum guarantee type for this offer",
          "enum": [
            "PM6Hold",
            "CreditCard",
            "Prepayment",
            "Company"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "MinGuaranteeType"
          }
        },
        "noShowFee": {
          "$ref": "#/definitions/OfferNoShowFeeModel"
        },
        "services": {
          "description": "The breakdown for extra services reserved for this offer",
          "items": {
            "$ref": "#/definitions/ServiceOfferModel"
          },
          "type": "array"
        },
        "taxDetails": {
          "description": "Tax breakdown, displaying net and tax amount for each VAT type",
          "items": {
            "$ref": "#/definitions/TaxDetailModel"
          },
          "type": "array"
        },
        "timeSlices": {
          "description": "The breakdown for each time slice for this offer",
          "items": {
            "$ref": "#/definitions/ReservationStayOfferTimeSliceModel"
          },
          "type": "array"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "validationMessages": {
          "description": "Validation rules that were applied to the offer and show the reason why the offer is not bookable",
          "items": {
            "$ref": "#/definitions/OfferValidationMessageModel"
          },
          "type": "array"
        }
      },
      "required": [
        "arrival",
        "availableUnits",
        "cancellationFee",
        "departure",
        "isCorporate",
        "minGuaranteeType",
        "noShowFee",
        "taxDetails",
        "timeSlices",
        "totalGrossAmount"
      ],
      "type": "object"
    },
    "ReservationStayOfferServiceModel": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/AmountModel"
        },
        "bookedAsExtra": {
          "description": "Whether this service is already booked as extra",
          "type": "boolean"
        },
        "count": {
          "description": "The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.",
          "format": "int32",
          "type": "integer"
        },
        "pricingMode": {
          "description": "Whether the service price is included in or added to the base rate",
          "enum": [
            "Included",
            "Additional"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "PricingMode"
          }
        },
        "service": {
          "$ref": "#/definitions/EmbeddedServiceModel"
        },
        "serviceDate": {
          "description": "The date this service is delivered",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "bookedAsExtra",
        "count",
        "pricingMode",
        "service",
        "serviceDate"
      ],
      "type": "object"
    },
    "ReservationStayOfferTimeSliceModel": {
      "properties": {
        "baseAmount": {
          "$ref": "#/definitions/AmountModel"
        },
        "from": {
          "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "includedServices": {
          "description": "The breakdown for services included in the offer",
          "items": {
            "$ref": "#/definitions/ReservationStayOfferServiceModel"
          },
          "type": "array"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "to": {
          "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/OfferUnitGroupModel"
        }
      },
      "required": [
        "baseAmount",
        "from",
        "ratePlan",
        "to",
        "totalGrossAmount",
        "unitGroup"
      ],
      "type": "object"
    },
    "ReservationStayOffersModel": {
      "example": "{\n  \"property\": {\n    \"id\": \"MUC\",\n    \"code\": \"MUC\",\n    \"name\": \"Demo Hotel Munich\",\n    \"description\": \"This is the demo hotel Munich\"\n  },\n  \"arrivalRequested\": \"2020-06-20T17:00:00+02:00\",\n  \"departureRequested\": \"2020-06-22T11:00:00+02:00\",\n  \"offers\": [\n    {\n      \"arrival\": \"2020-06-20T17:00:00+02:00\",\n      \"departure\": \"2020-06-22T11:00:00+02:00\",\n      \"minGuaranteeType\": \"PM6Hold\",\n      \"availableUnits\": 4,\n      \"totalGrossAmount\": {\n        \"amount\": 214.0,\n        \"currency\": \"EUR\"\n      },\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-20T17:00:00+02:00\",\n          \"to\": \"2020-06-21T11:00:00+02:00\",\n          \"ratePlan\": {\n            \"id\": \"MUC-FLEX-DBL\",\n            \"code\": \"FLEX\",\n            \"name\": \"Flexible\",\n            \"description\": \"Flexible\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-DBL\",\n            \"code\": \"DBL\",\n            \"name\": \"Double\",\n            \"description\": \"Double\",\n            \"maxPersons\": 2,\n            \"rank\": 1\n          },\n          \"baseAmount\": {\n            \"grossAmount\": 40.00,\n            \"netAmount\": 37.38,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 50.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false,\n              \"pricingMode\": \"Included\"\n            }\n          ]\n        },\n        {\n          \"from\": \"2020-06-21T11:00:00+02:00\",\n          \"to\": \"2020-06-22T11:00:00+02:00\",\n          \"ratePlan\": {\n            \"id\": \"MUC-NONREF_DBL\",\n            \"code\": \"NONREF\",\n            \"name\": \"Non Refundable\",\n            \"description\": \"Non Refundable\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-SGL\",\n            \"code\": \"SGL\",\n            \"name\": \"Standard\",\n            \"description\": \"Standard\",\n            \"maxPersons\": 1,\n            \"rank\": 2\n          },\n          \"baseAmount\": {\n            \"grossAmount\": 59.00,\n            \"netAmount\": 55.14,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 69.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false,\n              \"pricingMode\": \"Included\"\n            },\n            {\n              \"service\": {\n                \"id\": \"MUC-CLEANING\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 25.00,\n                \"netAmount\": 21.00,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false,\n              \"pricingMode\": \"Additional\"\n            }\n          ]\n        }\n      ],\n      \"services\": [\n        {\n          \"service\": {\n            \"id\": \"MUC-BRKF\",\n            \"code\": \"BRKF\",\n            \"name\": \"Breakfast\",\n            \"description\": \"Best breakfast on this side of the Weißwurstäquator.\",\n            \"pricingUnit\": \"Person\",\n            \"defaultGrossPrice\": {\n              \"amount\": 10.0,\n              \"currency\": \"EUR\"\n            }\n          },\n          \"count\": 1,\n          \"totalAmount\": {\n            \"grossAmount\": 11.90,\n            \"netAmount\": 10.0,\n            \"vatType\": \"Normal\",\n            \"currency\": \"EUR\"\n          },\n          \"dates\": [\n            {\n              \"serviceDate\": \"2020-06-21\",\n              \"amount\": {\n                \"grossAmount\": 11.90,\n                \"netAmount\": 10.0,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"isDefaultDate\": false,\n              \"isMandatory\": false\n            }\n          ]\n        }\n      ],\n      \"taxDetails\": [\n        {\n          \"vatType\": \"Normal\",\n          \"vatPercent\": 14.0,\n          \"net\": {\n            \"amount\": 200.0,\n            \"currency\": \"EUR\"\n          },\n          \"tax\": {\n            \"amount\": 14.0,\n            \"currency\": \"EUR\"\n          }\n        }\n      ],\n      \"isCorporate\": false\n    },\n    {\n      \"arrival\": \"2020-06-20T17:00:00+02:00\",\n      \"departure\": \"2020-06-22T11:00:00+02:00\",\n      \"minGuaranteeType\": \"PM6Hold\",\n      \"availableUnits\": 8,\n      \"totalGrossAmount\": {\n        \"amount\": 214.0,\n        \"currency\": \"EUR\"\n      },\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-20T17:00:00+02:00\",\n          \"to\": \"2020-06-21T11:00:00+02:00\",\n          \"ratePlan\": {\n            \"id\": \"MUC-FLEX-DBL\",\n            \"code\": \"FLEX\",\n            \"name\": \"Flexible\",\n            \"description\": \"Flexible\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-DBL\",\n            \"code\": \"DBL\",\n            \"name\": \"Double\",\n            \"description\": \"Double\",\n            \"maxPersons\": 2,\n            \"rank\": 1\n          },\n          \"baseAmount\": {\n            \"grossAmount\": 90.00,\n            \"netAmount\": 84.11,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 100.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false,\n              \"pricingMode\": \"Included\"\n            }\n          ]\n        },\n        {\n          \"from\": \"2020-06-21T11:00:00+02:00\",\n          \"to\": \"2020-06-22T11:00:00+02:00\",\n          \"ratePlan\": {\n            \"id\": \"MUC-NONREF_DBL\",\n            \"code\": \"NONREF\",\n            \"name\": \"Non Refundable\",\n            \"description\": \"Non Refundable\",\n            \"isSubjectToCityTax\": false\n          },\n          \"unitGroup\": {\n            \"id\": \"MUC-SGL\",\n            \"code\": \"SGL\",\n            \"name\": \"Standard\",\n            \"description\": \"Standard\",\n            \"maxPersons\": 1,\n            \"rank\": 2\n          },\n          \"baseAmount\": {\n            \"grossAmount\": 124.00,\n            \"netAmount\": 115.89,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 134.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false,\n              \"pricingMode\": \"Included\"\n            },\n            {\n              \"service\": {\n                \"id\": \"MUC-CLEANING\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 25.00,\n                \"netAmount\": 21.00,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"bookedAsExtra\": false,\n              \"pricingMode\": \"Additional\"\n            }\n          ]\n        }\n      ],\n      \"taxDetails\": [\n        {\n          \"vatType\": \"Reduced\",\n          \"vatPercent\": 14.0,\n          \"net\": {\n            \"amount\": 100.0,\n            \"currency\": \"EUR\"\n          },\n          \"tax\": {\n            \"amount\": 14.0,\n            \"currency\": \"EUR\"\n          }\n        }\n      ],\n      \"isCorporate\": false\n    }\n  ]\n}",
      "properties": {
        "arrivalRequested": {
          "description": "The requested arrival date and time - <b>DEPRECATED: This field will be removed 27.06.2020.</b><br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "departureRequested": {
          "description": "The requested departure date and time - <b>DEPRECATED: This field will be removed 27.06.2020.</b><br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "offers": {
          "description": "List of offered unit groups with rates",
          "items": {
            "$ref": "#/definitions/ReservationStayOfferModel"
          },
          "type": "array"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        }
      },
      "required": [
        "offers",
        "property"
      ],
      "type": "object"
    },
    "ReservationValidationMessageModel": {
      "properties": {
        "category": {
          "description": "The message category",
          "enum": [
            "OfferNotAvailable",
            "AutoUnitAssignment"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ValidationMessageCategory"
          }
        },
        "code": {
          "description": "The message Code",
          "enum": [
            "UnitGroupFullyBooked",
            "UnitGroupCapacityExceeded",
            "RatePlanRestrictionsViolated",
            "RatePlanSurchargesNotSet",
            "RateRestrictionsViolated",
            "RatePlanChannelNotSet",
            "RatesNotSet",
            "BlockFullyBooked",
            "UnitMoved",
            "IncludedServicesAmountExceededRateAmount",
            "RatePlanCompanyRestrictionsViolated"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "ValidationMessageCode"
          }
        },
        "message": {
          "description": "The message description",
          "type": "string"
        }
      },
      "required": [
        "category",
        "code",
        "message"
      ],
      "type": "object"
    },
    "ReservationsCreatedModel": {
      "example": "{\n  \"reservationIds\": [\n    {\n      \"id\": \"XPGMSXGF-1\"\n    },\n    {\n      \"id\": \"XPGMSXGF-2\"\n    }\n  ]\n}",
      "properties": {
        "reservationIds": {
          "description": "List of ids for newly created reservations",
          "items": {
            "$ref": "#/definitions/ReservationCreatedModel"
          },
          "type": "array"
        }
      },
      "required": [
        "reservationIds"
      ],
      "type": "object"
    },
    "ServiceDateItemModel": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/AmountModel"
        },
        "count": {
          "description": "The count of booked services",
          "format": "int32",
          "type": "integer"
        },
        "isMandatory": {
          "description": "Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.\r\nThey are marked as mandatory and they cannot be removed.",
          "type": "boolean"
        },
        "serviceDate": {
          "description": "The date this service is delivered",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "count",
        "isMandatory",
        "serviceDate"
      ],
      "type": "object"
    },
    "ServiceModel": {
      "properties": {
        "code": {
          "description": "The code for the service",
          "type": "string"
        },
        "defaultGrossPrice": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "description": {
          "description": "The description for the service",
          "type": "string"
        },
        "id": {
          "description": "The service id",
          "type": "string"
        },
        "name": {
          "description": "The name for the service",
          "type": "string"
        },
        "pricingUnit": {
          "description": "Defines the granularity (room, person) for which this item is offered and priced",
          "enum": [
            "Room",
            "Person"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "PricedUnit"
          }
        }
      },
      "required": [
        "code",
        "defaultGrossPrice",
        "description",
        "id",
        "name",
        "pricingUnit"
      ],
      "type": "object"
    },
    "ServiceOfferItemModel": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/AmountModel"
        },
        "isDefaultDate": {
          "description": "Depending on the postNextDay setting of the service it will by default be posted before or after midnight.\r\nBreakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day\r\nare default dates and will have this flag set to true. Those are also the dates the service will be booked for if\r\nyou do not specify dates in the book-service call. Still, you can override this and also book the dates set to IsDefaultDate = false.",
          "type": "boolean"
        },
        "isMandatory": {
          "description": "Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.\r\nThey are marked as mandatory and they cannot be removed.",
          "type": "boolean"
        },
        "serviceDate": {
          "description": "The date this service is delivered",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "isDefaultDate",
        "isMandatory",
        "serviceDate"
      ],
      "type": "object"
    },
    "ServiceOfferModel": {
      "properties": {
        "count": {
          "description": "The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1.",
          "format": "int32",
          "type": "integer"
        },
        "dates": {
          "description": "The dates the service will be delivered with its price",
          "items": {
            "$ref": "#/definitions/ServiceOfferItemModel"
          },
          "type": "array"
        },
        "fees": {
          "description": "The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.ServiceOffer.ServiceOfferModel.TotalAmount when booking the service",
          "items": {
            "$ref": "#/definitions/OfferFeeModel"
          },
          "type": "array"
        },
        "prePaymentAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "service": {
          "$ref": "#/definitions/ServiceModel"
        },
        "totalAmount": {
          "$ref": "#/definitions/AmountModel"
        }
      },
      "required": [
        "count",
        "dates",
        "prePaymentAmount",
        "service",
        "totalAmount"
      ],
      "type": "object"
    },
    "ServiceOffersModel": {
      "example": "{\n  \"services\": [\n    {\n      \"service\": {\n        \"id\": \"MUC-WLAN\",\n        \"code\": \"WLAN\",\n        \"name\": \"High-Speed WLAN\",\n        \"description\": \"Upgrade the complimentary internet access to a high speed connection.\",\n        \"pricingUnit\": \"Room\",\n        \"defaultGrossPrice\": {\n          \"amount\": 5.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"count\": 1,\n      \"totalAmount\": {\n        \"grossAmount\": 20.0,\n        \"netAmount\": 16.80,\n        \"vatType\": \"Normal\",\n        \"currency\": \"EUR\"\n      },\n      \"prePaymentAmount\": {\n        \"amount\": 20.0,\n        \"currency\": \"EUR\"\n      },\n      \"dates\": [\n        {\n          \"serviceDate\": \"2020-06-18\",\n          \"amount\": {\n            \"grossAmount\": 10.0,\n            \"netAmount\": 8.40,\n            \"vatType\": \"Normal\",\n            \"currency\": \"EUR\"\n          },\n          \"isDefaultDate\": false,\n          \"isMandatory\": false\n        },\n        {\n          \"serviceDate\": \"2020-06-19\",\n          \"amount\": {\n            \"grossAmount\": 10.0,\n            \"netAmount\": 8.40,\n            \"vatType\": \"Normal\",\n            \"currency\": \"EUR\"\n          },\n          \"isDefaultDate\": false,\n          \"isMandatory\": false\n        }\n      ]\n    },\n    {\n      \"service\": {\n        \"id\": \"MUC-YOGA\",\n        \"code\": \"YOGA\",\n        \"name\": \"Sun Salutation\",\n        \"description\": \"Start the day with a private Yoga session with one of our certified trainers.\",\n        \"pricingUnit\": \"Person\",\n        \"defaultGrossPrice\": {\n          \"amount\": 35.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"count\": 1,\n      \"totalAmount\": {\n        \"grossAmount\": 30.0,\n        \"netAmount\": 25.20,\n        \"vatType\": \"Normal\",\n        \"currency\": \"EUR\"\n      },\n      \"prePaymentAmount\": {\n        \"amount\": 30.0,\n        \"currency\": \"EUR\"\n      },\n      \"dates\": [\n        {\n          \"serviceDate\": \"2020-06-19\",\n          \"amount\": {\n            \"grossAmount\": 30.0,\n            \"netAmount\": 25.20,\n            \"vatType\": \"Normal\",\n            \"currency\": \"EUR\"\n          },\n          \"isDefaultDate\": false,\n          \"isMandatory\": false\n        }\n      ]\n    }\n  ]\n}",
      "properties": {
        "services": {
          "items": {
            "$ref": "#/definitions/ServiceOfferModel"
          },
          "type": "array"
        }
      },
      "required": [
        "services"
      ],
      "type": "object"
    },
    "SourceListModel": {
      "example": "{\n  \"sources\": [\n    \"Booking.com\",\n    \"Expedia\"\n  ]\n}",
      "properties": {
        "sources": {
          "description": "List of sources.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "sources"
      ],
      "type": "object"
    },
    "StayOffersModel": {
      "example": "{\n  \"property\": {\n    \"id\": \"MUC\",\n    \"code\": \"MUC\",\n    \"name\": \"Demo Hotel Munich\",\n    \"description\": \"This is the demo hotel Munich\"\n  },\n  \"arrivalRequested\": \"2020-06-20T17:00:00+02:00\",\n  \"departureRequested\": \"2020-06-22T11:00:00+02:00\",\n  \"offers\": [\n    {\n      \"arrival\": \"2020-06-20T17:00:00+02:00\",\n      \"departure\": \"2020-06-22T11:00:00+02:00\",\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\",\n        \"maxPersons\": 1,\n        \"rank\": 2\n      },\n      \"minGuaranteeType\": \"PM6Hold\",\n      \"availableUnits\": 4,\n      \"ratePlan\": {\n        \"id\": \"MUC-NONREF_DBL\",\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Non Refundable\",\n        \"isSubjectToCityTax\": false\n      },\n      \"totalGrossAmount\": {\n        \"amount\": 214.0,\n        \"currency\": \"EUR\"\n      },\n      \"cancellationFee\": {\n        \"code\": \"FLEX\",\n        \"name\": \"Flexible\",\n        \"description\": \"Free cancellation.\",\n        \"dueDateTime\": \"2020-06-20T17:00:00+02:00\",\n        \"fee\": {\n          \"amount\": 214.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"noShowFee\": {\n        \"code\": \"NOSHOW\",\n        \"fee\": {\n          \"amount\": 214.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-20T17:00:00+02:00\",\n          \"to\": \"2020-06-21T11:00:00+02:00\",\n          \"availableUnits\": 4,\n          \"baseAmount\": {\n            \"grossAmount\": 59.00,\n            \"netAmount\": 55.14,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 50.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"pricingMode\": \"Included\"\n            }\n          ]\n        },\n        {\n          \"from\": \"2020-06-21T11:00:00+02:00\",\n          \"to\": \"2020-06-22T11:00:00+02:00\",\n          \"availableUnits\": 5,\n          \"baseAmount\": {\n            \"grossAmount\": 59.00,\n            \"netAmount\": 55.14,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 50.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"pricingMode\": \"Included\"\n            },\n            {\n              \"service\": {\n                \"id\": \"MUC-CLEANING\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 25.00,\n                \"netAmount\": 21.00,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"pricingMode\": \"Additional\"\n            }\n          ]\n        }\n      ],\n      \"taxDetails\": [\n        {\n          \"vatType\": \"Reduced\",\n          \"vatPercent\": 14.0,\n          \"net\": {\n            \"amount\": 100.0,\n            \"currency\": \"EUR\"\n          },\n          \"tax\": {\n            \"amount\": 14.0,\n            \"currency\": \"EUR\"\n          }\n        }\n      ],\n      \"isCorporate\": false,\n      \"prePaymentAmount\": {\n        \"amount\": 0.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"arrival\": \"2020-06-20T17:00:00+02:00\",\n      \"departure\": \"2020-06-22T11:00:00+02:00\",\n      \"unitGroup\": {\n        \"id\": \"MUC-SGL\",\n        \"code\": \"SGL\",\n        \"name\": \"Standard\",\n        \"description\": \"Standard\",\n        \"maxPersons\": 1,\n        \"rank\": 2\n      },\n      \"minGuaranteeType\": \"Prepayment\",\n      \"availableUnits\": 4,\n      \"ratePlan\": {\n        \"id\": \"MUC-FLEX-DBL\",\n        \"code\": \"FLEX\",\n        \"name\": \"Flexible\",\n        \"description\": \"Flexible\",\n        \"isSubjectToCityTax\": false\n      },\n      \"totalGrossAmount\": {\n        \"amount\": 321.0,\n        \"currency\": \"EUR\"\n      },\n      \"cancellationFee\": {\n        \"code\": \"NONREF\",\n        \"name\": \"Non Refundable\",\n        \"description\": \"Full stay amount due 24 hours after booking.\",\n        \"dueDateTime\": \"2020-06-19T17:08:08.9853672+02:00\",\n        \"fee\": {\n          \"amount\": 321.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"noShowFee\": {\n        \"code\": \"NOSHOW\",\n        \"fee\": {\n          \"amount\": 107.0,\n          \"currency\": \"EUR\"\n        }\n      },\n      \"timeSlices\": [\n        {\n          \"from\": \"2020-06-20T17:00:00+02:00\",\n          \"to\": \"2020-06-21T11:00:00+02:00\",\n          \"availableUnits\": 4,\n          \"baseAmount\": {\n            \"grossAmount\": 124.00,\n            \"netAmount\": 115.89,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 100.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"pricingMode\": \"Included\"\n            }\n          ]\n        },\n        {\n          \"from\": \"2020-06-21T11:00:00+02:00\",\n          \"to\": \"2020-06-22T11:00:00+02:00\",\n          \"availableUnits\": 5,\n          \"baseAmount\": {\n            \"grossAmount\": 124.00,\n            \"netAmount\": 115.89,\n            \"vatType\": \"Reduced\",\n            \"currency\": \"EUR\"\n          },\n          \"totalGrossAmount\": {\n            \"amount\": 100.00,\n            \"currency\": \"EUR\"\n          },\n          \"includedServices\": [\n            {\n              \"service\": {\n                \"id\": \"MUC-WLAN\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 10.00,\n                \"netAmount\": 8.40,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"pricingMode\": \"Included\"\n            },\n            {\n              \"service\": {\n                \"id\": \"MUC-CLEANING\"\n              },\n              \"serviceDate\": \"2020-06-20\",\n              \"count\": 1,\n              \"amount\": {\n                \"grossAmount\": 25.00,\n                \"netAmount\": 21.00,\n                \"vatType\": \"Normal\",\n                \"currency\": \"EUR\"\n              },\n              \"pricingMode\": \"Additional\"\n            }\n          ]\n        }\n      ],\n      \"taxDetails\": [\n        {\n          \"vatType\": \"Reduced\",\n          \"vatPercent\": 14.0,\n          \"net\": {\n            \"amount\": 100.0,\n            \"currency\": \"EUR\"\n          },\n          \"tax\": {\n            \"amount\": 14.0,\n            \"currency\": \"EUR\"\n          }\n        },\n        {\n          \"vatType\": \"Null\",\n          \"vatPercent\": 0.0,\n          \"net\": {\n            \"amount\": 100.0,\n            \"currency\": \"EUR\"\n          },\n          \"tax\": {\n            \"amount\": 0.0,\n            \"currency\": \"EUR\"\n          }\n        }\n      ],\n      \"isCorporate\": false,\n      \"prePaymentAmount\": {\n        \"amount\": 321.0,\n        \"currency\": \"EUR\"\n      }\n    }\n  ]\n}",
      "properties": {
        "arrivalRequested": {
          "description": "The requested arrival date and time - <b>DEPRECATED: This field will be removed 27.06.2020.</b><br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "departureRequested": {
          "description": "The requested departure date and time - <b>DEPRECATED: This field will be removed 27.06.2020.</b><br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "offers": {
          "description": "List of offered unit groups with rates",
          "items": {
            "$ref": "#/definitions/OfferModel"
          },
          "type": "array"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel"
        }
      },
      "required": [
        "offers",
        "property"
      ],
      "type": "object"
    },
    "TaxDetailModel": {
      "properties": {
        "net": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "tax": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "vatPercent": {
          "format": "double",
          "type": "number"
        },
        "vatType": {
          "enum": [
            "Null",
            "VeryReduced",
            "Reduced",
            "Normal",
            "Without",
            "Special",
            "ReducedCovid19",
            "NormalCovid19"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "VatType"
          }
        }
      },
      "required": [
        "net",
        "tax",
        "vatType"
      ],
      "type": "object"
    },
    "TaxesModel": {
      "properties": {
        "cityTax": {
          "description": "The amount of City Tax including VAT",
          "format": "double",
          "type": "number"
        },
        "tax": {
          "description": "The amount of taxes, which are VAT or Sales Taxes depending on the country of the property",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "cityTax",
        "tax"
      ],
      "type": "object"
    },
    "TimeSliceItemModel": {
      "properties": {
        "from": {
          "description": "Date and time the time slice begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "offers": {
          "description": "List of offers for this time slice",
          "items": {
            "$ref": "#/definitions/TimeSliceOfferItemModel"
          },
          "type": "array"
        },
        "to": {
          "description": "Date and time the time slice ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from",
        "to"
      ],
      "type": "object"
    },
    "TimeSliceListModel": {
      "example": "{\n  \"timeSlices\": [\n    {\n      \"from\": \"2020-06-18T17:00:00+02:00\",\n      \"to\": \"2020-06-19T11:00:00+02:00\",\n      \"offers\": [\n        {\n          \"unitGroup\": {\n            \"id\": \"MUC-SGL\",\n            \"code\": \"SGL\",\n            \"name\": \"Standard\",\n            \"description\": \"Standard\"\n          },\n          \"minGuaranteeType\": \"PM6Hold\",\n          \"available\": 4,\n          \"restrictions\": {\n            \"minLengthOfStay\": 2,\n            \"maxLengthOfStay\": 30,\n            \"closed\": false,\n            \"closedOnArrival\": true,\n            \"closedOnDeparture\": true\n          },\n          \"prices\": [\n            {\n              \"adults\": 1,\n              \"price\": {\n                \"grossAmount\": 123.0,\n                \"beforeTax\": 111.81,\n                \"afterTax\": 133.0,\n                \"taxes\": {\n                  \"tax\": 11.19,\n                  \"cityTax\": 10.0\n                },\n                \"currency\": \"EUR\"\n              }\n            },\n            {\n              \"adults\": 2,\n              \"price\": {\n                \"grossAmount\": 170.0,\n                \"beforeTax\": 154.54,\n                \"afterTax\": 180.0,\n                \"taxes\": {\n                  \"tax\": 15.46,\n                  \"cityTax\": 10.0\n                },\n                \"currency\": \"EUR\"\n              }\n            }\n          ]\n        },\n        {\n          \"unitGroup\": {\n            \"id\": \"MUC-DBL\",\n            \"code\": \"DBL\",\n            \"name\": \"Double\",\n            \"description\": \"Double\"\n          },\n          \"minGuaranteeType\": \"PM6Hold\",\n          \"available\": 2,\n          \"restrictions\": {\n            \"minLengthOfStay\": 2,\n            \"maxLengthOfStay\": 30,\n            \"closed\": false,\n            \"closedOnArrival\": true,\n            \"closedOnDeparture\": true\n          },\n          \"prices\": [\n            {\n              \"adults\": 1,\n              \"price\": {\n                \"grossAmount\": 456.0,\n                \"beforeTax\": 414.54,\n                \"afterTax\": 466.0,\n                \"taxes\": {\n                  \"tax\": 41.46,\n                  \"cityTax\": 10.0\n                },\n                \"currency\": \"EUR\"\n              }\n            },\n            {\n              \"adults\": 2,\n              \"price\": {\n                \"grossAmount\": 630.0,\n                \"beforeTax\": 572.72,\n                \"afterTax\": 610.0,\n                \"taxes\": {\n                  \"tax\": 57.28,\n                  \"cityTax\": 10.0\n                },\n                \"currency\": \"EUR\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"count\": 1\n}",
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "timeSlices": {
          "description": "List of time slices",
          "items": {
            "$ref": "#/definitions/TimeSliceItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "count"
      ],
      "type": "object"
    },
    "TimeSliceModel": {
      "properties": {
        "actions": {
          "description": "The list of actions allowed for this time slice",
          "items": {
            "$ref": "#/definitions/ActionModel[ReservationTimeSliceAction,NotAllowedReservationTimeSliceActionReason]"
          },
          "type": "array"
        },
        "baseAmount": {
          "$ref": "#/definitions/AmountModel"
        },
        "from": {
          "description": "The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "includedServices": {
          "description": "The list of services included in the rate plan (package elements)",
          "items": {
            "$ref": "#/definitions/ReservationServiceModel"
          },
          "type": "array"
        },
        "ratePlan": {
          "$ref": "#/definitions/EmbeddedRatePlanModel"
        },
        "serviceDate": {
          "description": "The service date for this time slice",
          "example": "2020-10-10",
          "format": "date",
          "type": "string"
        },
        "to": {
          "description": "The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "totalGrossAmount": {
          "$ref": "#/definitions/MonetaryValueModel"
        },
        "unit": {
          "$ref": "#/definitions/EmbeddedUnitModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "baseAmount",
        "from",
        "ratePlan",
        "serviceDate",
        "to",
        "totalGrossAmount",
        "unitGroup"
      ],
      "type": "object"
    },
    "TimeSliceOfferItemModel": {
      "properties": {
        "available": {
          "description": "The number of available units for the offer",
          "format": "int32",
          "type": "integer"
        },
        "maxAdvance": {
          "$ref": "#/definitions/PeriodModel"
        },
        "minAdvance": {
          "$ref": "#/definitions/PeriodModel"
        },
        "minGuaranteeType": {
          "description": "The minimum guarantee type for the offer",
          "enum": [
            "PM6Hold",
            "CreditCard",
            "Prepayment",
            "Company",
            "Ota"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "GuaranteeType"
          }
        },
        "prices": {
          "description": "The prices for this offer",
          "items": {
            "$ref": "#/definitions/PerOccupancyPriceItemModel"
          },
          "type": "array"
        },
        "restrictions": {
          "$ref": "#/definitions/RateRestrictionsModel"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "available",
        "unitGroup"
      ],
      "type": "object"
    },
    "UnitGroupAvailabilityItemModel": {
      "properties": {
        "allowedOverbookingCount": {
          "description": "The number of units allowed for overbooking.",
          "format": "int32",
          "type": "integer"
        },
        "availableCount": {
          "description": "The number of units still available. This is the house count excluding the out of order units minus\r\nthe already sold units.",
          "format": "int32",
          "type": "integer"
        },
        "block": {
          "$ref": "#/definitions/BlockUnitsModel"
        },
        "houseCount": {
          "description": "The number of units physically existing excluding the ones which are out of inventory",
          "format": "int32",
          "type": "integer"
        },
        "maintenance": {
          "$ref": "#/definitions/MaintenanceModel"
        },
        "occupancy": {
          "description": "The percent value indicating the occupancy",
          "format": "double",
          "type": "number"
        },
        "physicalCount": {
          "description": "The number of units physically existing on the property",
          "format": "int32",
          "type": "integer"
        },
        "sellableCount": {
          "description": "The number of units available for selling. This is the minimum of the sellable units on property level\r\nand the available units of this unit group. If there are only 3 units available on the property level\r\nbut 5 units available for this unit group, the sellable count will be 3. This situation can occur if\r\nanother category or the whole house is overbooked.",
          "format": "int32",
          "type": "integer"
        },
        "soldCount": {
          "description": "The number of sold units including units picked up from blocks",
          "format": "int32",
          "type": "integer"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel"
        }
      },
      "required": [
        "allowedOverbookingCount",
        "availableCount",
        "block",
        "houseCount",
        "maintenance",
        "occupancy",
        "physicalCount",
        "sellableCount",
        "soldCount",
        "unitGroup"
      ],
      "type": "object"
    },
    "UnitGroupAvailabilityTimeSliceItemModel": {
      "properties": {
        "from": {
          "description": "Date and time the time slice begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/PropertyAvailabilityModel"
        },
        "to": {
          "description": "Date and time the time slice ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "unitGroups": {
          "description": "List of unit group availabilities for this time slice",
          "items": {
            "$ref": "#/definitions/UnitGroupAvailabilityItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "from",
        "property",
        "to",
        "unitGroups"
      ],
      "type": "object"
    }
  },
  "info": {
    "description": "Resources and methods to manage guest journeys.",
    "title": "apaleo Booking API",
    "version": "v1"
  },
  "paths": {
    "/booking/v1/available-unit-groups": {
      "get": {
        "deprecated": true,
        "description": "Use /availability/v1/unit-groups instead<br/ >Get the list of available unit groups for a specific property and time period.<br>You must have this scope: 'availability.read'.",
        "operationId": "BookingAvailable-unit-groupsGet",
        "parameters": [
          {
            "description": "The property id",
            "in": "query",
            "name": "propertyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "First day of the requested time period. The given day will be included in the response.",
            "format": "date",
            "in": "query",
            "name": "from",
            "required": true,
            "type": "string"
          },
          {
            "description": "Last day of the requested time period. The given day will be included in the response.",
            "format": "date",
            "in": "query",
            "name": "to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The time slice template, defaults to 'over night'",
            "enum": [
              "DayUse",
              "OverNight"
            ],
            "in": "query",
            "name": "timeSliceTemplate",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "TimeSliceTemplate"
            }
          },
          {
            "description": "Filter result by requested unit group types",
            "in": "query",
            "items": {
              "enum": [
                "BedRoom",
                "MeetingRoom",
                "EventSpace",
                "ParkingLot",
                "Other"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "UnitGroupType"
              }
            },
            "name": "unitGroupTypes",
            "type": "array"
          },
          {
            "description": "The time slice definition ids",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "timeSliceDefinitionIds",
            "type": "array"
          },
          {
            "description": "The unit group ids",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitGroupIds",
            "type": "array"
          },
          {
            "description": "The number of adults you want availability for, defaults to 1",
            "format": "int32",
            "in": "query",
            "name": "adults",
            "type": "integer"
          },
          {
            "description": "The ages of the children you want availability for",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "childrenAges",
            "type": "array"
          },
          {
            "description": "When set to 'true', only the unit groups sold by the specified time slice template and time slice definition ids are returned,\r\notherwise all unit groups are returned",
            "in": "query",
            "name": "onlySellable",
            "type": "boolean"
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all available unit groups.",
            "schema": {
              "$ref": "#/definitions/AvailableUnitGroupListModel"
            }
          },
          "204": {
            "description": "There are no available unit groups matching your criteria."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "availability.read",
              "admin"
            ]
          }
        ],
        "summary": "Get a list of all available unit groups in a property [DEPRECATED]",
        "tags": [
          "Availability"
        ]
      }
    },
    "/booking/v1/available-units": {
      "get": {
        "deprecated": true,
        "description": "Use /availability/v1/units instead<br/ >Get the list of available units for a specific property and time period.<br>You must have this scope: 'availability.read'.",
        "operationId": "BookingAvailable-unitsGet",
        "parameters": [
          {
            "description": "The property id",
            "in": "query",
            "name": "propertyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unit group id",
            "in": "query",
            "name": "unitGroupId",
            "type": "string"
          },
          {
            "description": "The from date and time<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "required": true,
            "type": "string"
          },
          {
            "description": "The to date and time<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "required": true,
            "type": "string"
          },
          {
            "description": "Should units that are set OutOfService in the defined time period be returned as available.",
            "in": "query",
            "name": "includeOutOfService",
            "type": "boolean"
          },
          {
            "description": "The unit condition",
            "enum": [
              "Clean",
              "CleanToBeInspected",
              "Dirty"
            ],
            "in": "query",
            "name": "unitCondition",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "UnitCondition"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all available units.",
            "schema": {
              "$ref": "#/definitions/AvailableUnitListModel"
            }
          },
          "204": {
            "description": "There are no available units matching your criteria."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "availability.read",
              "admin"
            ]
          }
        ],
        "summary": "Get a list of all available units in a property [DEPRECATED]",
        "tags": [
          "Availability"
        ]
      }
    },
    "/booking/v1/block-actions/{id}/cancel": {
      "put": {
        "description": "Cancel a specific block which is in status 'Definite' or 'Tentative'.\r\nThis changes the status to 'Canceled'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdCancelPut",
        "parameters": [
          {
            "description": "Id of the block that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Cancellation of the block was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Cancel a block.",
        "tags": [
          "BlockActions"
        ]
      }
    },
    "/booking/v1/block-actions/{id}/confirm": {
      "put": {
        "description": "Confirm a specific block which is in status 'Tentative'.\r\nThis changes the status to 'Definite'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdConfirmPut",
        "parameters": [
          {
            "description": "Id of the block that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Confirmation of the block was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Confirm a block.",
        "tags": [
          "BlockActions"
        ]
      }
    },
    "/booking/v1/block-actions/{id}/release": {
      "put": {
        "description": "Release a specific block which is in status 'Definite'.\r\nThis changes the status to 'Tentative'.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdReleasePut",
        "parameters": [
          {
            "description": "Id of the block that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Release of the block was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Release a block.",
        "tags": [
          "BlockActions"
        ]
      }
    },
    "/booking/v1/block-actions/{id}/wash": {
      "put": {
        "description": "Wash a specific block which is in status 'Definite'.\r\nThis releases all unpicked units.<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlock-actionsByIdWashPut",
        "parameters": [
          {
            "description": "Id of the block that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Wash of the block was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Wash a block.",
        "tags": [
          "BlockActions"
        ]
      }
    },
    "/booking/v1/blocks": {
      "get": {
        "description": "Returns a list of all blocks, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.",
        "operationId": "BookingBlocksGet",
        "parameters": [
          {
            "description": "Return blocks for the specific group",
            "in": "query",
            "name": "groupId",
            "type": "string"
          },
          {
            "description": "Return blocks filtered by properties",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "propertyIds",
            "type": "array"
          },
          {
            "description": "Return blocks filtered by statuses",
            "in": "query",
            "items": {
              "enum": [
                "Tentative",
                "Definite",
                "Canceled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "BlockStatus"
              }
            },
            "name": "status",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified unit groups",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitGroupIds",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified rate plans",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "ratePlanIds",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified time slice definitions",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "timeSliceDefinitionIds",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified unit group types",
            "in": "query",
            "items": {
              "enum": [
                "BedRoom",
                "MeetingRoom",
                "EventSpace",
                "ParkingLot",
                "Other"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "UnitGroupType"
              }
            },
            "name": "unitGroupTypes",
            "type": "array"
          },
          {
            "description": "The time slice template, defaults to 'over night'",
            "enum": [
              "DayUse",
              "OverNight"
            ],
            "in": "query",
            "name": "timeSliceTemplate",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "TimeSliceTemplate"
            }
          },
          {
            "description": "The start of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The end of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "actions",
                "timeSlices"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BlockListModel"
            }
          },
          "204": {
            "description": "No blocks found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a list of blocks",
        "tags": [
          "Block"
        ]
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "<br>You must have at least one of these scopes: 'blocks.create, reservations.manage'.",
        "operationId": "BookingBlocksPost",
        "parameters": [
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "type": "string"
          },
          {
            "description": "The details for the block you want to create.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBlockModel"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "The block was created successfully.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BlockCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.create",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Creates a block",
        "tags": [
          "Block"
        ]
      }
    },
    "/booking/v1/blocks/$count": {
      "get": {
        "description": "Returns number of blocks matching the filter criteria<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.",
        "operationId": "BookingBlocks$countGet",
        "parameters": [
          {
            "description": "Return blocks for the specific group",
            "in": "query",
            "name": "groupId",
            "type": "string"
          },
          {
            "description": "Return blocks filtered by properties",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "propertyIds",
            "type": "array"
          },
          {
            "description": "Return blocks filtered by statuses",
            "in": "query",
            "items": {
              "enum": [
                "Tentative",
                "Definite",
                "Canceled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "BlockStatus"
              }
            },
            "name": "status",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified unit groups",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitGroupIds",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified rate plans",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "ratePlanIds",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified time slice definitions",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "timeSliceDefinitionIds",
            "type": "array"
          },
          {
            "description": "Return blocks with any of the specified unit group types",
            "in": "query",
            "items": {
              "enum": [
                "BedRoom",
                "MeetingRoom",
                "EventSpace",
                "ParkingLot",
                "Other"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "UnitGroupType"
              }
            },
            "name": "unitGroupTypes",
            "type": "array"
          },
          {
            "description": "The time slice template, defaults to 'over night'",
            "enum": [
              "DayUse",
              "OverNight"
            ],
            "in": "query",
            "name": "timeSliceTemplate",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "TimeSliceTemplate"
            }
          },
          {
            "description": "The start of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The end of the time range. All blocks that are overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CountModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns number of blocks",
        "tags": [
          "Block"
        ]
      }
    },
    "/booking/v1/blocks/{id}": {
      "delete": {
        "description": "Use this call to delete a block. This is only possible as long as no reservation was picked up yet even if all of\r\nthem are canceled<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlocksByIdDelete",
        "parameters": [
          {
            "description": "The id of the block.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the block was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Delete a specific block",
        "tags": [
          "Block"
        ]
      },
      "get": {
        "description": "Retrieves a block, specified by its ID.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.",
        "operationId": "BookingBlocksByIdGet",
        "parameters": [
          {
            "description": "Id of the block to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "actions",
                "timeSlices"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BlockModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a specific block.",
        "tags": [
          "Block"
        ]
      },
      "head": {
        "description": "Check if a block exists by id<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.",
        "operationId": "BookingBlocksByIdHead",
        "parameters": [
          {
            "description": "The id of the block.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The block exists."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Check if a block exists",
        "tags": [
          "Block"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "You can replace From, To, GrossDailyRate and BlockedUnits<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.",
        "operationId": "BookingBlocksByIdPatch",
        "parameters": [
          {
            "description": "Id of the block to be modified.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
              "items": {
                "$ref": "#/definitions/Operation"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "blocks.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows to modify the block",
        "tags": [
          "Block"
        ]
      }
    },
    "/booking/v1/bookings": {
      "get": {
        "description": "Returns a list of all bookings, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingBookingsGet",
        "parameters": [
          {
            "description": "Filter result by reservation id. The result set will contain all bookings having reservations with the specified id",
            "in": "query",
            "name": "reservationId",
            "type": "string"
          },
          {
            "description": "Filter result by group id. The result set will contain all bookings having groups with the specified id",
            "in": "query",
            "name": "groupId",
            "type": "string"
          },
          {
            "description": "Filter result by the channel code. The resul set will contain all bookings having reservations with the specified channel code",
            "in": "query",
            "items": {
              "enum": [
                "Direct",
                "BookingCom",
                "Ibe",
                "ChannelManager",
                "Expedia",
                "Homelike"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ChannelCode"
              }
            },
            "name": "channelCode",
            "type": "array"
          },
          {
            "description": "Filter result by the external code. The result set will contain all bookings having reservations with external code starting with provided value",
            "in": "query",
            "name": "externalCode",
            "type": "string"
          },
          {
            "description": "This will filter all bookings for the provided free text. Currently it only looks up if either the lastname, firstname, email or company name of the booker\r\ncontains one of the provided values",
            "in": "query",
            "name": "textSearch",
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "property",
                "unitGroup",
                "ratePlan",
                "services",
                "reservations"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BookingListModel"
            }
          },
          "204": {
            "description": "No bookings found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a list of all bookings, filtered by the specified parameters.",
        "tags": [
          "Booking"
        ]
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'.",
        "operationId": "BookingBookingsPost",
        "parameters": [
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "type": "string"
          },
          {
            "description": "The list of reservations you want to create.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBookingModel"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "All new reservations were created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BookingCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.create",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Creates a booking for one or more reservations.",
        "tags": [
          "Booking"
        ]
      }
    },
    "/booking/v1/bookings/$force": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Creates a booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'.",
        "operationId": "BookingBookings$forcePost",
        "parameters": [
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "type": "string"
          },
          {
            "description": "The list of reservations you want to create.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBookingModel"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "All new reservations were created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BookingCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.force-create",
              "reservations.force-manage",
              "admin"
            ]
          }
        ],
        "summary": "Creates a booking for one or more reservations regardless of availability or restrictions.",
        "tags": [
          "Booking"
        ]
      }
    },
    "/booking/v1/bookings/{id}": {
      "get": {
        "description": "Retrieves a booking with all its reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingBookingsByIdGet",
        "parameters": [
          {
            "description": "Id of the booking to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations, propertyValues. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "property",
                "unitGroup",
                "ratePlan",
                "services",
                "reservations",
                "propertyValues"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BookingModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a specific booking.",
        "tags": [
          "Booking"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Here is the list of operations that are currently allowed:\r\n- Add, replace and remove PaymentAccount\r\n- Add, replace and remove Comment\r\n- Add, replace and remove BookerComment\r\n- Copy PaymentAccount, Comment and BookerComment from the booking to any reservation, or the other way around\r\n- Replace Booker<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingBookingsByIdPatch",
        "parameters": [
          {
            "description": "Id of the booking to be modified.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
              "items": {
                "$ref": "#/definitions/Operation"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows to modify certain booking properties",
        "tags": [
          "Booking"
        ]
      }
    },
    "/booking/v1/bookings/{id}/reservations": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.create, reservations.manage'.",
        "operationId": "BookingBookingsByIdReservationsPost",
        "parameters": [
          {
            "description": "Id of the booking the reservations should be attached to.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "type": "string"
          },
          {
            "description": "The list of reservations you want to add.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddReservationsModel"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "All new reservations were created and added to the booking.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReservationsCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.create",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Add one or multiple reservations to an existing booking.",
        "tags": [
          "Booking"
        ]
      }
    },
    "/booking/v1/bookings/{id}/reservations/$force": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Creates new reservations and adds them to an existing booking taking a list of reservations as input<br>You must have at least one of these scopes: 'reservations.force-create, reservations.force-manage'.",
        "operationId": "BookingBookingsByIdReservations$forcePost",
        "parameters": [
          {
            "description": "Id of the booking the reservations should be attached to.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "type": "string"
          },
          {
            "description": "The list of reservations you want to add.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddReservationsModel"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "All new reservations were created and added to the booking.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReservationsCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.force-create",
              "reservations.force-manage",
              "admin"
            ]
          }
        ],
        "summary": "Add one or multiple reservations to an existing booking regardless of availability or restrictions.",
        "tags": [
          "Booking"
        ]
      }
    },
    "/booking/v1/groups": {
      "get": {
        "description": "Returns a list of all group bookings, filtered by the specified parameters.\r\nIf no parameters are set, returns the entire list<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.",
        "operationId": "BookingGroupsGet",
        "parameters": [
          {
            "description": "This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,\r\nfirstname, email or company name of the booker contains one of the provided values",
            "in": "query",
            "name": "textSearch",
            "type": "string"
          },
          {
            "description": "Filter result by requested properties",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "propertyIds",
            "type": "array"
          },
          {
            "description": "The start of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The end of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "blocks",
                "actions"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupListModel"
            }
          },
          "204": {
            "description": "No group bookings found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a list of all group bookings, filtered by the specified parameters.",
        "tags": [
          "Group"
        ]
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "<br>You must have at least one of these scopes: 'groups.create, reservations.manage'.",
        "operationId": "BookingGroupsPost",
        "parameters": [
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "type": "string"
          },
          {
            "description": "The details of the group that should be created.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupModel"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "A new group booking was created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GroupCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.create",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Creates a group booking.",
        "tags": [
          "Group"
        ]
      }
    },
    "/booking/v1/groups/$count": {
      "get": {
        "description": "Returns number of group bookings matching the filter criteria<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.",
        "operationId": "BookingGroups$countGet",
        "parameters": [
          {
            "description": "This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,\r\nfirstname, email or company name of the booker contains one of the provided values",
            "in": "query",
            "name": "textSearch",
            "type": "string"
          },
          {
            "description": "Filter result by requested properties",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "propertyIds",
            "type": "array"
          },
          {
            "description": "The start of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The end of the time range. All groups that have blocks overlapping with the interval specified by from and to\r\nwill be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CountModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns number of group bookings",
        "tags": [
          "Group"
        ]
      }
    },
    "/booking/v1/groups/{id}": {
      "delete": {
        "description": "Use this call to delete a group booking. This is only possible as long as no blocks exist that are linked to\r\nthis group booking<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.",
        "operationId": "BookingGroupsByIdDelete",
        "parameters": [
          {
            "description": "Id of the group booking to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the group was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Delete a certain group booking",
        "tags": [
          "Group"
        ]
      },
      "get": {
        "description": "Retrieves a specific group booking with all its related blocks<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.",
        "operationId": "BookingGroupsByIdGet",
        "parameters": [
          {
            "description": "Id of the group booking to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "blocks",
                "actions"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GroupModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a specific group booking.",
        "tags": [
          "Group"
        ]
      },
      "head": {
        "description": "Check if a group booking exists by id<br>You must have at least one of these scopes: 'groups.read, reservations.read, reservations.manage'.",
        "operationId": "BookingGroupsByIdHead",
        "parameters": [
          {
            "description": "Id of the group booking to be checked for existence.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The group booking exists."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.read",
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Check if a certain group booking exists",
        "tags": [
          "Group"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Here is the list of operations that are currently allowed:\r\n- Add and replace Name\r\n- Add, replace and remove Comment\r\n- Add, replace and remove BookerComment\r\n- Add, replace and remove PaymentAccount\r\n- Add, replace and remove PropertyIds\r\n- Replace Booker<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.",
        "operationId": "BookingGroupsByIdPatch",
        "parameters": [
          {
            "description": "Id of the group booking to be modified.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
              "items": {
                "$ref": "#/definitions/Operation"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows to modify certain group booking properties",
        "tags": [
          "Group"
        ]
      }
    },
    "/booking/v1/groups/{id}/reservations": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Creates new reservations and adds them to an existing group booking taking a list of reservations as input<br>You must have at least one of these scopes: 'groups.manage, reservations.manage'.",
        "operationId": "BookingGroupsByIdReservationsPost",
        "parameters": [
          {
            "description": "Id of the group booking the reservations should be attached to.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "type": "string"
          },
          {
            "description": "The list of reservations you want to create.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PickUpReservationsModel"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "All new reservations were created and added to the group booking.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReservationsCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "groups.manage",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Add one or multiple reservations to an existing group booking using blocked inventory.",
        "tags": [
          "Group"
        ]
      }
    },
    "/booking/v1/offer-index": {
      "get": {
        "description": "Calculates and returns offers per time slice for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offer-index.read, offers.read'.",
        "operationId": "BookingOffer-indexGet",
        "parameters": [
          {
            "in": "query",
            "name": "ratePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "from",
            "required": true,
            "type": "string"
          },
          {
            "description": "<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "to",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "Direct",
              "BookingCom",
              "Ibe",
              "ChannelManager",
              "Expedia",
              "Homelike"
            ],
            "in": "query",
            "name": "channelCode",
            "required": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ChannelCode"
            }
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/TimeSliceListModel"
            }
          },
          "204": {
            "description": "There are no rates for the specified parameters."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "offer-index.read",
              "offers.read",
              "admin"
            ]
          }
        ],
        "summary": "Returns offers with rates and availabilities for the specified range.",
        "tags": [
          "Offer"
        ]
      }
    },
    "/booking/v1/offers": {
      "get": {
        "description": "Calculates and returns available offers for a specific property, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingOffersGet",
        "parameters": [
          {
            "description": "The property ID",
            "in": "query",
            "name": "propertyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "arrival",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "departure",
            "required": true,
            "type": "string"
          },
          {
            "description": "The time slice template used to filter the rate plans, defaults to 'over night'",
            "enum": [
              "DayUse",
              "OverNight"
            ],
            "in": "query",
            "name": "timeSliceTemplate",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "TimeSliceTemplate"
            }
          },
          {
            "description": "Time slice definition IDs, used to filter rate plans",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "timeSliceDefinitionIds",
            "type": "array"
          },
          {
            "description": "Unit group IDs, used to filter rate plans",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitGroupIds",
            "type": "array"
          },
          {
            "description": "Unit group types, used to filter rate plans",
            "in": "query",
            "items": {
              "enum": [
                "BedRoom",
                "MeetingRoom",
                "EventSpace",
                "ParkingLot",
                "Other"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "UnitGroupType"
              }
            },
            "name": "unitGroupTypes",
            "type": "array"
          },
          {
            "description": "Channel code, used to filter the rate plans",
            "enum": [
              "Direct",
              "BookingCom",
              "Ibe",
              "ChannelManager",
              "Expedia",
              "Homelike"
            ],
            "in": "query",
            "name": "channelCode",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ChannelCode"
            }
          },
          {
            "description": "The promo code associated with a certain special offer",
            "in": "query",
            "name": "promoCode",
            "type": "string"
          },
          {
            "description": "The code associated with a corporate rate",
            "in": "query",
            "name": "corporateCode",
            "type": "string"
          },
          {
            "description": "The number of adults you want offers for",
            "format": "int32",
            "in": "query",
            "name": "adults",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The ages of the children you want offers for",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "childrenAges",
            "type": "array"
          },
          {
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "in": "query",
            "name": "includeUnavailable",
            "type": "boolean"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/StayOffersModel"
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns offers for one specific stay.",
        "tags": [
          "Offer"
        ]
      }
    },
    "/booking/v1/rate-plan-offers": {
      "get": {
        "description": "Calculates and returns available offers for a specific rate plan, arrival and departure date.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingRate-plan-offersGet",
        "parameters": [
          {
            "description": "The rate plan ID",
            "in": "query",
            "name": "ratePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "arrival",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "departure",
            "required": true,
            "type": "string"
          },
          {
            "description": "The channel code",
            "enum": [
              "Direct",
              "BookingCom",
              "Ibe",
              "ChannelManager",
              "Expedia",
              "Homelike"
            ],
            "in": "query",
            "name": "channelCode",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ChannelCode"
            }
          },
          {
            "description": "The number of adults you want offers for",
            "format": "int32",
            "in": "query",
            "name": "adults",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The ages of the children you want offers for",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "childrenAges",
            "type": "array"
          },
          {
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "in": "query",
            "name": "includeUnavailable",
            "type": "boolean"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/StayOffersModel"
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns offers for a specific rate plan.",
        "tags": [
          "Offer"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/amend": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Modifies the stay-related data of a reservation.<br />\r\nIf a reservation is 'Confirmed', you can change all fields.<br />\r\nIf a reservation is 'InHouse', only changes to future time slices are possible.<br />\r\nChanges to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdAmendPut",
        "parameters": [
          {
            "description": "Id of the reservation that should be modified",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new stay details that should be applied to the reservation.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DesiredStayDetailsModel"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "The reservation has been changed."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows you to amend the stay details of a reservation",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/amend/$force": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Modifies the stay-related data of a reservation.<br />\r\nIf a reservation is 'Confirmed', you can change all fields.<br />\r\nIf a reservation is 'InHouse', only changes to future time slices are possible.<br />\r\nChanges to reservations that are in the status 'CheckedOut' or 'Canceled' are not possible at all.<br>You must have this scope: 'reservations.force-manage'.",
        "operationId": "BookingReservation-actionsByIdAmend$forcePut",
        "parameters": [
          {
            "description": "Id of the reservation that should be modified",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new stay details that should be applied to the reservation.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DesiredStayDetailsModel"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "The reservation has been changed."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.force-manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows you to amend the stay details of a reservation regardless of availability or restrictions.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/assign-unit": {
      "put": {
        "description": "Assigns one of the available units to a reservation which is in state 'Confirmed' or 'InHouse'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdAssign-unitPut",
        "parameters": [
          {
            "description": "Id of the reservation a unit should be assigned to.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Unit assignment was successful.",
            "schema": {
              "$ref": "#/definitions/AutoAssignedUnitListModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.assign-unit",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Assign a unit to a reservation.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/assign-unit/{unitId}": {
      "put": {
        "description": "Assigns a specific unit to a reservation which is in state 'Confirmed' or 'InHouse'.<br />If the unit is not available, the call will return an error, and no unit will be assigned.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdAssign-unitByUnitIdPut",
        "parameters": [
          {
            "description": "Id of the reservation the unit should be assigned to.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the unit to be assigned.",
            "in": "path",
            "name": "unitId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The start date and optional time for the unit assignment. If not specified, the reservation's arrival will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The end date and optional time for the unit assignment. If not specified, the reservation's departure will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "to",
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Unit assignment was successful.",
            "schema": {
              "$ref": "#/definitions/AssignedUnitModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.assign-unit",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Assign a specific unit to a reservation.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/book-service": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Use this to book a service for a specific reservation.\r\nPlease note that when dates are specified, all desired dates must be specified or they will be removed if not posted to the folio.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdBook-servicePut",
        "parameters": [
          {
            "description": "Id of the reservation.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookReservationServiceModel"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Booking of the service for the reservation was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Book the service for a specific reservation.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/cancel": {
      "put": {
        "description": "Cancel a specific reservation which is in status 'Confirmed' and where the arrival time is in the future.\r\nThis changes the status to 'Canceled', and sets the cancellation date and time.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdCancelPut",
        "parameters": [
          {
            "description": "Id of the reservation that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Cancellation of the reservation was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Cancel a reservation.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/checkin": {
      "put": {
        "description": "Check in a specific reservation which is in status 'Confirmed', and has a unit assigned. This changes the status to 'InHouse', and sets the check-in date and time.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdCheckinPut",
        "parameters": [
          {
            "description": "Id of the reservation that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "query",
            "name": "withCityTax",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Check-in of the reservation was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Check-in of a reservation.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/checkout": {
      "put": {
        "description": "Check out a specific reservation which is in status 'InHouse'. This changes the status to 'CheckedOut', and sets the check-out date and time.\r\nAll open charges on the folio will be posted.\r\n<br />\r\nCheck-out is only possible, if the departure date is not later than tomorrow. Otherwise, first amend the reservation and shorten the stay.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdCheckoutPut",
        "parameters": [
          {
            "description": "Id of the reservation that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Check-out of the reservation was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Check-out of a reservation.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/noshow": {
      "put": {
        "description": "Set a specific reservation to No-show which is in status 'Confirmed' and where the arrival date is in the past.\r\nThis changes the status to 'NoShow', and sets the no-show date and time.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdNoshowPut",
        "parameters": [
          {
            "description": "Id of the reservation that should be processed.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Setting the reservation to No-show was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Set a reservation to No-show.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservation-actions/{id}/unassign-units": {
      "put": {
        "description": "Unassigns units for all time slices of the given reservation. If no units are assigned for the\r\nreservation nothing will happen. It will fail for reservations in status 'CheckedOut'.<br>You must have at least one of these scopes: 'reservations.assign-unit, reservations.manage'.",
        "operationId": "BookingReservation-actionsByIdUnassign-unitsPut",
        "parameters": [
          {
            "description": "Id of the reservation the unit should be unassigned for.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unassigning the unit was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.assign-unit",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Unassign units from a reservation.",
        "tags": [
          "ReservationActions"
        ]
      }
    },
    "/booking/v1/reservations": {
      "get": {
        "description": "Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservationsGet",
        "parameters": [
          {
            "description": "Filter result by booking id",
            "in": "query",
            "name": "bookingId",
            "type": "string"
          },
          {
            "description": "Filter result by requested properties",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "propertyIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested rate plans",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "ratePlanIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested companies",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "companyIds",
            "type": "array"
          },
          {
            "description": "Filter result by assigned units",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested unit groups",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitGroupIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested unit group types",
            "in": "query",
            "items": {
              "enum": [
                "BedRoom",
                "MeetingRoom",
                "EventSpace",
                "ParkingLot",
                "Other"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "UnitGroupType"
              }
            },
            "name": "unitGroupTypes",
            "type": "array"
          },
          {
            "description": "Filter result by requested blocks",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "blockIds",
            "type": "array"
          },
          {
            "description": "Filter result by reservation status",
            "in": "query",
            "items": {
              "enum": [
                "Confirmed",
                "InHouse",
                "CheckedOut",
                "Canceled",
                "NoShow"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ReservationStatus"
              }
            },
            "name": "status",
            "type": "array"
          },
          {
            "description": "Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.\r\nAll filters will check if the date specified by the filter type is between from (included) and to (excluded).\r\nThe exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.",
            "enum": [
              "Arrival",
              "Departure",
              "Stay",
              "Creation",
              "Modification",
              "Cancellation"
            ],
            "in": "query",
            "name": "dateFilter",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "DateFilterType"
            }
          },
          {
            "description": "The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "description": "Filter result by the channel code",
            "in": "query",
            "items": {
              "enum": [
                "Direct",
                "BookingCom",
                "Ibe",
                "ChannelManager",
                "Expedia",
                "Homelike"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ChannelCode"
              }
            },
            "name": "channelCode",
            "type": "array"
          },
          {
            "description": "Filter result by source",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sources",
            "type": "array"
          },
          {
            "description": "Filter result by validation message category",
            "in": "query",
            "items": {
              "enum": [
                "OfferNotAvailable",
                "AutoUnitAssignment"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ValidationMessageCategory"
              }
            },
            "name": "validationMessageCategory",
            "type": "array"
          },
          {
            "description": "Filter result by the external code. The result set will contain all reservations that have an external code starting with the\r\nprovided value",
            "in": "query",
            "name": "externalCode",
            "type": "string"
          },
          {
            "description": "This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,\r\nprimary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.",
            "in": "query",
            "name": "textSearch",
            "type": "string"
          },
          {
            "description": "This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "balanceFilter",
            "type": "array"
          },
          {
            "description": "If set to {true}, returns only reservations, in which all folios are closed and have an invoice.\r\nIf set to {false}, returns only reservations, in which some of the folios are open or don't have an invoice",
            "in": "query",
            "name": "allFoliosHaveInvoice",
            "type": "boolean"
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "List of all fields that can be used to sort the results. Possible values are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc, created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc, firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "arrival:asc",
                "arrival:desc",
                "departure:asc",
                "departure:desc",
                "created:asc",
                "created:desc",
                "updated:asc",
                "updated:desc",
                "id:asc",
                "id:desc",
                "firstname:asc",
                "firstname:desc",
                "lastname:asc",
                "lastname:desc",
                "unitname:asc",
                "unitname:desc"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: booker, actions, timeSlices, services, assignedUnits, company. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "booker",
                "actions",
                "timeSlices",
                "services",
                "assignedUnits",
                "company"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReservationListModel"
            }
          },
          "204": {
            "description": "No reservations found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a list of all reservations, filtered by the specified parameters.",
        "tags": [
          "Reservation"
        ]
      }
    },
    "/booking/v1/reservations/$count": {
      "get": {
        "description": "If no parameters are set, returns the total count of reservations.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservations$countGet",
        "parameters": [
          {
            "description": "Filter result by booking id",
            "in": "query",
            "name": "bookingId",
            "type": "string"
          },
          {
            "description": "Filter result by requested properties",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "propertyIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested rate plans",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "ratePlanIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested companies",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "companyIds",
            "type": "array"
          },
          {
            "description": "Filter result by assigned units",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested unit groups",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitGroupIds",
            "type": "array"
          },
          {
            "description": "Filter result by requested unit group types",
            "in": "query",
            "items": {
              "enum": [
                "BedRoom",
                "MeetingRoom",
                "EventSpace",
                "ParkingLot",
                "Other"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "UnitGroupType"
              }
            },
            "name": "unitGroupTypes",
            "type": "array"
          },
          {
            "description": "Filter result by requested blocks",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "blockIds",
            "type": "array"
          },
          {
            "description": "Filter result by reservation status",
            "in": "query",
            "items": {
              "enum": [
                "Confirmed",
                "InHouse",
                "CheckedOut",
                "Canceled",
                "NoShow"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ReservationStatus"
              }
            },
            "name": "status",
            "type": "array"
          },
          {
            "description": "Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.\r\nAll filters will check if the date specified by the filter type is between from (included) and to (excluded).\r\nThe exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.",
            "enum": [
              "Arrival",
              "Departure",
              "Stay",
              "Creation",
              "Modification",
              "Cancellation"
            ],
            "in": "query",
            "name": "dateFilter",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "DateFilterType"
            }
          },
          {
            "description": "The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "description": "Filter result by the channel code",
            "in": "query",
            "items": {
              "enum": [
                "Direct",
                "BookingCom",
                "Ibe",
                "ChannelManager",
                "Expedia",
                "Homelike"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ChannelCode"
              }
            },
            "name": "channelCode",
            "type": "array"
          },
          {
            "description": "Filter result by source",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sources",
            "type": "array"
          },
          {
            "description": "Filter result by validation message category",
            "in": "query",
            "items": {
              "enum": [
                "OfferNotAvailable",
                "AutoUnitAssignment"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ValidationMessageCategory"
              }
            },
            "name": "validationMessageCategory",
            "type": "array"
          },
          {
            "description": "Filter result by the external code. The result set will contain all reservations that have an external code starting with the\r\nprovided value",
            "in": "query",
            "name": "externalCode",
            "type": "string"
          },
          {
            "description": "This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,\r\nprimary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.",
            "in": "query",
            "name": "textSearch",
            "type": "string"
          },
          {
            "description": "This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "balanceFilter",
            "type": "array"
          },
          {
            "description": "If set to {true}, returns only reservations, in which all folios are closed and have an invoice.\r\nIf set to {false}, returns only reservations, in which some of the folios are open or don't have an invoice",
            "in": "query",
            "name": "allFoliosHaveInvoice",
            "type": "boolean"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CountModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns the number of reservations fulfilling the criteria specified in the parameters.",
        "tags": [
          "Reservation"
        ]
      }
    },
    "/booking/v1/reservations/{id}": {
      "get": {
        "description": "Retrieves a reservation, specified by its ID.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdGet",
        "parameters": [
          {
            "description": "Id of the reservation to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: timeSlices, services, booker, actions, company. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "timeSlices",
                "services",
                "booker",
                "actions",
                "company"
              ],
              "type": "string"
            },
            "name": "expand",
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReservationModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns a specific reservation.",
        "tags": [
          "Reservation"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Here is the list of operations that are currently allowed:\r\n- Add, replace and remove Comment\r\n- Add, replace and remove GuestComment\r\n- Add, replace and remove PaymentAccount\r\n- Add, replace and remove TravelPurpose\r\n- Add, replace and remove AdditionalGuests\r\n- Add a company (using company/Id, and only if not already set)\r\n- Add, replace and remove Commission\r\n- Replace PrimaryGuest\r\n- Remove ValidationMessages<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservationsByIdPatch",
        "parameters": [
          {
            "description": "Id of the reservation to be modified.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
              "items": {
                "$ref": "#/definitions/Operation"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows to modify certain reservation properties",
        "tags": [
          "Reservation"
        ]
      }
    },
    "/booking/v1/reservations/{id}/available-units": {
      "get": {
        "deprecated": true,
        "description": "This method has been moved to availability, use /availability/v1/reservations/{id}/units instead. It will be removed on 10/07/2020<br/ >Get the list of available units for a specific reservation and time period.<br>You must have at least one of these scopes: 'availability.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdAvailable-unitsGet",
        "parameters": [
          {
            "description": "The id of the reservation",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unit group id",
            "in": "query",
            "name": "unitGroupId",
            "type": "string"
          },
          {
            "description": "The from date and time<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "The to date and time<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "description": "Should units that are set OutOfService in the defined time period be returned as available.",
            "in": "query",
            "name": "includeOutOfService",
            "type": "boolean"
          },
          {
            "description": "The unit condition",
            "enum": [
              "Clean",
              "CleanToBeInspected",
              "Dirty"
            ],
            "in": "query",
            "name": "unitCondition",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "UnitCondition"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all available units for the reservation.",
            "schema": {
              "$ref": "#/definitions/AvailableUnitListModel"
            }
          },
          "204": {
            "description": "There are no available units matching your criteria."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "availability.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Get a list of all available units for a reservation [DEPRECATED]",
        "tags": [
          "Reservation"
        ]
      }
    },
    "/booking/v1/reservations/{id}/offers": {
      "get": {
        "description": "Calculates and returns offers for amending a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdOffersGet",
        "parameters": [
          {
            "description": "Id of the reservation to be amended.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "arrival",
            "type": "string"
          },
          {
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "departure",
            "type": "string"
          },
          {
            "description": "Number of adults",
            "format": "int32",
            "in": "query",
            "name": "adults",
            "type": "integer"
          },
          {
            "description": "Ages of children",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "childrenAges",
            "type": "array"
          },
          {
            "description": "The channel code used to filter the rate plans",
            "enum": [
              "Direct",
              "BookingCom",
              "Ibe",
              "ChannelManager",
              "Expedia",
              "Homelike"
            ],
            "in": "query",
            "name": "channelCode",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ChannelCode"
            }
          },
          {
            "description": "The promo code associated with a certain special offer, like corporate rate",
            "in": "query",
            "name": "promoCode",
            "type": "string"
          },
          {
            "description": "Whether the offers should be re-quoted based on current prices, or only additions like change of number of adults should be calculated.\r\nDefaults to 'false'",
            "in": "query",
            "name": "requote",
            "type": "boolean"
          },
          {
            "description": "Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned",
            "in": "query",
            "name": "includeUnavailable",
            "type": "boolean"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReservationStayOffersModel"
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns offers for one specific reservation.",
        "tags": [
          "Reservation"
        ]
      }
    },
    "/booking/v1/reservations/{id}/service-offers": {
      "get": {
        "description": "Calculates and returns service offers for a specific reservation.<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdService-offersGet",
        "parameters": [
          {
            "description": "Id of the reservation.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The channel code used to filter the services",
            "enum": [
              "Direct",
              "BookingCom",
              "Ibe",
              "ChannelManager",
              "Expedia",
              "Homelike"
            ],
            "in": "query",
            "name": "channelCode",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ChannelCode"
            }
          },
          {
            "description": "Depending on the postNextDay setting of a service it will by default be posted before or after midnight.\r\nBreakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day\r\nare default dates and will have this flag set to true. For services like a dinner it is the other way around.\r\nWith this query parameter, you can also ask for the dates, that usually the service will not be booked. It defaults to true.",
            "in": "query",
            "name": "onlyDefaultDates",
            "type": "boolean"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceOffersModel"
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns service offers for one specific reservation.",
        "tags": [
          "Reservation"
        ]
      }
    },
    "/booking/v1/reservations/{id}/services": {
      "delete": {
        "description": "Removes a service from a reservation. The service will not be removed if it is already posted or if the service date is in the past.<br>You must have this scope: 'reservations.manage'.",
        "operationId": "BookingReservationsByIdServicesDelete",
        "parameters": [
          {
            "description": "Id of the reservation.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the service to delete",
            "in": "query",
            "name": "serviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Removes a service from a reservation.",
        "tags": [
          "Reservation"
        ]
      },
      "get": {
        "description": "Returns the services booked for a specific reservation.<br>You must have at least one of these scopes: 'reservations.read, reservations.manage'.",
        "operationId": "BookingReservationsByIdServicesGet",
        "parameters": [
          {
            "description": "Id of the reservation.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReservationServiceListModel"
            }
          },
          "204": {
            "description": "There are no booked services for the specified reservation."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns the services booked for a specific reservation.",
        "tags": [
          "Reservation"
        ]
      }
    },
    "/booking/v1/service-offers": {
      "get": {
        "description": "<br>You must have at least one of these scopes: 'offers.read, reservations.manage'.",
        "operationId": "BookingService-offersGet",
        "parameters": [
          {
            "description": "The rate plan ID",
            "in": "query",
            "name": "ratePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "arrival",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "in": "query",
            "name": "departure",
            "required": true,
            "type": "string"
          },
          {
            "description": "The channel code used to filter the services",
            "enum": [
              "Direct",
              "BookingCom",
              "Ibe",
              "ChannelManager",
              "Expedia",
              "Homelike"
            ],
            "in": "query",
            "name": "channelCode",
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ChannelCode"
            }
          },
          {
            "description": "The number of adults you want offers for",
            "format": "int32",
            "in": "query",
            "name": "adults",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The ages of the children you want offers for",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "childrenAges",
            "type": "array"
          },
          {
            "description": "Depending on the postNextDay setting of a service it will be posted before or after midnight.\r\nBreakfast is usually delivered on the next morning, having 'postNextDay' set to true. Its 'default dates' are from the day after\r\narrival until the departure day. For services like dinner 'postNextDay' is false, and default dates are day of arrival until one\r\nday before departure.\r\nWith this query parameter set to 'false', you can also ask for dates outside of those default dates. It defaults to true.",
            "in": "query",
            "name": "onlyDefaultDates",
            "type": "boolean"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/ServiceOffersModel"
            }
          },
          "204": {
            "description": "There are no available offers for the specified parameters."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "offers.read",
              "reservations.manage",
              "admin"
            ]
          }
        ],
        "summary": "Returns service offers for one specific stay.",
        "tags": [
          "Offer"
        ]
      }
    },
    "/booking/v1/types/sources": {
      "get": {
        "description": "Returns a list of channels that could be used as a source to create bookings.",
        "operationId": "BookingTypesSourcesGet",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/SourceListModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "summary": "Returns a list of supported sources.",
        "tags": [
          "Types"
        ]
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "authorizationUrl": "https://identity.apaleo.com/connect/authorize",
      "flow": "implicit",
      "scopes": {
        "admin": "Full access",
        "reservations.import": "Import reservations"
      },
      "type": "oauth2"
    }
  },
  "swagger": "2.0"
}
