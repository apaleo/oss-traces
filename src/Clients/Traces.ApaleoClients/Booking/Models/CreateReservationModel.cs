// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// With this request you can create a reservation
    /// </summary>
    public partial class CreateReservationModel
    {
        /// <summary>
        /// Initializes a new instance of the CreateReservationModel class.
        /// </summary>
        public CreateReservationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateReservationModel class.
        /// </summary>
        /// <param name="adults">Number of adults</param>
        /// <param name="arrival">Date and optional time of arrival&lt;br
        /// /&gt;Specify either a pure date or a date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="channelCode">Channel code. Possible values include:
        /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia'</param>
        /// <param name="departure">Date and optional time of departure. Cannot
        /// be more than 5 years after arrival.&lt;br /&gt;Specify either a
        /// pure date or a date and time (without fractional second part) in
        /// UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="timeSlices">Gross prices including services and taxes
        /// for each time slice. They will be applied to the reservation
        /// timeslices
        /// in the order specified from arrival to departure</param>
        /// <param name="additionalGuests">Additional guests of the
        /// reservation.</param>
        /// <param name="childrenAges">Ages of the children</param>
        /// <param name="comment">Additional information and comments</param>
        /// <param name="commission">The information about the OTA
        /// commission.</param>
        /// <param name="companyId">Set this if this reservation belongs to a
        /// company</param>
        /// <param name="corporateCode">Corporate code provided during
        /// creation. Used to find offers during amend.</param>
        /// <param name="externalCode">Code in some system</param>
        /// <param name="guaranteeType">The guarantee that has to be applied
        /// for this reservation. It has to be the same or stronger than
        /// the minimum guarantee required by the selected rate plan. Possible
        /// values include: 'PM6Hold', 'CreditCard', 'Prepayment',
        /// 'Company'</param>
        /// <param name="guestComment">Additional information and comments by
        /// the guest</param>
        /// <param name="prePaymentAmount">The amount that needs to be
        /// pre-paid.</param>
        /// <param name="primaryGuest">The primary guest of the reservation.
        /// If no guest is set, the booker is used.</param>
        /// <param name="services">Additional services (extras, add-ons) that
        /// should be added to the reservation</param>
        /// <param name="source">Source of the reservation</param>
        /// <param name="travelPurpose">Purpose of the trip, leisure or
        /// business. Possible values include: 'Business', 'Leisure'</param>
        public CreateReservationModel(int adults, string arrival, string channelCode, string departure, IList<CreateReservationTimeSliceModel> timeSlices, IList<GuestModel> additionalGuests = default(IList<GuestModel>), IList<int?> childrenAges = default(IList<int?>), string comment = default(string), CommissionModel commission = default(CommissionModel), string companyId = default(string), string corporateCode = default(string), string externalCode = default(string), string guaranteeType = default(string), string guestComment = default(string), MonetaryValueModel prePaymentAmount = default(MonetaryValueModel), GuestModel primaryGuest = default(GuestModel), IList<BookReservationServiceModel> services = default(IList<BookReservationServiceModel>), string source = default(string), string travelPurpose = default(string))
        {
            AdditionalGuests = additionalGuests;
            Adults = adults;
            Arrival = arrival;
            ChannelCode = channelCode;
            ChildrenAges = childrenAges;
            Comment = comment;
            Commission = commission;
            CompanyId = companyId;
            CorporateCode = corporateCode;
            Departure = departure;
            ExternalCode = externalCode;
            GuaranteeType = guaranteeType;
            GuestComment = guestComment;
            PrePaymentAmount = prePaymentAmount;
            PrimaryGuest = primaryGuest;
            Services = services;
            Source = source;
            TimeSlices = timeSlices;
            TravelPurpose = travelPurpose;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets additional guests of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "additionalGuests")]
        public IList<GuestModel> AdditionalGuests { get; set; }

        /// <summary>
        /// Gets or sets number of adults
        /// </summary>
        [JsonProperty(PropertyName = "adults")]
        public int Adults { get; set; }

        /// <summary>
        /// Gets or sets date and optional time of arrival&amp;lt;br
        /// /&amp;gt;Specify either a pure date or a date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "arrival")]
        public string Arrival { get; set; }

        /// <summary>
        /// Gets or sets channel code. Possible values include: 'Direct',
        /// 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia'
        /// </summary>
        [JsonProperty(PropertyName = "channelCode")]
        public string ChannelCode { get; set; }

        /// <summary>
        /// Gets or sets ages of the children
        /// </summary>
        [JsonProperty(PropertyName = "childrenAges")]
        public IList<int?> ChildrenAges { get; set; }

        /// <summary>
        /// Gets or sets additional information and comments
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets the information about the OTA commission.
        /// </summary>
        [JsonProperty(PropertyName = "commission")]
        public CommissionModel Commission { get; set; }

        /// <summary>
        /// Gets or sets set this if this reservation belongs to a company
        /// </summary>
        [JsonProperty(PropertyName = "companyId")]
        public string CompanyId { get; set; }

        /// <summary>
        /// Gets or sets corporate code provided during creation. Used to find
        /// offers during amend.
        /// </summary>
        [JsonProperty(PropertyName = "corporateCode")]
        public string CorporateCode { get; set; }

        /// <summary>
        /// Gets or sets date and optional time of departure. Cannot be more
        /// than 5 years after arrival.&amp;lt;br /&amp;gt;Specify either a
        /// pure date or a date and time (without fractional second part) in
        /// UTC or with UTC offset as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "departure")]
        public string Departure { get; set; }

        /// <summary>
        /// Gets or sets code in some system
        /// </summary>
        [JsonProperty(PropertyName = "externalCode")]
        public string ExternalCode { get; set; }

        /// <summary>
        /// Gets or sets the guarantee that has to be applied for this
        /// reservation. It has to be the same or stronger than
        /// the minimum guarantee required by the selected rate plan. Possible
        /// values include: 'PM6Hold', 'CreditCard', 'Prepayment', 'Company'
        /// </summary>
        [JsonProperty(PropertyName = "guaranteeType")]
        public string GuaranteeType { get; set; }

        /// <summary>
        /// Gets or sets additional information and comments by the guest
        /// </summary>
        [JsonProperty(PropertyName = "guestComment")]
        public string GuestComment { get; set; }

        /// <summary>
        /// Gets or sets the amount that needs to be pre-paid.
        /// </summary>
        [JsonProperty(PropertyName = "prePaymentAmount")]
        public MonetaryValueModel PrePaymentAmount { get; set; }

        /// <summary>
        /// Gets or sets the primary guest of the reservation.
        /// If no guest is set, the booker is used.
        /// </summary>
        [JsonProperty(PropertyName = "primaryGuest")]
        public GuestModel PrimaryGuest { get; set; }

        /// <summary>
        /// Gets or sets additional services (extras, add-ons) that should be
        /// added to the reservation
        /// </summary>
        [JsonProperty(PropertyName = "services")]
        public IList<BookReservationServiceModel> Services { get; set; }

        /// <summary>
        /// Gets or sets source of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets gross prices including services and taxes for each
        /// time slice. They will be applied to the reservation timeslices
        /// in the order specified from arrival to departure
        /// </summary>
        [JsonProperty(PropertyName = "timeSlices")]
        public IList<CreateReservationTimeSliceModel> TimeSlices { get; set; }

        /// <summary>
        /// Gets or sets purpose of the trip, leisure or business. Possible
        /// values include: 'Business', 'Leisure'
        /// </summary>
        [JsonProperty(PropertyName = "travelPurpose")]
        public string TravelPurpose { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Arrival == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Arrival");
            }
            if (ChannelCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ChannelCode");
            }
            if (Departure == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Departure");
            }
            if (TimeSlices == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TimeSlices");
            }
            if (AdditionalGuests != null)
            {
                foreach (var element in AdditionalGuests)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Commission != null)
            {
                Commission.Validate();
            }
            if (PrePaymentAmount != null)
            {
                PrePaymentAmount.Validate();
            }
            if (PrimaryGuest != null)
            {
                PrimaryGuest.Validate();
            }
            if (Services != null)
            {
                foreach (var element1 in Services)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (TimeSlices != null)
            {
                foreach (var element2 in TimeSlices)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
