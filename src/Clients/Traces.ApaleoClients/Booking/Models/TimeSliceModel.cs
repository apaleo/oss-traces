// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TimeSliceModel
    {
        /// <summary>
        /// Initializes a new instance of the TimeSliceModel class.
        /// </summary>
        public TimeSliceModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeSliceModel class.
        /// </summary>
        /// <param name="fromProperty">The start date and time for this time
        /// slice&lt;br /&gt;A date and time (without fractional second part)
        /// in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="serviceDate">The service date for this time
        /// slice</param>
        /// <param name="to">The end date and time for this time slice&lt;br
        /// /&gt;A date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="actions">The list of actions allowed for this time
        /// slice</param>
        /// <param name="includedServices">The list of services included in the
        /// rate plan (package elements)</param>
        public TimeSliceModel(AmountModel baseAmount, System.DateTime fromProperty, EmbeddedRatePlanModel ratePlan, System.DateTime serviceDate, System.DateTime to, MonetaryValueModel totalGrossAmount, EmbeddedUnitGroupModel unitGroup, IList<ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason> actions = default(IList<ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason>), IList<ReservationServiceModel> includedServices = default(IList<ReservationServiceModel>), EmbeddedUnitModel unit = default(EmbeddedUnitModel))
        {
            Actions = actions;
            BaseAmount = baseAmount;
            FromProperty = fromProperty;
            IncludedServices = includedServices;
            RatePlan = ratePlan;
            ServiceDate = serviceDate;
            To = to;
            TotalGrossAmount = totalGrossAmount;
            Unit = unit;
            UnitGroup = unitGroup;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the list of actions allowed for this time slice
        /// </summary>
        [JsonProperty(PropertyName = "actions")]
        public IList<ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason> Actions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "baseAmount")]
        public AmountModel BaseAmount { get; set; }

        /// <summary>
        /// Gets or sets the start date and time for this time slice&amp;lt;br
        /// /&amp;gt;A date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public System.DateTime FromProperty { get; set; }

        /// <summary>
        /// Gets or sets the list of services included in the rate plan
        /// (package elements)
        /// </summary>
        [JsonProperty(PropertyName = "includedServices")]
        public IList<ReservationServiceModel> IncludedServices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ratePlan")]
        public EmbeddedRatePlanModel RatePlan { get; set; }

        /// <summary>
        /// Gets or sets the service date for this time slice
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "serviceDate")]
        public System.DateTime ServiceDate { get; set; }

        /// <summary>
        /// Gets or sets the end date and time for this time slice&amp;lt;br
        /// /&amp;gt;A date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "to")]
        public System.DateTime To { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalGrossAmount")]
        public MonetaryValueModel TotalGrossAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public EmbeddedUnitModel Unit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unitGroup")]
        public EmbeddedUnitGroupModel UnitGroup { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BaseAmount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BaseAmount");
            }
            if (RatePlan == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RatePlan");
            }
            if (TotalGrossAmount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TotalGrossAmount");
            }
            if (UnitGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UnitGroup");
            }
            if (Actions != null)
            {
                foreach (var element in Actions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BaseAmount != null)
            {
                BaseAmount.Validate();
            }
            if (IncludedServices != null)
            {
                foreach (var element1 in IncludedServices)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (RatePlan != null)
            {
                RatePlan.Validate();
            }
            if (TotalGrossAmount != null)
            {
                TotalGrossAmount.Validate();
            }
            if (Unit != null)
            {
                Unit.Validate();
            }
            if (UnitGroup != null)
            {
                UnitGroup.Validate();
            }
        }
    }
}
