// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// With this request you can pick up a reservation
    /// </summary>
    public partial class PickUpReservationModel
    {
        /// <summary>
        /// Initializes a new instance of the PickUpReservationModel class.
        /// </summary>
        public PickUpReservationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PickUpReservationModel class.
        /// </summary>
        /// <param name="adults">Number of adults</param>
        /// <param name="arrival">Date of arrival and the optional time with
        /// UTC offset&lt;br /&gt;Specify either a pure date or a date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="blockId">ID of the block</param>
        /// <param name="departure">Date of departure and the optional time
        /// with UTC offset&lt;br /&gt;Specify either a pure date or a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="additionalGuests">Additional guests of the
        /// reservation.</param>
        /// <param name="childrenAges">The ages of the children</param>
        /// <param name="comment">Additional information and comments</param>
        /// <param name="guestComment">Additional information and comment by
        /// the guest</param>
        /// <param name="primaryGuest">The primary guest of the reservation.
        /// If no guest was set, the booker is used.</param>
        /// <param name="services">Additional services (extras, add-ons) that
        /// should be added to the reservation</param>
        /// <param name="travelPurpose">The purpose of the trip, leisure or
        /// business. Possible values include: 'Business', 'Leisure'</param>
        public PickUpReservationModel(int adults, string arrival, string blockId, string departure, IList<GuestModel> additionalGuests = default(IList<GuestModel>), IList<int?> childrenAges = default(IList<int?>), string comment = default(string), string guestComment = default(string), GuestModel primaryGuest = default(GuestModel), IList<BookReservationServiceModel> services = default(IList<BookReservationServiceModel>), string travelPurpose = default(string))
        {
            AdditionalGuests = additionalGuests;
            Adults = adults;
            Arrival = arrival;
            BlockId = blockId;
            ChildrenAges = childrenAges;
            Comment = comment;
            Departure = departure;
            GuestComment = guestComment;
            PrimaryGuest = primaryGuest;
            Services = services;
            TravelPurpose = travelPurpose;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets additional guests of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "additionalGuests")]
        public IList<GuestModel> AdditionalGuests { get; set; }

        /// <summary>
        /// Gets or sets number of adults
        /// </summary>
        [JsonProperty(PropertyName = "adults")]
        public int Adults { get; set; }

        /// <summary>
        /// Gets or sets date of arrival and the optional time with UTC
        /// offset&amp;lt;br /&amp;gt;Specify either a pure date or a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "arrival")]
        public string Arrival { get; set; }

        /// <summary>
        /// Gets or sets ID of the block
        /// </summary>
        [JsonProperty(PropertyName = "blockId")]
        public string BlockId { get; set; }

        /// <summary>
        /// Gets or sets the ages of the children
        /// </summary>
        [JsonProperty(PropertyName = "childrenAges")]
        public IList<int?> ChildrenAges { get; set; }

        /// <summary>
        /// Gets or sets additional information and comments
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets date of departure and the optional time with UTC
        /// offset&amp;lt;br /&amp;gt;Specify either a pure date or a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "departure")]
        public string Departure { get; set; }

        /// <summary>
        /// Gets or sets additional information and comment by the guest
        /// </summary>
        [JsonProperty(PropertyName = "guestComment")]
        public string GuestComment { get; set; }

        /// <summary>
        /// Gets or sets the primary guest of the reservation.
        /// If no guest was set, the booker is used.
        /// </summary>
        [JsonProperty(PropertyName = "primaryGuest")]
        public GuestModel PrimaryGuest { get; set; }

        /// <summary>
        /// Gets or sets additional services (extras, add-ons) that should be
        /// added to the reservation
        /// </summary>
        [JsonProperty(PropertyName = "services")]
        public IList<BookReservationServiceModel> Services { get; set; }

        /// <summary>
        /// Gets or sets the purpose of the trip, leisure or business. Possible
        /// values include: 'Business', 'Leisure'
        /// </summary>
        [JsonProperty(PropertyName = "travelPurpose")]
        public string TravelPurpose { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Arrival == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Arrival");
            }
            if (BlockId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BlockId");
            }
            if (Departure == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Departure");
            }
            if (AdditionalGuests != null)
            {
                foreach (var element in AdditionalGuests)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (PrimaryGuest != null)
            {
                PrimaryGuest.Validate();
            }
            if (Services != null)
            {
                foreach (var element1 in Services)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
