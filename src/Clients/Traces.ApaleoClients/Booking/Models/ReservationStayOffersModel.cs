// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ReservationStayOffersModel
    {
        /// <summary>
        /// Initializes a new instance of the ReservationStayOffersModel class.
        /// </summary>
        public ReservationStayOffersModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReservationStayOffersModel class.
        /// </summary>
        /// <param name="offers">List of offered unit groups with rates</param>
        public ReservationStayOffersModel(EmbeddedPropertyModel property, IList<ReservationStayOfferModel> offers)
        {
            Property = property;
            Offers = offers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "property")]
        public EmbeddedPropertyModel Property { get; set; }

        /// <summary>
        /// Gets or sets list of offered unit groups with rates
        /// </summary>
        [JsonProperty(PropertyName = "offers")]
        public IList<ReservationStayOfferModel> Offers { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Property == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Property");
            }
            if (Offers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Offers");
            }
            if (Property != null)
            {
                Property.Validate();
            }
            if (Offers != null)
            {
                foreach (var element in Offers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
