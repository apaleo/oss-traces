// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RateRestrictionsModel
    {
        /// <summary>
        /// Initializes a new instance of the RateRestrictionsModel class.
        /// </summary>
        public RateRestrictionsModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RateRestrictionsModel class.
        /// </summary>
        /// <param name="closed">Whether the rate can be booked for a
        /// stay-through reservation</param>
        /// <param name="closedOnArrival">Whether the rate can be booked on the
        /// reservation's arrival date</param>
        /// <param name="closedOnDeparture">Whether the rate can be booked on
        /// the reservation's departure date</param>
        /// <param name="minLengthOfStay">The minimum length of stay in order
        /// to book the rate. If at least this number
        /// of time slices are covered by the stay duration the rate will be
        /// offered.</param>
        /// <param name="maxLengthOfStay">The maximum length of stay in order
        /// to book the rate. If not more than this number
        /// of time slices are covered by the stay duration the rate will be
        /// offered.</param>
        public RateRestrictionsModel(bool closed, bool closedOnArrival, bool closedOnDeparture, int? minLengthOfStay = default(int?), int? maxLengthOfStay = default(int?))
        {
            MinLengthOfStay = minLengthOfStay;
            MaxLengthOfStay = maxLengthOfStay;
            Closed = closed;
            ClosedOnArrival = closedOnArrival;
            ClosedOnDeparture = closedOnDeparture;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the minimum length of stay in order to book the rate.
        /// If at least this number
        /// of time slices are covered by the stay duration the rate will be
        /// offered.
        /// </summary>
        [JsonProperty(PropertyName = "minLengthOfStay")]
        public int? MinLengthOfStay { get; set; }

        /// <summary>
        /// Gets or sets the maximum length of stay in order to book the rate.
        /// If not more than this number
        /// of time slices are covered by the stay duration the rate will be
        /// offered.
        /// </summary>
        [JsonProperty(PropertyName = "maxLengthOfStay")]
        public int? MaxLengthOfStay { get; set; }

        /// <summary>
        /// Gets or sets whether the rate can be booked for a stay-through
        /// reservation
        /// </summary>
        [JsonProperty(PropertyName = "closed")]
        public bool Closed { get; set; }

        /// <summary>
        /// Gets or sets whether the rate can be booked on the reservation's
        /// arrival date
        /// </summary>
        [JsonProperty(PropertyName = "closedOnArrival")]
        public bool ClosedOnArrival { get; set; }

        /// <summary>
        /// Gets or sets whether the rate can be booked on the reservation's
        /// departure date
        /// </summary>
        [JsonProperty(PropertyName = "closedOnDeparture")]
        public bool ClosedOnDeparture { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MinLengthOfStay != null)
            {
                if (MinLengthOfStay > 2147483647)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "MinLengthOfStay", 2147483647);
                }
                if (MinLengthOfStay < 1)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "MinLengthOfStay", 1);
                }
            }
            if (MaxLengthOfStay != null)
            {
                if (MaxLengthOfStay > 2147483647)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxLengthOfStay", 2147483647);
                }
                if (MaxLengthOfStay < 1)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxLengthOfStay", 1);
                }
            }
        }
    }
}
