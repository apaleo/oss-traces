// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OfferFeeModel
    {
        /// <summary>
        /// Initializes a new instance of the OfferFeeModel class.
        /// </summary>
        public OfferFeeModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OfferFeeModel class.
        /// </summary>
        /// <param name="id">The fee id</param>
        /// <param name="code">The code for the fee</param>
        /// <param name="name">The name for the fee</param>
        public OfferFeeModel(string id, string code, string name, AmountModel totalAmount)
        {
            Id = id;
            Code = code;
            Name = name;
            TotalAmount = totalAmount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the fee id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the code for the fee
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the name for the fee
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalAmount")]
        public AmountModel TotalAmount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (TotalAmount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TotalAmount");
            }
            if (TotalAmount != null)
            {
                TotalAmount.Validate();
            }
        }
    }
}
