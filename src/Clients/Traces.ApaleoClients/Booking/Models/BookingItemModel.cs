// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A booking holds all shared metadata for a set of reservations
    /// </summary>
    public partial class BookingItemModel
    {
        /// <summary>
        /// Initializes a new instance of the BookingItemModel class.
        /// </summary>
        public BookingItemModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BookingItemModel class.
        /// </summary>
        /// <param name="booker">The person creating the booking.</param>
        /// <param name="created">Date of creation&lt;br /&gt;Specify a date
        /// and time (without fractional second part) in UTC or with UTC offset
        /// as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="id">Booking id</param>
        /// <param name="modified">Date of last modification&lt;br /&gt;Specify
        /// a date and time (without fractional second part) in UTC or with UTC
        /// offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="bookerComment">Additional information and comment by
        /// the booker</param>
        /// <param name="comment">Additional information and comments</param>
        /// <param name="groupId">Group id</param>
        /// <param name="paymentAccount">Payment information</param>
        /// <param name="reservations">Reservations within this booking</param>
        public BookingItemModel(BookerModel booker, System.DateTime created, string id, System.DateTime modified, string bookerComment = default(string), string comment = default(string), string groupId = default(string), PaymentAccountModel paymentAccount = default(PaymentAccountModel), IList<BookingReservationModel> reservations = default(IList<BookingReservationModel>))
        {
            Booker = booker;
            BookerComment = bookerComment;
            Comment = comment;
            Created = created;
            GroupId = groupId;
            Id = id;
            Modified = modified;
            PaymentAccount = paymentAccount;
            Reservations = reservations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the person creating the booking.
        /// </summary>
        [JsonProperty(PropertyName = "booker")]
        public BookerModel Booker { get; set; }

        /// <summary>
        /// Gets or sets additional information and comment by the booker
        /// </summary>
        [JsonProperty(PropertyName = "bookerComment")]
        public string BookerComment { get; set; }

        /// <summary>
        /// Gets or sets additional information and comments
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets date of creation&amp;lt;br /&amp;gt;Specify a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime Created { get; set; }

        /// <summary>
        /// Gets or sets group id
        /// </summary>
        [JsonProperty(PropertyName = "groupId")]
        public string GroupId { get; set; }

        /// <summary>
        /// Gets or sets booking id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets date of last modification&amp;lt;br /&amp;gt;Specify a
        /// date and time (without fractional second part) in UTC or with UTC
        /// offset as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "modified")]
        public System.DateTime Modified { get; set; }

        /// <summary>
        /// Gets or sets payment information
        /// </summary>
        [JsonProperty(PropertyName = "paymentAccount")]
        public PaymentAccountModel PaymentAccount { get; set; }

        /// <summary>
        /// Gets or sets reservations within this booking
        /// </summary>
        [JsonProperty(PropertyName = "reservations")]
        public IList<BookingReservationModel> Reservations { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Booker == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Booker");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Booker != null)
            {
                Booker.Validate();
            }
            if (PaymentAccount != null)
            {
                PaymentAccount.Validate();
            }
            if (Reservations != null)
            {
                foreach (var element in Reservations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
