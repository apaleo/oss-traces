// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TimeSliceOfferItemModel
    {
        /// <summary>
        /// Initializes a new instance of the TimeSliceOfferItemModel class.
        /// </summary>
        public TimeSliceOfferItemModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeSliceOfferItemModel class.
        /// </summary>
        /// <param name="available">The number of available units for the
        /// offer</param>
        /// <param name="minGuaranteeType">The minimum guarantee type for the
        /// offer. Possible values include: 'PM6Hold', 'CreditCard',
        /// 'Prepayment', 'Company', 'Ota'</param>
        /// <param name="prices">The prices for this offer</param>
        public TimeSliceOfferItemModel(EmbeddedUnitGroupModel unitGroup, int available, GuaranteeType? minGuaranteeType = default(GuaranteeType?), PeriodModel minAdvance = default(PeriodModel), PeriodModel maxAdvance = default(PeriodModel), RateRestrictionsModel restrictions = default(RateRestrictionsModel), IList<PerOccupancyPriceItemModel> prices = default(IList<PerOccupancyPriceItemModel>))
        {
            UnitGroup = unitGroup;
            MinGuaranteeType = minGuaranteeType;
            MinAdvance = minAdvance;
            MaxAdvance = maxAdvance;
            Available = available;
            Restrictions = restrictions;
            Prices = prices;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unitGroup")]
        public EmbeddedUnitGroupModel UnitGroup { get; set; }

        /// <summary>
        /// Gets or sets the minimum guarantee type for the offer. Possible
        /// values include: 'PM6Hold', 'CreditCard', 'Prepayment', 'Company',
        /// 'Ota'
        /// </summary>
        [JsonProperty(PropertyName = "minGuaranteeType")]
        public GuaranteeType? MinGuaranteeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "minAdvance")]
        public PeriodModel MinAdvance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxAdvance")]
        public PeriodModel MaxAdvance { get; set; }

        /// <summary>
        /// Gets or sets the number of available units for the offer
        /// </summary>
        [JsonProperty(PropertyName = "available")]
        public int Available { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "restrictions")]
        public RateRestrictionsModel Restrictions { get; set; }

        /// <summary>
        /// Gets or sets the prices for this offer
        /// </summary>
        [JsonProperty(PropertyName = "prices")]
        public IList<PerOccupancyPriceItemModel> Prices { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UnitGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UnitGroup");
            }
            if (UnitGroup != null)
            {
                UnitGroup.Validate();
            }
            if (Restrictions != null)
            {
                Restrictions.Validate();
            }
            if (Prices != null)
            {
                foreach (var element in Prices)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
