// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CreatePaymentAccountModel
    {
        /// <summary>
        /// Initializes a new instance of the CreatePaymentAccountModel class.
        /// </summary>
        public CreatePaymentAccountModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreatePaymentAccountModel class.
        /// </summary>
        /// <param name="accountHolder">The account holder (e.g. card
        /// holder)</param>
        /// <param name="accountNumber">The account number (e.g. masked credit
        /// card number or last 4 digits)</param>
        /// <param name="expiryMonth">The credit card's expiration
        /// month</param>
        /// <param name="expiryYear">The credit card's expiration year</param>
        /// <param name="paymentMethod">The payment method (e.g. visa)</param>
        /// <param name="isVirtual">Indicates if the payment account is a
        /// virtual credit card. If not specified it defaults to
        /// 'false'</param>
        /// <param name="payerEmail">The email address of the shopper /
        /// customer</param>
        /// <param name="payerReference">The reference used to uniquely
        /// identify the shopper (e.g. user ID or account ID). Used for
        /// recurring payments</param>
        /// <param name="transactionReference">The reference of a payment
        /// transaction. This should be set when a payment transaction has been
        /// already initiated and should be completed upon reservation
        /// creation.</param>
        public CreatePaymentAccountModel(string accountHolder, string accountNumber, string expiryMonth, string expiryYear, string paymentMethod, bool? isVirtual = default(bool?), string payerEmail = default(string), string payerReference = default(string), string transactionReference = default(string))
        {
            AccountHolder = accountHolder;
            AccountNumber = accountNumber;
            ExpiryMonth = expiryMonth;
            ExpiryYear = expiryYear;
            IsVirtual = isVirtual;
            PayerEmail = payerEmail;
            PayerReference = payerReference;
            PaymentMethod = paymentMethod;
            TransactionReference = transactionReference;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the account holder (e.g. card holder)
        /// </summary>
        [JsonProperty(PropertyName = "accountHolder")]
        public string AccountHolder { get; set; }

        /// <summary>
        /// Gets or sets the account number (e.g. masked credit card number or
        /// last 4 digits)
        /// </summary>
        [JsonProperty(PropertyName = "accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets the credit card's expiration month
        /// </summary>
        [JsonProperty(PropertyName = "expiryMonth")]
        public string ExpiryMonth { get; set; }

        /// <summary>
        /// Gets or sets the credit card's expiration year
        /// </summary>
        [JsonProperty(PropertyName = "expiryYear")]
        public string ExpiryYear { get; set; }

        /// <summary>
        /// Gets or sets indicates if the payment account is a virtual credit
        /// card. If not specified it defaults to 'false'
        /// </summary>
        [JsonProperty(PropertyName = "isVirtual")]
        public bool? IsVirtual { get; set; }

        /// <summary>
        /// Gets or sets the email address of the shopper / customer
        /// </summary>
        [JsonProperty(PropertyName = "payerEmail")]
        public string PayerEmail { get; set; }

        /// <summary>
        /// Gets or sets the reference used to uniquely identify the shopper
        /// (e.g. user ID or account ID). Used for recurring payments
        /// </summary>
        [JsonProperty(PropertyName = "payerReference")]
        public string PayerReference { get; set; }

        /// <summary>
        /// Gets or sets the payment method (e.g. visa)
        /// </summary>
        [JsonProperty(PropertyName = "paymentMethod")]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or sets the reference of a payment transaction. This should be
        /// set when a payment transaction has been already initiated and
        /// should be completed upon reservation creation.
        /// </summary>
        [JsonProperty(PropertyName = "transactionReference")]
        public string TransactionReference { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AccountHolder == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountHolder");
            }
            if (AccountNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountNumber");
            }
            if (ExpiryMonth == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExpiryMonth");
            }
            if (ExpiryYear == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExpiryYear");
            }
            if (PaymentMethod == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PaymentMethod");
            }
        }
    }
}
