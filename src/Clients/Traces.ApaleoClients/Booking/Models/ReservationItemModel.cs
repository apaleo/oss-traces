// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ReservationItemModel
    {
        /// <summary>
        /// Initializes a new instance of the ReservationItemModel class.
        /// </summary>
        public ReservationItemModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReservationItemModel class.
        /// </summary>
        /// <param name="id">Reservation id</param>
        /// <param name="bookingId">Booking id</param>
        /// <param name="status">Status of the reservation. Possible values
        /// include: 'Confirmed', 'InHouse', 'CheckedOut', 'Canceled',
        /// 'NoShow'</param>
        /// <param name="arrival">Date of arrival&lt;br /&gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="departure">Date of departure&lt;br /&gt;A date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="created">Date of creation&lt;br /&gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="modified">Date of last modification&lt;br /&gt;A date
        /// and time (without fractional second part) in UTC or with UTC offset
        /// as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="adults">Number of adults</param>
        /// <param name="channelCode">Channel code. Possible values include:
        /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia',
        /// 'Homelike', 'Hrs'</param>
        /// <param name="guaranteeType">The strongest guarantee for the rate
        /// plans booked in this reservation. Possible values include:
        /// 'PM6Hold', 'CreditCard', 'Prepayment', 'Company', 'Ota'</param>
        /// <param name="hasCityTax">Whether the city tax has already been
        /// added to the reservation. Set to false, if the property does not
        /// have city tax configured</param>
        /// <param name="blockId">Block id</param>
        /// <param name="groupName">Name of the group</param>
        /// <param name="checkInTime">Time of check-in&lt;br /&gt;A date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="checkOutTime">Time of check-out&lt;br /&gt;A date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="cancellationTime">Time of cancellation, if the
        /// reservation was canceled&lt;br /&gt;A date and time (without
        /// fractional second part) in UTC or with UTC offset as defined in
        /// &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="noShowTime">Time of setting no-show reservation
        /// status&lt;br /&gt;A date and time (without fractional second part)
        /// in UTC or with UTC offset as defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="childrenAges">The ages of the children</param>
        /// <param name="comment">Additional information and comments</param>
        /// <param name="guestComment">Additional information and comment by
        /// the guest</param>
        /// <param name="externalCode">Code in external system</param>
        /// <param name="source">Source of the reservation (e.g Hotels.com,
        /// Orbitz, etc.)</param>
        /// <param name="additionalGuests">Additional guests of the
        /// reservation.</param>
        /// <param name="travelPurpose">The purpose of the trip, leisure or
        /// business. Possible values include: 'Business', 'Leisure'</param>
        /// <param name="assignedUnits">The list of units assigned to this
        /// reservation</param>
        /// <param name="timeSlices">The list of time slices with the reserved
        /// units / unit groups for the stay</param>
        /// <param name="services">The list of additional services (extras,
        /// add-ons) reserved for the stay</param>
        /// <param name="validationMessages">Validation rules are applied to
        /// reservations during their lifetime.
        /// For example a reservation that was created while the house or unit
        /// group is already fully booked.
        /// Whenever a rule was or is currently violated, a validation message
        /// will be added to this list.
        /// They can be deleted whenever the hotel staff worked them
        /// off.</param>
        /// <param name="actions">The list of actions for this
        /// reservation</param>
        /// <param name="corporateCode">Corporate code provided during
        /// creation. Used to find offers during amend.</param>
        /// <param name="allFoliosHaveInvoice">Whether all folios of a
        /// reservation have an invoice</param>
        /// <param name="promoCode">The promo code associated with a certain
        /// special offer used to create the reservation</param>
        public ReservationItemModel(string id, string bookingId, ReservationStatus status, EmbeddedPropertyModel property, EmbeddedRatePlanModel ratePlan, EmbeddedUnitGroupModel unitGroup, MonetaryValueModel totalGrossAmount, System.DateTime arrival, System.DateTime departure, System.DateTime created, System.DateTime modified, int adults, ChannelCode channelCode, GuaranteeType guaranteeType, ReservationCancellationFeeModel cancellationFee, ReservationNoShowFeeModel noShowFee, MonetaryValueModel balance, bool hasCityTax, string blockId = default(string), string groupName = default(string), System.DateTime? checkInTime = default(System.DateTime?), System.DateTime? checkOutTime = default(System.DateTime?), System.DateTime? cancellationTime = default(System.DateTime?), System.DateTime? noShowTime = default(System.DateTime?), EmbeddedUnitModel unit = default(EmbeddedUnitModel), IList<int?> childrenAges = default(IList<int?>), string comment = default(string), string guestComment = default(string), string externalCode = default(string), string source = default(string), GuestModel primaryGuest = default(GuestModel), IList<GuestModel> additionalGuests = default(IList<GuestModel>), BookerModel booker = default(BookerModel), PaymentAccountModel paymentAccount = default(PaymentAccountModel), TravelPurpose? travelPurpose = default(TravelPurpose?), IList<ReservationAssignedUnitModel> assignedUnits = default(IList<ReservationAssignedUnitModel>), IList<TimeSliceModel> timeSlices = default(IList<TimeSliceModel>), IList<ReservationServiceItemModel> services = default(IList<ReservationServiceItemModel>), IList<ReservationValidationMessageModel> validationMessages = default(IList<ReservationValidationMessageModel>), IList<ActionModelReservationActionNotAllowedReservationActionReason> actions = default(IList<ActionModelReservationActionNotAllowedReservationActionReason>), EmbeddedCompanyModel company = default(EmbeddedCompanyModel), string corporateCode = default(string), bool? allFoliosHaveInvoice = default(bool?), CommissionModel commission = default(CommissionModel), string promoCode = default(string))
        {
            Id = id;
            BookingId = bookingId;
            BlockId = blockId;
            GroupName = groupName;
            Status = status;
            CheckInTime = checkInTime;
            CheckOutTime = checkOutTime;
            CancellationTime = cancellationTime;
            NoShowTime = noShowTime;
            Property = property;
            RatePlan = ratePlan;
            UnitGroup = unitGroup;
            Unit = unit;
            TotalGrossAmount = totalGrossAmount;
            Arrival = arrival;
            Departure = departure;
            Created = created;
            Modified = modified;
            Adults = adults;
            ChildrenAges = childrenAges;
            Comment = comment;
            GuestComment = guestComment;
            ExternalCode = externalCode;
            ChannelCode = channelCode;
            Source = source;
            PrimaryGuest = primaryGuest;
            AdditionalGuests = additionalGuests;
            Booker = booker;
            PaymentAccount = paymentAccount;
            GuaranteeType = guaranteeType;
            CancellationFee = cancellationFee;
            NoShowFee = noShowFee;
            TravelPurpose = travelPurpose;
            Balance = balance;
            AssignedUnits = assignedUnits;
            TimeSlices = timeSlices;
            Services = services;
            ValidationMessages = validationMessages;
            Actions = actions;
            Company = company;
            CorporateCode = corporateCode;
            AllFoliosHaveInvoice = allFoliosHaveInvoice;
            HasCityTax = hasCityTax;
            Commission = commission;
            PromoCode = promoCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets reservation id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets booking id
        /// </summary>
        [JsonProperty(PropertyName = "bookingId")]
        public string BookingId { get; set; }

        /// <summary>
        /// Gets or sets block id
        /// </summary>
        [JsonProperty(PropertyName = "blockId")]
        public string BlockId { get; set; }

        /// <summary>
        /// Gets or sets name of the group
        /// </summary>
        [JsonProperty(PropertyName = "groupName")]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or sets status of the reservation. Possible values include:
        /// 'Confirmed', 'InHouse', 'CheckedOut', 'Canceled', 'NoShow'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public ReservationStatus Status { get; set; }

        /// <summary>
        /// Gets or sets time of check-in&amp;lt;br /&amp;gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "checkInTime")]
        public System.DateTime? CheckInTime { get; set; }

        /// <summary>
        /// Gets or sets time of check-out&amp;lt;br /&amp;gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "checkOutTime")]
        public System.DateTime? CheckOutTime { get; set; }

        /// <summary>
        /// Gets or sets time of cancellation, if the reservation was
        /// canceled&amp;lt;br /&amp;gt;A date and time (without fractional
        /// second part) in UTC or with UTC offset as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "cancellationTime")]
        public System.DateTime? CancellationTime { get; set; }

        /// <summary>
        /// Gets or sets time of setting no-show reservation status&amp;lt;br
        /// /&amp;gt;A date and time (without fractional second part) in UTC or
        /// with UTC offset as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "noShowTime")]
        public System.DateTime? NoShowTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "property")]
        public EmbeddedPropertyModel Property { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ratePlan")]
        public EmbeddedRatePlanModel RatePlan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unitGroup")]
        public EmbeddedUnitGroupModel UnitGroup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public EmbeddedUnitModel Unit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalGrossAmount")]
        public MonetaryValueModel TotalGrossAmount { get; set; }

        /// <summary>
        /// Gets or sets date of arrival&amp;lt;br /&amp;gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "arrival")]
        public System.DateTime Arrival { get; set; }

        /// <summary>
        /// Gets or sets date of departure&amp;lt;br /&amp;gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "departure")]
        public System.DateTime Departure { get; set; }

        /// <summary>
        /// Gets or sets date of creation&amp;lt;br /&amp;gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime Created { get; set; }

        /// <summary>
        /// Gets or sets date of last modification&amp;lt;br /&amp;gt;A date
        /// and time (without fractional second part) in UTC or with UTC offset
        /// as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "modified")]
        public System.DateTime Modified { get; set; }

        /// <summary>
        /// Gets or sets number of adults
        /// </summary>
        [JsonProperty(PropertyName = "adults")]
        public int Adults { get; set; }

        /// <summary>
        /// Gets or sets the ages of the children
        /// </summary>
        [JsonProperty(PropertyName = "childrenAges")]
        public IList<int?> ChildrenAges { get; set; }

        /// <summary>
        /// Gets or sets additional information and comments
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets additional information and comment by the guest
        /// </summary>
        [JsonProperty(PropertyName = "guestComment")]
        public string GuestComment { get; set; }

        /// <summary>
        /// Gets or sets code in external system
        /// </summary>
        [JsonProperty(PropertyName = "externalCode")]
        public string ExternalCode { get; set; }

        /// <summary>
        /// Gets or sets channel code. Possible values include: 'Direct',
        /// 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike', 'Hrs'
        /// </summary>
        [JsonProperty(PropertyName = "channelCode")]
        public ChannelCode ChannelCode { get; set; }

        /// <summary>
        /// Gets or sets source of the reservation (e.g Hotels.com, Orbitz,
        /// etc.)
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "primaryGuest")]
        public GuestModel PrimaryGuest { get; set; }

        /// <summary>
        /// Gets or sets additional guests of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "additionalGuests")]
        public IList<GuestModel> AdditionalGuests { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "booker")]
        public BookerModel Booker { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "paymentAccount")]
        public PaymentAccountModel PaymentAccount { get; set; }

        /// <summary>
        /// Gets or sets the strongest guarantee for the rate plans booked in
        /// this reservation. Possible values include: 'PM6Hold', 'CreditCard',
        /// 'Prepayment', 'Company', 'Ota'
        /// </summary>
        [JsonProperty(PropertyName = "guaranteeType")]
        public GuaranteeType GuaranteeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cancellationFee")]
        public ReservationCancellationFeeModel CancellationFee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "noShowFee")]
        public ReservationNoShowFeeModel NoShowFee { get; set; }

        /// <summary>
        /// Gets or sets the purpose of the trip, leisure or business. Possible
        /// values include: 'Business', 'Leisure'
        /// </summary>
        [JsonProperty(PropertyName = "travelPurpose")]
        public TravelPurpose? TravelPurpose { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "balance")]
        public MonetaryValueModel Balance { get; set; }

        /// <summary>
        /// Gets or sets the list of units assigned to this reservation
        /// </summary>
        [JsonProperty(PropertyName = "assignedUnits")]
        public IList<ReservationAssignedUnitModel> AssignedUnits { get; set; }

        /// <summary>
        /// Gets or sets the list of time slices with the reserved units / unit
        /// groups for the stay
        /// </summary>
        [JsonProperty(PropertyName = "timeSlices")]
        public IList<TimeSliceModel> TimeSlices { get; set; }

        /// <summary>
        /// Gets or sets the list of additional services (extras, add-ons)
        /// reserved for the stay
        /// </summary>
        [JsonProperty(PropertyName = "services")]
        public IList<ReservationServiceItemModel> Services { get; set; }

        /// <summary>
        /// Gets or sets validation rules are applied to reservations during
        /// their lifetime.
        /// For example a reservation that was created while the house or unit
        /// group is already fully booked.
        /// Whenever a rule was or is currently violated, a validation message
        /// will be added to this list.
        /// They can be deleted whenever the hotel staff worked them off.
        /// </summary>
        [JsonProperty(PropertyName = "validationMessages")]
        public IList<ReservationValidationMessageModel> ValidationMessages { get; set; }

        /// <summary>
        /// Gets or sets the list of actions for this reservation
        /// </summary>
        [JsonProperty(PropertyName = "actions")]
        public IList<ActionModelReservationActionNotAllowedReservationActionReason> Actions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "company")]
        public EmbeddedCompanyModel Company { get; set; }

        /// <summary>
        /// Gets or sets corporate code provided during creation. Used to find
        /// offers during amend.
        /// </summary>
        [JsonProperty(PropertyName = "corporateCode")]
        public string CorporateCode { get; set; }

        /// <summary>
        /// Gets or sets whether all folios of a reservation have an invoice
        /// </summary>
        [JsonProperty(PropertyName = "allFoliosHaveInvoice")]
        public bool? AllFoliosHaveInvoice { get; set; }

        /// <summary>
        /// Gets or sets whether the city tax has already been added to the
        /// reservation. Set to false, if the property does not have city tax
        /// configured
        /// </summary>
        [JsonProperty(PropertyName = "hasCityTax")]
        public bool HasCityTax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "commission")]
        public CommissionModel Commission { get; set; }

        /// <summary>
        /// Gets or sets the promo code associated with a certain special offer
        /// used to create the reservation
        /// </summary>
        [JsonProperty(PropertyName = "promoCode")]
        public string PromoCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (BookingId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BookingId");
            }
            if (Property == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Property");
            }
            if (RatePlan == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RatePlan");
            }
            if (UnitGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UnitGroup");
            }
            if (TotalGrossAmount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TotalGrossAmount");
            }
            if (CancellationFee == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CancellationFee");
            }
            if (NoShowFee == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NoShowFee");
            }
            if (Balance == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Balance");
            }
            if (Property != null)
            {
                Property.Validate();
            }
            if (RatePlan != null)
            {
                RatePlan.Validate();
            }
            if (UnitGroup != null)
            {
                UnitGroup.Validate();
            }
            if (Unit != null)
            {
                Unit.Validate();
            }
            if (TotalGrossAmount != null)
            {
                TotalGrossAmount.Validate();
            }
            if (PrimaryGuest != null)
            {
                PrimaryGuest.Validate();
            }
            if (AdditionalGuests != null)
            {
                foreach (var element in AdditionalGuests)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Booker != null)
            {
                Booker.Validate();
            }
            if (PaymentAccount != null)
            {
                PaymentAccount.Validate();
            }
            if (CancellationFee != null)
            {
                CancellationFee.Validate();
            }
            if (NoShowFee != null)
            {
                NoShowFee.Validate();
            }
            if (Balance != null)
            {
                Balance.Validate();
            }
            if (AssignedUnits != null)
            {
                foreach (var element1 in AssignedUnits)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (TimeSlices != null)
            {
                foreach (var element2 in TimeSlices)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Services != null)
            {
                foreach (var element3 in Services)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (ValidationMessages != null)
            {
                foreach (var element4 in ValidationMessages)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
            if (Actions != null)
            {
                foreach (var element5 in Actions)
                {
                    if (element5 != null)
                    {
                        element5.Validate();
                    }
                }
            }
            if (Company != null)
            {
                Company.Validate();
            }
            if (Commission != null)
            {
                Commission.Validate();
            }
        }
    }
}
