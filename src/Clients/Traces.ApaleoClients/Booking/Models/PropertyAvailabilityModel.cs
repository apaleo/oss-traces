// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PropertyAvailabilityModel
    {
        /// <summary>
        /// Initializes a new instance of the PropertyAvailabilityModel class.
        /// </summary>
        public PropertyAvailabilityModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PropertyAvailabilityModel class.
        /// </summary>
        /// <param name="houseCount">The number of units physically existing
        /// excluding the ones which are out of inventory</param>
        /// <param name="occupancy">The percent value indicating the
        /// occupancy</param>
        /// <param name="physicalCount">The number of units physically existing
        /// on the property</param>
        /// <param name="sellableCount">The number of units available for
        /// selling. This is the house count excluding the out of order and the
        /// already sold units</param>
        /// <param name="soldCount">The number of sold units including units
        /// picked up from blocks</param>
        public PropertyAvailabilityModel(BlockUnitsModel block, int houseCount, MaintenanceModel maintenance, double occupancy, int physicalCount, int sellableCount, int soldCount)
        {
            Block = block;
            HouseCount = houseCount;
            Maintenance = maintenance;
            Occupancy = occupancy;
            PhysicalCount = physicalCount;
            SellableCount = sellableCount;
            SoldCount = soldCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "block")]
        public BlockUnitsModel Block { get; set; }

        /// <summary>
        /// Gets or sets the number of units physically existing excluding the
        /// ones which are out of inventory
        /// </summary>
        [JsonProperty(PropertyName = "houseCount")]
        public int HouseCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maintenance")]
        public MaintenanceModel Maintenance { get; set; }

        /// <summary>
        /// Gets or sets the percent value indicating the occupancy
        /// </summary>
        [JsonProperty(PropertyName = "occupancy")]
        public double Occupancy { get; set; }

        /// <summary>
        /// Gets or sets the number of units physically existing on the
        /// property
        /// </summary>
        [JsonProperty(PropertyName = "physicalCount")]
        public int PhysicalCount { get; set; }

        /// <summary>
        /// Gets or sets the number of units available for selling. This is the
        /// house count excluding the out of order and the already sold units
        /// </summary>
        [JsonProperty(PropertyName = "sellableCount")]
        public int SellableCount { get; set; }

        /// <summary>
        /// Gets or sets the number of sold units including units picked up
        /// from blocks
        /// </summary>
        [JsonProperty(PropertyName = "soldCount")]
        public int SoldCount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Block == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Block");
            }
            if (Maintenance == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Maintenance");
            }
            if (Block != null)
            {
                Block.Validate();
            }
            if (Maintenance != null)
            {
                Maintenance.Validate();
            }
        }
    }
}
