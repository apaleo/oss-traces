// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ReservationCancellationFeeModel
    {
        /// <summary>
        /// Initializes a new instance of the ReservationCancellationFeeModel
        /// class.
        /// </summary>
        public ReservationCancellationFeeModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReservationCancellationFeeModel
        /// class.
        /// </summary>
        /// <param name="code">The code of the cancellation policy
        /// applied</param>
        /// <param name="description">The description of the cancellation
        /// policy applied</param>
        /// <param name="dueDateTime">The date and time the cancellation fee
        /// will be due. After that time this fee will
        /// be charged in case of cancellation&lt;br /&gt;Specify a date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="fee">The fee amount</param>
        /// <param name="name">The name of the cancellation policy
        /// applied</param>
        public ReservationCancellationFeeModel(string code, string description, System.DateTime dueDateTime, MonetaryValueModel fee, string name)
        {
            Code = code;
            Description = description;
            DueDateTime = dueDateTime;
            Fee = fee;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the code of the cancellation policy applied
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the description of the cancellation policy applied
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the date and time the cancellation fee will be due.
        /// After that time this fee will
        /// be charged in case of cancellation&amp;lt;br /&amp;gt;Specify a
        /// date and time (without fractional second part) in UTC or with UTC
        /// offset as defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "dueDateTime")]
        public System.DateTime DueDateTime { get; set; }

        /// <summary>
        /// Gets or sets the fee amount
        /// </summary>
        [JsonProperty(PropertyName = "fee")]
        public MonetaryValueModel Fee { get; set; }

        /// <summary>
        /// Gets or sets the name of the cancellation policy applied
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (Fee == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fee");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Fee != null)
            {
                Fee.Validate();
            }
        }
    }
}
