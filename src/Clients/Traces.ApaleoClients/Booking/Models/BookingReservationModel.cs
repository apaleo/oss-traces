// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class BookingReservationModel
    {
        /// <summary>
        /// Initializes a new instance of the BookingReservationModel class.
        /// </summary>
        public BookingReservationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BookingReservationModel class.
        /// </summary>
        /// <param name="id">Reservation id</param>
        /// <param name="status">Status of the reservation. Possible values
        /// include: 'Confirmed', 'InHouse', 'CheckedOut', 'Canceled',
        /// 'NoShow'</param>
        /// <param name="channelCode">Channel code. Possible values include:
        /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia',
        /// 'Homelike', 'Hrs'</param>
        /// <param name="arrival">Date of arrival&lt;br /&gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="departure">Date of departure&lt;br /&gt;A date and
        /// time (without fractional second part) in UTC or with UTC offset as
        /// defined in &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="adults">Number of adults</param>
        /// <param name="externalCode">Code in external system</param>
        /// <param name="source">Source of the reservation (e.g Hotels.com,
        /// Orbitz, etc.)</param>
        /// <param name="childrenAges">The ages of the children</param>
        /// <param name="services">The list of additional services (extras,
        /// add-ons) reserved for the stay</param>
        /// <param name="guestComment">Additional information and comment by
        /// the guest</param>
        public BookingReservationModel(string id, ReservationStatus status, ChannelCode channelCode, System.DateTime arrival, System.DateTime departure, int adults, MonetaryValueModel totalGrossAmount, EmbeddedPropertyModel property, EmbeddedRatePlanModel ratePlan, EmbeddedUnitGroupModel unitGroup, ReservationCancellationFeeModel cancellationFee, ReservationNoShowFeeModel noShowFee, string externalCode = default(string), string source = default(string), PaymentAccountModel paymentAccount = default(PaymentAccountModel), IList<int?> childrenAges = default(IList<int?>), IList<ReservationServiceItemModel> services = default(IList<ReservationServiceItemModel>), string guestComment = default(string), EmbeddedCompanyModel company = default(EmbeddedCompanyModel))
        {
            Id = id;
            Status = status;
            ExternalCode = externalCode;
            ChannelCode = channelCode;
            Source = source;
            PaymentAccount = paymentAccount;
            Arrival = arrival;
            Departure = departure;
            Adults = adults;
            ChildrenAges = childrenAges;
            TotalGrossAmount = totalGrossAmount;
            Property = property;
            RatePlan = ratePlan;
            UnitGroup = unitGroup;
            Services = services;
            GuestComment = guestComment;
            CancellationFee = cancellationFee;
            NoShowFee = noShowFee;
            Company = company;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets reservation id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets status of the reservation. Possible values include:
        /// 'Confirmed', 'InHouse', 'CheckedOut', 'Canceled', 'NoShow'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public ReservationStatus Status { get; set; }

        /// <summary>
        /// Gets or sets code in external system
        /// </summary>
        [JsonProperty(PropertyName = "externalCode")]
        public string ExternalCode { get; set; }

        /// <summary>
        /// Gets or sets channel code. Possible values include: 'Direct',
        /// 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike', 'Hrs'
        /// </summary>
        [JsonProperty(PropertyName = "channelCode")]
        public ChannelCode ChannelCode { get; set; }

        /// <summary>
        /// Gets or sets source of the reservation (e.g Hotels.com, Orbitz,
        /// etc.)
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "paymentAccount")]
        public PaymentAccountModel PaymentAccount { get; set; }

        /// <summary>
        /// Gets or sets date of arrival&amp;lt;br /&amp;gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "arrival")]
        public System.DateTime Arrival { get; set; }

        /// <summary>
        /// Gets or sets date of departure&amp;lt;br /&amp;gt;A date and time
        /// (without fractional second part) in UTC or with UTC offset as
        /// defined in &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "departure")]
        public System.DateTime Departure { get; set; }

        /// <summary>
        /// Gets or sets number of adults
        /// </summary>
        [JsonProperty(PropertyName = "adults")]
        public int Adults { get; set; }

        /// <summary>
        /// Gets or sets the ages of the children
        /// </summary>
        [JsonProperty(PropertyName = "childrenAges")]
        public IList<int?> ChildrenAges { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalGrossAmount")]
        public MonetaryValueModel TotalGrossAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "property")]
        public EmbeddedPropertyModel Property { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ratePlan")]
        public EmbeddedRatePlanModel RatePlan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unitGroup")]
        public EmbeddedUnitGroupModel UnitGroup { get; set; }

        /// <summary>
        /// Gets or sets the list of additional services (extras, add-ons)
        /// reserved for the stay
        /// </summary>
        [JsonProperty(PropertyName = "services")]
        public IList<ReservationServiceItemModel> Services { get; set; }

        /// <summary>
        /// Gets or sets additional information and comment by the guest
        /// </summary>
        [JsonProperty(PropertyName = "guestComment")]
        public string GuestComment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cancellationFee")]
        public ReservationCancellationFeeModel CancellationFee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "noShowFee")]
        public ReservationNoShowFeeModel NoShowFee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "company")]
        public EmbeddedCompanyModel Company { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (TotalGrossAmount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TotalGrossAmount");
            }
            if (Property == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Property");
            }
            if (RatePlan == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RatePlan");
            }
            if (UnitGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UnitGroup");
            }
            if (CancellationFee == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CancellationFee");
            }
            if (NoShowFee == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NoShowFee");
            }
            if (PaymentAccount != null)
            {
                PaymentAccount.Validate();
            }
            if (TotalGrossAmount != null)
            {
                TotalGrossAmount.Validate();
            }
            if (Property != null)
            {
                Property.Validate();
            }
            if (RatePlan != null)
            {
                RatePlan.Validate();
            }
            if (UnitGroup != null)
            {
                UnitGroup.Validate();
            }
            if (Services != null)
            {
                foreach (var element in Services)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (CancellationFee != null)
            {
                CancellationFee.Validate();
            }
            if (NoShowFee != null)
            {
                NoShowFee.Validate();
            }
            if (Company != null)
            {
                Company.Validate();
            }
        }
    }
}
