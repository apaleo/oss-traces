// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ReservationAssignedUnitModel
    {
        /// <summary>
        /// Initializes a new instance of the ReservationAssignedUnitModel
        /// class.
        /// </summary>
        public ReservationAssignedUnitModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReservationAssignedUnitModel
        /// class.
        /// </summary>
        /// <param name="timeRanges">The time ranges for which the unit is
        /// assigned to the reservation</param>
        /// <param name="unit">The unit assigned for the time ranges</param>
        public ReservationAssignedUnitModel(IList<ReservationAssignedUnitTimeRangeModel> timeRanges, EmbeddedUnitModel unit)
        {
            TimeRanges = timeRanges;
            Unit = unit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the time ranges for which the unit is assigned to the
        /// reservation
        /// </summary>
        [JsonProperty(PropertyName = "timeRanges")]
        public IList<ReservationAssignedUnitTimeRangeModel> TimeRanges { get; set; }

        /// <summary>
        /// Gets or sets the unit assigned for the time ranges
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public EmbeddedUnitModel Unit { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TimeRanges == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TimeRanges");
            }
            if (Unit == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Unit");
            }
            if (TimeRanges != null)
            {
                foreach (var element in TimeRanges)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Unit != null)
            {
                Unit.Validate();
            }
        }
    }
}
