// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class BookingListModel
    {
        /// <summary>
        /// Initializes a new instance of the BookingListModel class.
        /// </summary>
        public BookingListModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BookingListModel class.
        /// </summary>
        /// <param name="count">Total count of items</param>
        public BookingListModel(IList<BookingItemModel> bookings, long count)
        {
            Bookings = bookings;
            Count = count;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bookings")]
        public IList<BookingItemModel> Bookings { get; set; }

        /// <summary>
        /// Gets or sets total count of items
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public long Count { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Bookings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Bookings");
            }
            if (Bookings != null)
            {
                foreach (var element in Bookings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
