// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AvailableUnitItemModel
    {
        /// <summary>
        /// Initializes a new instance of the AvailableUnitItemModel class.
        /// </summary>
        public AvailableUnitItemModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AvailableUnitItemModel class.
        /// </summary>
        /// <param name="description">The description for the unit</param>
        /// <param name="id">The unit id</param>
        /// <param name="maxPersons">Maximum number of persons for the
        /// unit</param>
        /// <param name="name">The name for the unit</param>
        public AvailableUnitItemModel(string description, string id, int maxPersons, string name, EmbeddedPropertyModel property, AvailableUnitItemStatusModel status, EmbeddedUnitGroupModel unitGroup = default(EmbeddedUnitGroupModel))
        {
            Description = description;
            Id = id;
            MaxPersons = maxPersons;
            Name = name;
            Property = property;
            Status = status;
            UnitGroup = unitGroup;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the description for the unit
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the unit id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets maximum number of persons for the unit
        /// </summary>
        [JsonProperty(PropertyName = "maxPersons")]
        public int MaxPersons { get; set; }

        /// <summary>
        /// Gets or sets the name for the unit
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "property")]
        public EmbeddedPropertyModel Property { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public AvailableUnitItemStatusModel Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unitGroup")]
        public EmbeddedUnitGroupModel UnitGroup { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Property == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Property");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Property != null)
            {
                Property.Validate();
            }
            if (Status != null)
            {
                Status.Validate();
            }
            if (UnitGroup != null)
            {
                UnitGroup.Validate();
            }
        }
    }
}
