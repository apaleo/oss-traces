// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Booking
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BookingApi.
    /// </summary>
    public static partial class BookingApiExtensions
    {
            /// <summary>
            /// Creates a block
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;You must have at least one of these scopes: 'blocks.create,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The details for the block you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object BookingBlocksPost(this IBookingApi operations, CreateBlockModel body, string idempotencyKey = default(string))
            {
                return operations.BookingBlocksPostAsync(body, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a block
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;You must have at least one of these scopes: 'blocks.create,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The details for the block you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBlocksPostAsync(this IBookingApi operations, CreateBlockModel body, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlocksPostWithHttpMessagesAsync(body, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of blocks
            /// </summary>
            /// <remarks>
            /// Returns a list of all blocks, filtered by the specified parameters. If no
            /// parameters are set, returns the entire list.&lt;br&gt;You must have at
            /// least one of these scopes: 'blocks.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Return blocks for the specific group
            /// </param>
            /// <param name='propertyIds'>
            /// Return blocks filtered by properties
            /// </param>
            /// <param name='status'>
            /// Return blocks filtered by statuses
            /// </param>
            /// <param name='unitGroupIds'>
            /// Return blocks with any of the specified unit groups
            /// </param>
            /// <param name='ratePlanIds'>
            /// Return blocks with any of the specified rate plans
            /// </param>
            /// <param name='timeSliceDefinitionIds'>
            /// Return blocks with any of the specified time slice definitions
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Return blocks with any of the specified unit group types
            /// </param>
            /// <param name='timeSliceTemplate'>
            /// The time slice template, defaults to 'over night'. Possible values include:
            /// 'DayUse', 'OverNight'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: actions, timeSlices. All other values will be silently
            /// ignored.
            /// </param>
            public static object BookingBlocksGet(this IBookingApi operations, string groupId = default(string), IList<string> propertyIds = default(IList<string>), IList<BlockStatus?> status = default(IList<BlockStatus?>), IList<string> unitGroupIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>))
            {
                return operations.BookingBlocksGetAsync(groupId, propertyIds, status, unitGroupIds, ratePlanIds, timeSliceDefinitionIds, unitGroupTypes, timeSliceTemplate, fromParameter, to, pageNumber, pageSize, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of blocks
            /// </summary>
            /// <remarks>
            /// Returns a list of all blocks, filtered by the specified parameters. If no
            /// parameters are set, returns the entire list.&lt;br&gt;You must have at
            /// least one of these scopes: 'blocks.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Return blocks for the specific group
            /// </param>
            /// <param name='propertyIds'>
            /// Return blocks filtered by properties
            /// </param>
            /// <param name='status'>
            /// Return blocks filtered by statuses
            /// </param>
            /// <param name='unitGroupIds'>
            /// Return blocks with any of the specified unit groups
            /// </param>
            /// <param name='ratePlanIds'>
            /// Return blocks with any of the specified rate plans
            /// </param>
            /// <param name='timeSliceDefinitionIds'>
            /// Return blocks with any of the specified time slice definitions
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Return blocks with any of the specified unit group types
            /// </param>
            /// <param name='timeSliceTemplate'>
            /// The time slice template, defaults to 'over night'. Possible values include:
            /// 'DayUse', 'OverNight'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: actions, timeSlices. All other values will be silently
            /// ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBlocksGetAsync(this IBookingApi operations, string groupId = default(string), IList<string> propertyIds = default(IList<string>), IList<BlockStatus?> status = default(IList<BlockStatus?>), IList<string> unitGroupIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlocksGetWithHttpMessagesAsync(groupId, propertyIds, status, unitGroupIds, ratePlanIds, timeSliceDefinitionIds, unitGroupTypes, timeSliceTemplate, fromParameter, to, pageNumber, pageSize, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns number of blocks
            /// </summary>
            /// <remarks>
            /// Returns number of blocks matching the filter criteria&lt;br&gt;You must
            /// have at least one of these scopes: 'blocks.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Return blocks for the specific group
            /// </param>
            /// <param name='propertyIds'>
            /// Return blocks filtered by properties
            /// </param>
            /// <param name='status'>
            /// Return blocks filtered by statuses
            /// </param>
            /// <param name='unitGroupIds'>
            /// Return blocks with any of the specified unit groups
            /// </param>
            /// <param name='ratePlanIds'>
            /// Return blocks with any of the specified rate plans
            /// </param>
            /// <param name='timeSliceDefinitionIds'>
            /// Return blocks with any of the specified time slice definitions
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Return blocks with any of the specified unit group types
            /// </param>
            /// <param name='timeSliceTemplate'>
            /// The time slice template, defaults to 'over night'. Possible values include:
            /// 'DayUse', 'OverNight'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            public static object BookingBlockscountGet(this IBookingApi operations, string groupId = default(string), IList<string> propertyIds = default(IList<string>), IList<BlockStatus?> status = default(IList<BlockStatus?>), IList<string> unitGroupIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?))
            {
                return operations.BookingBlockscountGetAsync(groupId, propertyIds, status, unitGroupIds, ratePlanIds, timeSliceDefinitionIds, unitGroupTypes, timeSliceTemplate, fromParameter, to).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns number of blocks
            /// </summary>
            /// <remarks>
            /// Returns number of blocks matching the filter criteria&lt;br&gt;You must
            /// have at least one of these scopes: 'blocks.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Return blocks for the specific group
            /// </param>
            /// <param name='propertyIds'>
            /// Return blocks filtered by properties
            /// </param>
            /// <param name='status'>
            /// Return blocks filtered by statuses
            /// </param>
            /// <param name='unitGroupIds'>
            /// Return blocks with any of the specified unit groups
            /// </param>
            /// <param name='ratePlanIds'>
            /// Return blocks with any of the specified rate plans
            /// </param>
            /// <param name='timeSliceDefinitionIds'>
            /// Return blocks with any of the specified time slice definitions
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Return blocks with any of the specified unit group types
            /// </param>
            /// <param name='timeSliceTemplate'>
            /// The time slice template, defaults to 'over night'. Possible values include:
            /// 'DayUse', 'OverNight'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All blocks that are overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBlockscountGetAsync(this IBookingApi operations, string groupId = default(string), IList<string> propertyIds = default(IList<string>), IList<BlockStatus?> status = default(IList<BlockStatus?>), IList<string> unitGroupIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlockscountGetWithHttpMessagesAsync(groupId, propertyIds, status, unitGroupIds, ratePlanIds, timeSliceDefinitionIds, unitGroupTypes, timeSliceTemplate, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a specific block.
            /// </summary>
            /// <remarks>
            /// Retrieves a block, specified by its ID.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.read, reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: actions, timeSlices. All other values will be silently
            /// ignored.
            /// </param>
            public static object BookingBlocksByIdGet(this IBookingApi operations, string id, IList<string> expand = default(IList<string>))
            {
                return operations.BookingBlocksByIdGetAsync(id, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a specific block.
            /// </summary>
            /// <remarks>
            /// Retrieves a block, specified by its ID.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.read, reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: actions, timeSlices. All other values will be silently
            /// ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBlocksByIdGetAsync(this IBookingApi operations, string id, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlocksByIdGetWithHttpMessagesAsync(id, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows to modify the block
            /// </summary>
            /// <remarks>
            /// You can replace From, To, GrossDailyRate and BlockedUnits&lt;br&gt;You must
            /// have at least one of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            public static MessageItemCollection BookingBlocksByIdPatch(this IBookingApi operations, string id, IList<Operation> body)
            {
                return operations.BookingBlocksByIdPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows to modify the block
            /// </summary>
            /// <remarks>
            /// You can replace From, To, GrossDailyRate and BlockedUnits&lt;br&gt;You must
            /// have at least one of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBlocksByIdPatchAsync(this IBookingApi operations, string id, IList<Operation> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlocksByIdPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific block
            /// </summary>
            /// <remarks>
            /// Use this call to delete a block. This is only possible as long as no
            /// reservation was picked up yet even if all of
            /// them are canceled&lt;br&gt;You must have at least one of these scopes:
            /// 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the block.
            /// </param>
            public static MessageItemCollection BookingBlocksByIdDelete(this IBookingApi operations, string id)
            {
                return operations.BookingBlocksByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a specific block
            /// </summary>
            /// <remarks>
            /// Use this call to delete a block. This is only possible as long as no
            /// reservation was picked up yet even if all of
            /// them are canceled&lt;br&gt;You must have at least one of these scopes:
            /// 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the block.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBlocksByIdDeleteAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlocksByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a block exists
            /// </summary>
            /// <remarks>
            /// Check if a block exists by id&lt;br&gt;You must have at least one of these
            /// scopes: 'blocks.read, reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the block.
            /// </param>
            public static void BookingBlocksByIdHead(this IBookingApi operations, string id)
            {
                operations.BookingBlocksByIdHeadAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a block exists
            /// </summary>
            /// <remarks>
            /// Check if a block exists by id&lt;br&gt;You must have at least one of these
            /// scopes: 'blocks.read, reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the block.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BookingBlocksByIdHeadAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BookingBlocksByIdHeadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Confirm a block.
            /// </summary>
            /// <remarks>
            /// Confirm a specific block which is in status 'Tentative'.
            /// This changes the status to 'Definite'.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            public static MessageItemCollection BookingBlockActionsByIdConfirmPut(this IBookingApi operations, string id)
            {
                return operations.BookingBlockActionsByIdConfirmPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Confirm a block.
            /// </summary>
            /// <remarks>
            /// Confirm a specific block which is in status 'Tentative'.
            /// This changes the status to 'Definite'.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBlockActionsByIdConfirmPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlockActionsByIdConfirmPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Release a block.
            /// </summary>
            /// <remarks>
            /// Release a specific block which is in status 'Definite'.
            /// This changes the status to 'Tentative'.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            public static MessageItemCollection BookingBlockActionsByIdReleasePut(this IBookingApi operations, string id)
            {
                return operations.BookingBlockActionsByIdReleasePutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Release a block.
            /// </summary>
            /// <remarks>
            /// Release a specific block which is in status 'Definite'.
            /// This changes the status to 'Tentative'.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBlockActionsByIdReleasePutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlockActionsByIdReleasePutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a block.
            /// </summary>
            /// <remarks>
            /// Cancel a specific block which is in status 'Definite' or 'Tentative'.
            /// This changes the status to 'Canceled'.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            public static MessageItemCollection BookingBlockActionsByIdCancelPut(this IBookingApi operations, string id)
            {
                return operations.BookingBlockActionsByIdCancelPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a block.
            /// </summary>
            /// <remarks>
            /// Cancel a specific block which is in status 'Definite' or 'Tentative'.
            /// This changes the status to 'Canceled'.&lt;br&gt;You must have at least one
            /// of these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBlockActionsByIdCancelPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlockActionsByIdCancelPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Wash a block.
            /// </summary>
            /// <remarks>
            /// Wash a specific block which is in status 'Definite'.
            /// This releases all unpicked units.&lt;br&gt;You must have at least one of
            /// these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            public static MessageItemCollection BookingBlockActionsByIdWashPut(this IBookingApi operations, string id)
            {
                return operations.BookingBlockActionsByIdWashPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Wash a block.
            /// </summary>
            /// <remarks>
            /// Wash a specific block which is in status 'Definite'.
            /// This releases all unpicked units.&lt;br&gt;You must have at least one of
            /// these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block that should be processed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBlockActionsByIdWashPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlockActionsByIdWashPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allow to modify a block
            /// </summary>
            /// <remarks>
            /// Use this call to modify a block.&lt;br&gt;You must have at least one of
            /// these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block to be modified.
            /// </param>
            /// <param name='body'>
            /// The definition of the block.
            /// </param>
            public static MessageItemCollection BookingBlockActionsByIdAmendPut(this IBookingApi operations, string id, ReplaceBlockModel body)
            {
                return operations.BookingBlockActionsByIdAmendPutAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allow to modify a block
            /// </summary>
            /// <remarks>
            /// Use this call to modify a block.&lt;br&gt;You must have at least one of
            /// these scopes: 'blocks.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the block to be modified.
            /// </param>
            /// <param name='body'>
            /// The definition of the block.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBlockActionsByIdAmendPutAsync(this IBookingApi operations, string id, ReplaceBlockModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBlockActionsByIdAmendPutWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a booking for one or more reservations.
            /// </summary>
            /// <remarks>
            /// Creates a booking taking a list of reservations as input&lt;br&gt;You must
            /// have at least one of these scopes: 'reservations.create,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object BookingBookingsPost(this IBookingApi operations, CreateBookingModel body, string idempotencyKey = default(string))
            {
                return operations.BookingBookingsPostAsync(body, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a booking for one or more reservations.
            /// </summary>
            /// <remarks>
            /// Creates a booking taking a list of reservations as input&lt;br&gt;You must
            /// have at least one of these scopes: 'reservations.create,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBookingsPostAsync(this IBookingApi operations, CreateBookingModel body, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBookingsPostWithHttpMessagesAsync(body, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all bookings, filtered by the specified parameters.
            /// </summary>
            /// <remarks>
            /// Returns a list of all bookings, filtered by the specified parameters. If no
            /// parameters are set, returns the entire list.&lt;br&gt;You must have at
            /// least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationId'>
            /// Filter result by reservation id. The result set will contain all bookings
            /// having reservations with the specified id
            /// </param>
            /// <param name='groupId'>
            /// Filter result by group id. The result set will contain all bookings having
            /// groups with the specified id
            /// </param>
            /// <param name='channelCode'>
            /// Filter result by the channel code. The resul set will contain all bookings
            /// having reservations with the specified channel code
            /// </param>
            /// <param name='externalCode'>
            /// Filter result by the external code. The result set will contain all
            /// bookings having reservations with external code starting with provided
            /// value
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all bookings for the provided free text. Currently it only
            /// looks up if either the lastname, firstname, email or company name of the
            /// booker
            /// contains one of the provided values
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup, ratePlan, services, reservations.
            /// All other values will be silently ignored.
            /// </param>
            public static object BookingBookingsGet(this IBookingApi operations, string reservationId = default(string), string groupId = default(string), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), string externalCode = default(string), string textSearch = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>))
            {
                return operations.BookingBookingsGetAsync(reservationId, groupId, channelCode, externalCode, textSearch, pageNumber, pageSize, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all bookings, filtered by the specified parameters.
            /// </summary>
            /// <remarks>
            /// Returns a list of all bookings, filtered by the specified parameters. If no
            /// parameters are set, returns the entire list.&lt;br&gt;You must have at
            /// least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationId'>
            /// Filter result by reservation id. The result set will contain all bookings
            /// having reservations with the specified id
            /// </param>
            /// <param name='groupId'>
            /// Filter result by group id. The result set will contain all bookings having
            /// groups with the specified id
            /// </param>
            /// <param name='channelCode'>
            /// Filter result by the channel code. The resul set will contain all bookings
            /// having reservations with the specified channel code
            /// </param>
            /// <param name='externalCode'>
            /// Filter result by the external code. The result set will contain all
            /// bookings having reservations with external code starting with provided
            /// value
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all bookings for the provided free text. Currently it only
            /// looks up if either the lastname, firstname, email or company name of the
            /// booker
            /// contains one of the provided values
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup, ratePlan, services, reservations.
            /// All other values will be silently ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBookingsGetAsync(this IBookingApi operations, string reservationId = default(string), string groupId = default(string), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), string externalCode = default(string), string textSearch = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBookingsGetWithHttpMessagesAsync(reservationId, groupId, channelCode, externalCode, textSearch, pageNumber, pageSize, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a booking for one or more reservations regardless of availability
            /// or restrictions.
            /// </summary>
            /// <remarks>
            /// Creates a booking taking a list of reservations as input&lt;br&gt;You must
            /// have at least one of these scopes: 'reservations.force-create,
            /// reservations.force-manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object BookingBookingsforcePost(this IBookingApi operations, CreateBookingModel body, string idempotencyKey = default(string))
            {
                return operations.BookingBookingsforcePostAsync(body, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a booking for one or more reservations regardless of availability
            /// or restrictions.
            /// </summary>
            /// <remarks>
            /// Creates a booking taking a list of reservations as input&lt;br&gt;You must
            /// have at least one of these scopes: 'reservations.force-create,
            /// reservations.force-manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBookingsforcePostAsync(this IBookingApi operations, CreateBookingModel body, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBookingsforcePostWithHttpMessagesAsync(body, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add one or multiple reservations to an existing booking.
            /// </summary>
            /// <remarks>
            /// Creates new reservations and adds them to an existing booking taking a list
            /// of reservations as input&lt;br&gt;You must have at least one of these
            /// scopes: 'reservations.create, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking the reservations should be attached to.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to add.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object BookingBookingsByIdReservationsPost(this IBookingApi operations, string id, AddReservationsModel body, string idempotencyKey = default(string))
            {
                return operations.BookingBookingsByIdReservationsPostAsync(id, body, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add one or multiple reservations to an existing booking.
            /// </summary>
            /// <remarks>
            /// Creates new reservations and adds them to an existing booking taking a list
            /// of reservations as input&lt;br&gt;You must have at least one of these
            /// scopes: 'reservations.create, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking the reservations should be attached to.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to add.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBookingsByIdReservationsPostAsync(this IBookingApi operations, string id, AddReservationsModel body, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBookingsByIdReservationsPostWithHttpMessagesAsync(id, body, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add one or multiple reservations to an existing booking regardless of
            /// availability or restrictions.
            /// </summary>
            /// <remarks>
            /// Creates new reservations and adds them to an existing booking taking a list
            /// of reservations as input&lt;br&gt;You must have at least one of these
            /// scopes: 'reservations.force-create, reservations.force-manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking the reservations should be attached to.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to add.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object BookingBookingsByIdReservationsforcePost(this IBookingApi operations, string id, AddReservationsModel body, string idempotencyKey = default(string))
            {
                return operations.BookingBookingsByIdReservationsforcePostAsync(id, body, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add one or multiple reservations to an existing booking regardless of
            /// availability or restrictions.
            /// </summary>
            /// <remarks>
            /// Creates new reservations and adds them to an existing booking taking a list
            /// of reservations as input&lt;br&gt;You must have at least one of these
            /// scopes: 'reservations.force-create, reservations.force-manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking the reservations should be attached to.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to add.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBookingsByIdReservationsforcePostAsync(this IBookingApi operations, string id, AddReservationsModel body, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBookingsByIdReservationsforcePostWithHttpMessagesAsync(id, body, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a specific booking.
            /// </summary>
            /// <remarks>
            /// Retrieves a booking with all its reservations.&lt;br&gt;You must have at
            /// least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup, ratePlan, services, reservations,
            /// propertyValues. All other values will be silently ignored.
            /// </param>
            public static object BookingBookingsByIdGet(this IBookingApi operations, string id, IList<string> expand = default(IList<string>))
            {
                return operations.BookingBookingsByIdGetAsync(id, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a specific booking.
            /// </summary>
            /// <remarks>
            /// Retrieves a booking with all its reservations.&lt;br&gt;You must have at
            /// least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup, ratePlan, services, reservations,
            /// propertyValues. All other values will be silently ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingBookingsByIdGetAsync(this IBookingApi operations, string id, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBookingsByIdGetWithHttpMessagesAsync(id, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows to modify certain booking properties
            /// </summary>
            /// <remarks>
            /// Here is the list of operations that are currently allowed:
            /// - Add, replace and remove PaymentAccount
            /// - Add, replace and remove Comment
            /// - Add, replace and remove BookerComment
            /// - Copy PaymentAccount, Comment and BookerComment from the booking to any
            /// reservation, or the other way around
            /// - Replace Booker&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            public static MessageItemCollection BookingBookingsByIdPatch(this IBookingApi operations, string id, IList<Operation> body)
            {
                return operations.BookingBookingsByIdPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows to modify certain booking properties
            /// </summary>
            /// <remarks>
            /// Here is the list of operations that are currently allowed:
            /// - Add, replace and remove PaymentAccount
            /// - Add, replace and remove Comment
            /// - Add, replace and remove BookerComment
            /// - Copy PaymentAccount, Comment and BookerComment from the booking to any
            /// reservation, or the other way around
            /// - Replace Booker&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the booking to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingBookingsByIdPatchAsync(this IBookingApi operations, string id, IList<Operation> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingBookingsByIdPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a group booking.
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;You must have at least one of these scopes: 'groups.create,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The details of the group that should be created.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object BookingGroupsPost(this IBookingApi operations, CreateGroupModel body, string idempotencyKey = default(string))
            {
                return operations.BookingGroupsPostAsync(body, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a group booking.
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;You must have at least one of these scopes: 'groups.create,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The details of the group that should be created.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingGroupsPostAsync(this IBookingApi operations, CreateGroupModel body, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingGroupsPostWithHttpMessagesAsync(body, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all group bookings, filtered by the specified parameters.
            /// </summary>
            /// <remarks>
            /// Returns a list of all group bookings, filtered by the specified parameters.
            /// If no parameters are set, returns the entire list&lt;br&gt;You must have at
            /// least one of these scopes: 'groups.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all group bookings for the provided free text. Currently
            /// it only looks up if either the group name, lastname,
            /// firstname, email or company name of the booker contains one of the provided
            /// values
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All groups that have blocks overlapping with
            /// the interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All groups that have blocks overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: blocks, actions. All other values will be silently
            /// ignored.
            /// </param>
            public static object BookingGroupsGet(this IBookingApi operations, string textSearch = default(string), IList<string> propertyIds = default(IList<string>), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>))
            {
                return operations.BookingGroupsGetAsync(textSearch, propertyIds, fromParameter, to, pageNumber, pageSize, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all group bookings, filtered by the specified parameters.
            /// </summary>
            /// <remarks>
            /// Returns a list of all group bookings, filtered by the specified parameters.
            /// If no parameters are set, returns the entire list&lt;br&gt;You must have at
            /// least one of these scopes: 'groups.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all group bookings for the provided free text. Currently
            /// it only looks up if either the group name, lastname,
            /// firstname, email or company name of the booker contains one of the provided
            /// values
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All groups that have blocks overlapping with
            /// the interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All groups that have blocks overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: blocks, actions. All other values will be silently
            /// ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingGroupsGetAsync(this IBookingApi operations, string textSearch = default(string), IList<string> propertyIds = default(IList<string>), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingGroupsGetWithHttpMessagesAsync(textSearch, propertyIds, fromParameter, to, pageNumber, pageSize, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a specific group booking.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific group booking with all its related blocks&lt;br&gt;You
            /// must have at least one of these scopes: 'groups.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: blocks, actions. All other values will be silently
            /// ignored.
            /// </param>
            public static object BookingGroupsByIdGet(this IBookingApi operations, string id, IList<string> expand = default(IList<string>))
            {
                return operations.BookingGroupsByIdGetAsync(id, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a specific group booking.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific group booking with all its related blocks&lt;br&gt;You
            /// must have at least one of these scopes: 'groups.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: blocks, actions. All other values will be silently
            /// ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingGroupsByIdGetAsync(this IBookingApi operations, string id, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingGroupsByIdGetWithHttpMessagesAsync(id, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows to modify certain group booking properties
            /// </summary>
            /// <remarks>
            /// Here is the list of operations that are currently allowed:
            /// - Add and replace Name
            /// - Add, replace and remove Comment
            /// - Add, replace and remove BookerComment
            /// - Add, replace and remove PaymentAccount
            /// - Add, replace and remove PropertyIds
            /// - Replace Booker&lt;br&gt;You must have at least one of these scopes:
            /// 'groups.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            public static MessageItemCollection BookingGroupsByIdPatch(this IBookingApi operations, string id, IList<Operation> body)
            {
                return operations.BookingGroupsByIdPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows to modify certain group booking properties
            /// </summary>
            /// <remarks>
            /// Here is the list of operations that are currently allowed:
            /// - Add and replace Name
            /// - Add, replace and remove Comment
            /// - Add, replace and remove BookerComment
            /// - Add, replace and remove PaymentAccount
            /// - Add, replace and remove PropertyIds
            /// - Replace Booker&lt;br&gt;You must have at least one of these scopes:
            /// 'groups.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingGroupsByIdPatchAsync(this IBookingApi operations, string id, IList<Operation> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingGroupsByIdPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a certain group booking
            /// </summary>
            /// <remarks>
            /// Use this call to delete a group booking. This is only possible as long as
            /// no blocks exist that are linked to
            /// this group booking&lt;br&gt;You must have at least one of these scopes:
            /// 'groups.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be deleted.
            /// </param>
            public static MessageItemCollection BookingGroupsByIdDelete(this IBookingApi operations, string id)
            {
                return operations.BookingGroupsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a certain group booking
            /// </summary>
            /// <remarks>
            /// Use this call to delete a group booking. This is only possible as long as
            /// no blocks exist that are linked to
            /// this group booking&lt;br&gt;You must have at least one of these scopes:
            /// 'groups.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingGroupsByIdDeleteAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingGroupsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a certain group booking exists
            /// </summary>
            /// <remarks>
            /// Check if a group booking exists by id&lt;br&gt;You must have at least one
            /// of these scopes: 'groups.read, reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be checked for existence.
            /// </param>
            public static void BookingGroupsByIdHead(this IBookingApi operations, string id)
            {
                operations.BookingGroupsByIdHeadAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a certain group booking exists
            /// </summary>
            /// <remarks>
            /// Check if a group booking exists by id&lt;br&gt;You must have at least one
            /// of these scopes: 'groups.read, reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking to be checked for existence.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BookingGroupsByIdHeadAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BookingGroupsByIdHeadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns number of group bookings
            /// </summary>
            /// <remarks>
            /// Returns number of group bookings matching the filter criteria&lt;br&gt;You
            /// must have at least one of these scopes: 'groups.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all group bookings for the provided free text. Currently
            /// it only looks up if either the group name, lastname,
            /// firstname, email or company name of the booker contains one of the provided
            /// values
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All groups that have blocks overlapping with
            /// the interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All groups that have blocks overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            public static object BookingGroupscountGet(this IBookingApi operations, string textSearch = default(string), IList<string> propertyIds = default(IList<string>), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?))
            {
                return operations.BookingGroupscountGetAsync(textSearch, propertyIds, fromParameter, to).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns number of group bookings
            /// </summary>
            /// <remarks>
            /// Returns number of group bookings matching the filter criteria&lt;br&gt;You
            /// must have at least one of these scopes: 'groups.read, reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all group bookings for the provided free text. Currently
            /// it only looks up if either the group name, lastname,
            /// firstname, email or company name of the booker contains one of the provided
            /// values
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time range. All groups that have blocks overlapping with
            /// the interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time range. All groups that have blocks overlapping with the
            /// interval specified by from and to
            /// will be returned&lt;br /&gt;A date and time (without fractional second
            /// part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingGroupscountGetAsync(this IBookingApi operations, string textSearch = default(string), IList<string> propertyIds = default(IList<string>), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingGroupscountGetWithHttpMessagesAsync(textSearch, propertyIds, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add one or multiple reservations to an existing group booking using blocked
            /// inventory.
            /// </summary>
            /// <remarks>
            /// Creates new reservations and adds them to an existing group booking taking
            /// a list of reservations as input&lt;br&gt;You must have at least one of
            /// these scopes: 'groups.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking the reservations should be attached to.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object BookingGroupsByIdReservationsPost(this IBookingApi operations, string id, PickUpReservationsModel body, string idempotencyKey = default(string))
            {
                return operations.BookingGroupsByIdReservationsPostAsync(id, body, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add one or multiple reservations to an existing group booking using blocked
            /// inventory.
            /// </summary>
            /// <remarks>
            /// Creates new reservations and adds them to an existing group booking taking
            /// a list of reservations as input&lt;br&gt;You must have at least one of
            /// these scopes: 'groups.manage, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the group booking the reservations should be attached to.
            /// </param>
            /// <param name='body'>
            /// The list of reservations you want to create.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingGroupsByIdReservationsPostAsync(this IBookingApi operations, string id, PickUpReservationsModel body, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingGroupsByIdReservationsPostWithHttpMessagesAsync(id, body, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns offers for one specific stay.
            /// </summary>
            /// <remarks>
            /// Calculates and returns available offers for a specific property, arrival
            /// and departure date.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// The property ID
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// The number of adults you want offers for
            /// </param>
            /// <param name='timeSliceTemplate'>
            /// The time slice template used to filter the rate plans, defaults to 'over
            /// night'. Possible values include: 'DayUse', 'OverNight'
            /// </param>
            /// <param name='timeSliceDefinitionIds'>
            /// Time slice definition IDs, used to filter rate plans
            /// </param>
            /// <param name='unitGroupIds'>
            /// Unit group IDs, used to filter rate plans
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Unit group types, used to filter rate plans
            /// </param>
            /// <param name='channelCode'>
            /// Channel code, used to filter the rate plans. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='promoCode'>
            /// The promo code associated with a certain special offer
            /// </param>
            /// <param name='corporateCode'>
            /// The code associated with a corporate rate
            /// </param>
            /// <param name='childrenAges'>
            /// The ages of the children you want offers for
            /// </param>
            /// <param name='includeUnavailable'>
            /// Return also offers that are currently not publicly bookable as restrictions
            /// are violated. By default only available offers are returned
            /// </param>
            public static object BookingOffersGet(this IBookingApi operations, string propertyId, string arrival, string departure, int adults, TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), ChannelCode? channelCode = default(ChannelCode?), string promoCode = default(string), string corporateCode = default(string), IList<int?> childrenAges = default(IList<int?>), bool? includeUnavailable = default(bool?))
            {
                return operations.BookingOffersGetAsync(propertyId, arrival, departure, adults, timeSliceTemplate, timeSliceDefinitionIds, unitGroupIds, unitGroupTypes, channelCode, promoCode, corporateCode, childrenAges, includeUnavailable).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns offers for one specific stay.
            /// </summary>
            /// <remarks>
            /// Calculates and returns available offers for a specific property, arrival
            /// and departure date.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// The property ID
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// The number of adults you want offers for
            /// </param>
            /// <param name='timeSliceTemplate'>
            /// The time slice template used to filter the rate plans, defaults to 'over
            /// night'. Possible values include: 'DayUse', 'OverNight'
            /// </param>
            /// <param name='timeSliceDefinitionIds'>
            /// Time slice definition IDs, used to filter rate plans
            /// </param>
            /// <param name='unitGroupIds'>
            /// Unit group IDs, used to filter rate plans
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Unit group types, used to filter rate plans
            /// </param>
            /// <param name='channelCode'>
            /// Channel code, used to filter the rate plans. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='promoCode'>
            /// The promo code associated with a certain special offer
            /// </param>
            /// <param name='corporateCode'>
            /// The code associated with a corporate rate
            /// </param>
            /// <param name='childrenAges'>
            /// The ages of the children you want offers for
            /// </param>
            /// <param name='includeUnavailable'>
            /// Return also offers that are currently not publicly bookable as restrictions
            /// are violated. By default only available offers are returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingOffersGetAsync(this IBookingApi operations, string propertyId, string arrival, string departure, int adults, TimeSliceTemplate? timeSliceTemplate = default(TimeSliceTemplate?), IList<string> timeSliceDefinitionIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), ChannelCode? channelCode = default(ChannelCode?), string promoCode = default(string), string corporateCode = default(string), IList<int?> childrenAges = default(IList<int?>), bool? includeUnavailable = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingOffersGetWithHttpMessagesAsync(propertyId, arrival, departure, adults, timeSliceTemplate, timeSliceDefinitionIds, unitGroupIds, unitGroupTypes, channelCode, promoCode, corporateCode, childrenAges, includeUnavailable, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns offers for a specific rate plan.
            /// </summary>
            /// <remarks>
            /// Calculates and returns available offers for a specific rate plan, arrival
            /// and departure date.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratePlanId'>
            /// The rate plan ID
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// The number of adults you want offers for
            /// </param>
            /// <param name='channelCode'>
            /// The channel code. Possible values include: 'Direct', 'BookingCom', 'Ibe',
            /// 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='childrenAges'>
            /// The ages of the children you want offers for
            /// </param>
            /// <param name='includeUnavailable'>
            /// Return also offers that are currently not publicly bookable as restrictions
            /// are violated. By default only available offers are returned
            /// </param>
            public static object BookingRatePlanOffersGet(this IBookingApi operations, string ratePlanId, string arrival, string departure, int adults, ChannelCode? channelCode = default(ChannelCode?), IList<int?> childrenAges = default(IList<int?>), bool? includeUnavailable = default(bool?))
            {
                return operations.BookingRatePlanOffersGetAsync(ratePlanId, arrival, departure, adults, channelCode, childrenAges, includeUnavailable).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns offers for a specific rate plan.
            /// </summary>
            /// <remarks>
            /// Calculates and returns available offers for a specific rate plan, arrival
            /// and departure date.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratePlanId'>
            /// The rate plan ID
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// The number of adults you want offers for
            /// </param>
            /// <param name='channelCode'>
            /// The channel code. Possible values include: 'Direct', 'BookingCom', 'Ibe',
            /// 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='childrenAges'>
            /// The ages of the children you want offers for
            /// </param>
            /// <param name='includeUnavailable'>
            /// Return also offers that are currently not publicly bookable as restrictions
            /// are violated. By default only available offers are returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingRatePlanOffersGetAsync(this IBookingApi operations, string ratePlanId, string arrival, string departure, int adults, ChannelCode? channelCode = default(ChannelCode?), IList<int?> childrenAges = default(IList<int?>), bool? includeUnavailable = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingRatePlanOffersGetWithHttpMessagesAsync(ratePlanId, arrival, departure, adults, channelCode, childrenAges, includeUnavailable, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns service offers for one specific stay.
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;You must have at least one of these scopes: 'offers.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratePlanId'>
            /// The rate plan ID
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// The number of adults you want offers for
            /// </param>
            /// <param name='channelCode'>
            /// The channel code used to filter the services. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='childrenAges'>
            /// The ages of the children you want offers for
            /// </param>
            /// <param name='onlyDefaultDates'>
            /// Depending on the postNextDay setting of a service it will be posted before
            /// or after midnight.
            /// Breakfast is usually delivered on the next morning, having 'postNextDay'
            /// set to true. Its 'default dates' are from the day after
            /// arrival until the departure day. For services like dinner 'postNextDay' is
            /// false, and default dates are day of arrival until one
            /// day before departure.
            /// With this query parameter set to 'false', you can also ask for dates
            /// outside of those default dates. It defaults to true.
            /// </param>
            public static object BookingServiceOffersGet(this IBookingApi operations, string ratePlanId, string arrival, string departure, int adults, ChannelCode? channelCode = default(ChannelCode?), IList<int?> childrenAges = default(IList<int?>), bool? onlyDefaultDates = default(bool?))
            {
                return operations.BookingServiceOffersGetAsync(ratePlanId, arrival, departure, adults, channelCode, childrenAges, onlyDefaultDates).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns service offers for one specific stay.
            /// </summary>
            /// <remarks>
            /// &lt;br&gt;You must have at least one of these scopes: 'offers.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratePlanId'>
            /// The rate plan ID
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// The number of adults you want offers for
            /// </param>
            /// <param name='channelCode'>
            /// The channel code used to filter the services. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='childrenAges'>
            /// The ages of the children you want offers for
            /// </param>
            /// <param name='onlyDefaultDates'>
            /// Depending on the postNextDay setting of a service it will be posted before
            /// or after midnight.
            /// Breakfast is usually delivered on the next morning, having 'postNextDay'
            /// set to true. Its 'default dates' are from the day after
            /// arrival until the departure day. For services like dinner 'postNextDay' is
            /// false, and default dates are day of arrival until one
            /// day before departure.
            /// With this query parameter set to 'false', you can also ask for dates
            /// outside of those default dates. It defaults to true.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingServiceOffersGetAsync(this IBookingApi operations, string ratePlanId, string arrival, string departure, int adults, ChannelCode? channelCode = default(ChannelCode?), IList<int?> childrenAges = default(IList<int?>), bool? onlyDefaultDates = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingServiceOffersGetWithHttpMessagesAsync(ratePlanId, arrival, departure, adults, channelCode, childrenAges, onlyDefaultDates, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns offers with rates and availabilities for the specified range.
            /// </summary>
            /// <remarks>
            /// Calculates and returns offers per time slice for a specific rate plan,
            /// arrival and departure date.&lt;br&gt;You must have at least one of these
            /// scopes: 'offer-index.read, offers.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratePlanId'>
            /// </param>
            /// <param name='fromParameter'>
            /// &lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// &lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='channelCode'>
            /// Possible values include: 'Direct', 'BookingCom', 'Ibe', 'ChannelManager',
            /// 'Expedia', 'Homelike'
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            public static object BookingOfferIndexGet(this IBookingApi operations, string ratePlanId, string fromParameter, string to, ChannelCode channelCode, int? pageNumber = 1, int? pageSize = 100)
            {
                return operations.BookingOfferIndexGetAsync(ratePlanId, fromParameter, to, channelCode, pageNumber, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns offers with rates and availabilities for the specified range.
            /// </summary>
            /// <remarks>
            /// Calculates and returns offers per time slice for a specific rate plan,
            /// arrival and departure date.&lt;br&gt;You must have at least one of these
            /// scopes: 'offer-index.read, offers.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratePlanId'>
            /// </param>
            /// <param name='fromParameter'>
            /// &lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// &lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='channelCode'>
            /// Possible values include: 'Direct', 'BookingCom', 'Ibe', 'ChannelManager',
            /// 'Expedia', 'Homelike'
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingOfferIndexGetAsync(this IBookingApi operations, string ratePlanId, string fromParameter, string to, ChannelCode channelCode, int? pageNumber = 1, int? pageSize = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingOfferIndexGetWithHttpMessagesAsync(ratePlanId, fromParameter, to, channelCode, pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all reservations, filtered by the specified parameters.
            /// </summary>
            /// <remarks>
            /// Returns a list of all reservations, filtered by the specified parameters.
            /// If no parameters are set, returns the entire list.&lt;br&gt;You must have
            /// at least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bookingId'>
            /// Filter result by booking id
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='ratePlanIds'>
            /// Filter result by requested rate plans
            /// </param>
            /// <param name='companyIds'>
            /// Filter result by requested companies
            /// </param>
            /// <param name='unitIds'>
            /// Filter result by assigned units
            /// </param>
            /// <param name='unitGroupIds'>
            /// Filter result by requested unit groups
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Filter result by requested unit group types
            /// </param>
            /// <param name='blockIds'>
            /// Filter result by requested blocks
            /// </param>
            /// <param name='status'>
            /// Filter result by reservation status
            /// </param>
            /// <param name='dateFilter'>
            /// Filter by date and time attributes of reservation. Use in combination with
            /// the 'To' and 'From' attributes.
            /// All filters will check if the date specified by the filter type is between
            /// from (included) and to (excluded).
            /// The exception being filtering for 'stay', which will return all
            /// reservations that are overlapping with the interval specified by from and
            /// to. Possible values include: 'Arrival', 'Departure', 'Stay', 'Creation',
            /// 'Modification', 'Cancellation'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time interval. When filtering by date, at least one of
            /// 'from' and 'to' has to be specified&lt;br /&gt;A date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time interval, must be larger than 'from'. When filtering by
            /// date, at least one of 'from' and 'to' has to be specified&lt;br /&gt;A date
            /// and time (without fractional second part) in UTC or with UTC offset as
            /// defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='channelCode'>
            /// Filter result by the channel code
            /// </param>
            /// <param name='sources'>
            /// Filter result by source
            /// </param>
            /// <param name='validationMessageCategory'>
            /// Filter result by validation message category
            /// </param>
            /// <param name='externalCode'>
            /// Filter result by the external code. The result set will contain all
            /// reservations that have an external code starting with the
            /// provided value
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all reservations where the provided text is contained in:
            /// booker first name or last name or email or company name,
            /// primary guest first name or last name or email or company name, external
            /// code, reservation id, unit name. The search is case insensitive.
            /// </param>
            /// <param name='balanceFilter'>
            /// This will filter reservations based on their balance.&lt;br /&gt;You can
            /// provide an array of string expressions which all need to apply.&lt;br
            /// /&gt;Each expression has the form of 'OPERATION_VALUE' where VALUE needs to
            /// be of the valid format of the property type and OPERATION can be:&lt;br
            /// /&gt;'eq' for equals&lt;br /&gt;'neq' for not equals&lt;br /&gt;'lt' for
            /// less than&lt;br /&gt;'gt' for greater than&lt;br /&gt;'lte' for less than
            /// or equals&lt;br /&gt;'gte' for greater than or equals&lt;br /&gt;For
            /// instance&lt;br /&gt;'eq_5' would mean the value should equal 5&lt;br
            /// /&gt;'lte_7' would mean the value should be less than or equal to 7
            /// </param>
            /// <param name='allFoliosHaveInvoice'>
            /// If set to {true}, returns only reservations, in which all folios are closed
            /// and have an invoice.
            /// If set to {false}, returns only reservations, in which some of the folios
            /// are open or don't have an invoice
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='sort'>
            /// List of all fields that can be used to sort the results. Possible values
            /// are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc,
            /// created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc,
            /// firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc.
            /// All other values will be silently ignored.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: booker, actions, timeSlices, services, assignedUnits,
            /// company. All other values will be silently ignored.
            /// </param>
            public static object BookingReservationsGet(this IBookingApi operations, string bookingId = default(string), IList<string> propertyIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> companyIds = default(IList<string>), IList<string> unitIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), IList<string> blockIds = default(IList<string>), IList<ReservationStatus?> status = default(IList<ReservationStatus?>), DateFilterType? dateFilter = default(DateFilterType?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), IList<string> sources = default(IList<string>), IList<ValidationMessageCategory?> validationMessageCategory = default(IList<ValidationMessageCategory?>), string externalCode = default(string), string textSearch = default(string), IList<string> balanceFilter = default(IList<string>), bool? allFoliosHaveInvoice = default(bool?), int? pageNumber = 1, int? pageSize = 100, IList<string> sort = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.BookingReservationsGetAsync(bookingId, propertyIds, ratePlanIds, companyIds, unitIds, unitGroupIds, unitGroupTypes, blockIds, status, dateFilter, fromParameter, to, channelCode, sources, validationMessageCategory, externalCode, textSearch, balanceFilter, allFoliosHaveInvoice, pageNumber, pageSize, sort, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all reservations, filtered by the specified parameters.
            /// </summary>
            /// <remarks>
            /// Returns a list of all reservations, filtered by the specified parameters.
            /// If no parameters are set, returns the entire list.&lt;br&gt;You must have
            /// at least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bookingId'>
            /// Filter result by booking id
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='ratePlanIds'>
            /// Filter result by requested rate plans
            /// </param>
            /// <param name='companyIds'>
            /// Filter result by requested companies
            /// </param>
            /// <param name='unitIds'>
            /// Filter result by assigned units
            /// </param>
            /// <param name='unitGroupIds'>
            /// Filter result by requested unit groups
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Filter result by requested unit group types
            /// </param>
            /// <param name='blockIds'>
            /// Filter result by requested blocks
            /// </param>
            /// <param name='status'>
            /// Filter result by reservation status
            /// </param>
            /// <param name='dateFilter'>
            /// Filter by date and time attributes of reservation. Use in combination with
            /// the 'To' and 'From' attributes.
            /// All filters will check if the date specified by the filter type is between
            /// from (included) and to (excluded).
            /// The exception being filtering for 'stay', which will return all
            /// reservations that are overlapping with the interval specified by from and
            /// to. Possible values include: 'Arrival', 'Departure', 'Stay', 'Creation',
            /// 'Modification', 'Cancellation'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time interval. When filtering by date, at least one of
            /// 'from' and 'to' has to be specified&lt;br /&gt;A date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time interval, must be larger than 'from'. When filtering by
            /// date, at least one of 'from' and 'to' has to be specified&lt;br /&gt;A date
            /// and time (without fractional second part) in UTC or with UTC offset as
            /// defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='channelCode'>
            /// Filter result by the channel code
            /// </param>
            /// <param name='sources'>
            /// Filter result by source
            /// </param>
            /// <param name='validationMessageCategory'>
            /// Filter result by validation message category
            /// </param>
            /// <param name='externalCode'>
            /// Filter result by the external code. The result set will contain all
            /// reservations that have an external code starting with the
            /// provided value
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all reservations where the provided text is contained in:
            /// booker first name or last name or email or company name,
            /// primary guest first name or last name or email or company name, external
            /// code, reservation id, unit name. The search is case insensitive.
            /// </param>
            /// <param name='balanceFilter'>
            /// This will filter reservations based on their balance.&lt;br /&gt;You can
            /// provide an array of string expressions which all need to apply.&lt;br
            /// /&gt;Each expression has the form of 'OPERATION_VALUE' where VALUE needs to
            /// be of the valid format of the property type and OPERATION can be:&lt;br
            /// /&gt;'eq' for equals&lt;br /&gt;'neq' for not equals&lt;br /&gt;'lt' for
            /// less than&lt;br /&gt;'gt' for greater than&lt;br /&gt;'lte' for less than
            /// or equals&lt;br /&gt;'gte' for greater than or equals&lt;br /&gt;For
            /// instance&lt;br /&gt;'eq_5' would mean the value should equal 5&lt;br
            /// /&gt;'lte_7' would mean the value should be less than or equal to 7
            /// </param>
            /// <param name='allFoliosHaveInvoice'>
            /// If set to {true}, returns only reservations, in which all folios are closed
            /// and have an invoice.
            /// If set to {false}, returns only reservations, in which some of the folios
            /// are open or don't have an invoice
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='sort'>
            /// List of all fields that can be used to sort the results. Possible values
            /// are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc,
            /// created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc,
            /// firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc.
            /// All other values will be silently ignored.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: booker, actions, timeSlices, services, assignedUnits,
            /// company. All other values will be silently ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationsGetAsync(this IBookingApi operations, string bookingId = default(string), IList<string> propertyIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> companyIds = default(IList<string>), IList<string> unitIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), IList<string> blockIds = default(IList<string>), IList<ReservationStatus?> status = default(IList<ReservationStatus?>), DateFilterType? dateFilter = default(DateFilterType?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), IList<string> sources = default(IList<string>), IList<ValidationMessageCategory?> validationMessageCategory = default(IList<ValidationMessageCategory?>), string externalCode = default(string), string textSearch = default(string), IList<string> balanceFilter = default(IList<string>), bool? allFoliosHaveInvoice = default(bool?), int? pageNumber = 1, int? pageSize = 100, IList<string> sort = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationsGetWithHttpMessagesAsync(bookingId, propertyIds, ratePlanIds, companyIds, unitIds, unitGroupIds, unitGroupTypes, blockIds, status, dateFilter, fromParameter, to, channelCode, sources, validationMessageCategory, externalCode, textSearch, balanceFilter, allFoliosHaveInvoice, pageNumber, pageSize, sort, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the number of reservations fulfilling the criteria specified in the
            /// parameters.
            /// </summary>
            /// <remarks>
            /// If no parameters are set, returns the total count of
            /// reservations.&lt;br&gt;You must have at least one of these scopes:
            /// 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bookingId'>
            /// Filter result by booking id
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='ratePlanIds'>
            /// Filter result by requested rate plans
            /// </param>
            /// <param name='companyIds'>
            /// Filter result by requested companies
            /// </param>
            /// <param name='unitIds'>
            /// Filter result by assigned units
            /// </param>
            /// <param name='unitGroupIds'>
            /// Filter result by requested unit groups
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Filter result by requested unit group types
            /// </param>
            /// <param name='blockIds'>
            /// Filter result by requested blocks
            /// </param>
            /// <param name='status'>
            /// Filter result by reservation status
            /// </param>
            /// <param name='dateFilter'>
            /// Filter by date and time attributes of reservation. Use in combination with
            /// the 'To' and 'From' attributes.
            /// All filters will check if the date specified by the filter type is between
            /// from (included) and to (excluded).
            /// The exception being filtering for 'stay', which will return all
            /// reservations that are overlapping with the interval specified by from and
            /// to. Possible values include: 'Arrival', 'Departure', 'Stay', 'Creation',
            /// 'Modification', 'Cancellation'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time interval. When filtering by date, at least one of
            /// 'from' and 'to' has to be specified&lt;br /&gt;A date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time interval, must be larger than 'from'. When filtering by
            /// date, at least one of 'from' and 'to' has to be specified&lt;br /&gt;A date
            /// and time (without fractional second part) in UTC or with UTC offset as
            /// defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='channelCode'>
            /// Filter result by the channel code
            /// </param>
            /// <param name='sources'>
            /// Filter result by source
            /// </param>
            /// <param name='validationMessageCategory'>
            /// Filter result by validation message category
            /// </param>
            /// <param name='externalCode'>
            /// Filter result by the external code. The result set will contain all
            /// reservations that have an external code starting with the
            /// provided value
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all reservations where the provided text is contained in:
            /// booker first name or last name or email or company name,
            /// primary guest first name or last name or email or company name, external
            /// code, reservation id, unit name. The search is case insensitive.
            /// </param>
            /// <param name='balanceFilter'>
            /// This will filter reservations based on their balance.&lt;br /&gt;You can
            /// provide an array of string expressions which all need to apply.&lt;br
            /// /&gt;Each expression has the form of 'OPERATION_VALUE' where VALUE needs to
            /// be of the valid format of the property type and OPERATION can be:&lt;br
            /// /&gt;'eq' for equals&lt;br /&gt;'neq' for not equals&lt;br /&gt;'lt' for
            /// less than&lt;br /&gt;'gt' for greater than&lt;br /&gt;'lte' for less than
            /// or equals&lt;br /&gt;'gte' for greater than or equals&lt;br /&gt;For
            /// instance&lt;br /&gt;'eq_5' would mean the value should equal 5&lt;br
            /// /&gt;'lte_7' would mean the value should be less than or equal to 7
            /// </param>
            /// <param name='allFoliosHaveInvoice'>
            /// If set to {true}, returns only reservations, in which all folios are closed
            /// and have an invoice.
            /// If set to {false}, returns only reservations, in which some of the folios
            /// are open or don't have an invoice
            /// </param>
            public static object BookingReservationscountGet(this IBookingApi operations, string bookingId = default(string), IList<string> propertyIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> companyIds = default(IList<string>), IList<string> unitIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), IList<string> blockIds = default(IList<string>), IList<ReservationStatus?> status = default(IList<ReservationStatus?>), DateFilterType? dateFilter = default(DateFilterType?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), IList<string> sources = default(IList<string>), IList<ValidationMessageCategory?> validationMessageCategory = default(IList<ValidationMessageCategory?>), string externalCode = default(string), string textSearch = default(string), IList<string> balanceFilter = default(IList<string>), bool? allFoliosHaveInvoice = default(bool?))
            {
                return operations.BookingReservationscountGetAsync(bookingId, propertyIds, ratePlanIds, companyIds, unitIds, unitGroupIds, unitGroupTypes, blockIds, status, dateFilter, fromParameter, to, channelCode, sources, validationMessageCategory, externalCode, textSearch, balanceFilter, allFoliosHaveInvoice).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the number of reservations fulfilling the criteria specified in the
            /// parameters.
            /// </summary>
            /// <remarks>
            /// If no parameters are set, returns the total count of
            /// reservations.&lt;br&gt;You must have at least one of these scopes:
            /// 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bookingId'>
            /// Filter result by booking id
            /// </param>
            /// <param name='propertyIds'>
            /// Filter result by requested properties
            /// </param>
            /// <param name='ratePlanIds'>
            /// Filter result by requested rate plans
            /// </param>
            /// <param name='companyIds'>
            /// Filter result by requested companies
            /// </param>
            /// <param name='unitIds'>
            /// Filter result by assigned units
            /// </param>
            /// <param name='unitGroupIds'>
            /// Filter result by requested unit groups
            /// </param>
            /// <param name='unitGroupTypes'>
            /// Filter result by requested unit group types
            /// </param>
            /// <param name='blockIds'>
            /// Filter result by requested blocks
            /// </param>
            /// <param name='status'>
            /// Filter result by reservation status
            /// </param>
            /// <param name='dateFilter'>
            /// Filter by date and time attributes of reservation. Use in combination with
            /// the 'To' and 'From' attributes.
            /// All filters will check if the date specified by the filter type is between
            /// from (included) and to (excluded).
            /// The exception being filtering for 'stay', which will return all
            /// reservations that are overlapping with the interval specified by from and
            /// to. Possible values include: 'Arrival', 'Departure', 'Stay', 'Creation',
            /// 'Modification', 'Cancellation'
            /// </param>
            /// <param name='fromParameter'>
            /// The start of the time interval. When filtering by date, at least one of
            /// 'from' and 'to' has to be specified&lt;br /&gt;A date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end of the time interval, must be larger than 'from'. When filtering by
            /// date, at least one of 'from' and 'to' has to be specified&lt;br /&gt;A date
            /// and time (without fractional second part) in UTC or with UTC offset as
            /// defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='channelCode'>
            /// Filter result by the channel code
            /// </param>
            /// <param name='sources'>
            /// Filter result by source
            /// </param>
            /// <param name='validationMessageCategory'>
            /// Filter result by validation message category
            /// </param>
            /// <param name='externalCode'>
            /// Filter result by the external code. The result set will contain all
            /// reservations that have an external code starting with the
            /// provided value
            /// </param>
            /// <param name='textSearch'>
            /// This will filter all reservations where the provided text is contained in:
            /// booker first name or last name or email or company name,
            /// primary guest first name or last name or email or company name, external
            /// code, reservation id, unit name. The search is case insensitive.
            /// </param>
            /// <param name='balanceFilter'>
            /// This will filter reservations based on their balance.&lt;br /&gt;You can
            /// provide an array of string expressions which all need to apply.&lt;br
            /// /&gt;Each expression has the form of 'OPERATION_VALUE' where VALUE needs to
            /// be of the valid format of the property type and OPERATION can be:&lt;br
            /// /&gt;'eq' for equals&lt;br /&gt;'neq' for not equals&lt;br /&gt;'lt' for
            /// less than&lt;br /&gt;'gt' for greater than&lt;br /&gt;'lte' for less than
            /// or equals&lt;br /&gt;'gte' for greater than or equals&lt;br /&gt;For
            /// instance&lt;br /&gt;'eq_5' would mean the value should equal 5&lt;br
            /// /&gt;'lte_7' would mean the value should be less than or equal to 7
            /// </param>
            /// <param name='allFoliosHaveInvoice'>
            /// If set to {true}, returns only reservations, in which all folios are closed
            /// and have an invoice.
            /// If set to {false}, returns only reservations, in which some of the folios
            /// are open or don't have an invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationscountGetAsync(this IBookingApi operations, string bookingId = default(string), IList<string> propertyIds = default(IList<string>), IList<string> ratePlanIds = default(IList<string>), IList<string> companyIds = default(IList<string>), IList<string> unitIds = default(IList<string>), IList<string> unitGroupIds = default(IList<string>), IList<UnitGroupType?> unitGroupTypes = default(IList<UnitGroupType?>), IList<string> blockIds = default(IList<string>), IList<ReservationStatus?> status = default(IList<ReservationStatus?>), DateFilterType? dateFilter = default(DateFilterType?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), IList<ChannelCode?> channelCode = default(IList<ChannelCode?>), IList<string> sources = default(IList<string>), IList<ValidationMessageCategory?> validationMessageCategory = default(IList<ValidationMessageCategory?>), string externalCode = default(string), string textSearch = default(string), IList<string> balanceFilter = default(IList<string>), bool? allFoliosHaveInvoice = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationscountGetWithHttpMessagesAsync(bookingId, propertyIds, ratePlanIds, companyIds, unitIds, unitGroupIds, unitGroupTypes, blockIds, status, dateFilter, fromParameter, to, channelCode, sources, validationMessageCategory, externalCode, textSearch, balanceFilter, allFoliosHaveInvoice, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a specific reservation.
            /// </summary>
            /// <remarks>
            /// Retrieves a reservation, specified by its ID.&lt;br&gt;You must have at
            /// least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: timeSlices, services, booker, actions, company. All
            /// other values will be silently ignored.
            /// </param>
            public static object BookingReservationsByIdGet(this IBookingApi operations, string id, IList<string> expand = default(IList<string>))
            {
                return operations.BookingReservationsByIdGetAsync(id, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a specific reservation.
            /// </summary>
            /// <remarks>
            /// Retrieves a reservation, specified by its ID.&lt;br&gt;You must have at
            /// least one of these scopes: 'reservations.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: timeSlices, services, booker, actions, company. All
            /// other values will be silently ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationsByIdGetAsync(this IBookingApi operations, string id, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationsByIdGetWithHttpMessagesAsync(id, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows to modify certain reservation properties
            /// </summary>
            /// <remarks>
            /// Here is the list of operations that are currently allowed:
            /// - Add, replace and remove Comment
            /// - Add, replace and remove GuestComment
            /// - Add, replace and remove PaymentAccount
            /// - Add, replace and remove TravelPurpose
            /// - Add, replace and remove AdditionalGuests
            /// - Add a company (using company/Id, and only if not already set)
            /// - Add, replace and remove Commission
            /// - Replace PrimaryGuest
            /// - Remove ValidationMessages&lt;br&gt;You must have this scope:
            /// 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            public static MessageItemCollection BookingReservationsByIdPatch(this IBookingApi operations, string id, IList<Operation> body)
            {
                return operations.BookingReservationsByIdPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows to modify certain reservation properties
            /// </summary>
            /// <remarks>
            /// Here is the list of operations that are currently allowed:
            /// - Add, replace and remove Comment
            /// - Add, replace and remove GuestComment
            /// - Add, replace and remove PaymentAccount
            /// - Add, replace and remove TravelPurpose
            /// - Add, replace and remove AdditionalGuests
            /// - Add a company (using company/Id, and only if not already set)
            /// - Add, replace and remove Commission
            /// - Replace PrimaryGuest
            /// - Remove ValidationMessages&lt;br&gt;You must have this scope:
            /// 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation to be modified.
            /// </param>
            /// <param name='body'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationsByIdPatchAsync(this IBookingApi operations, string id, IList<Operation> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationsByIdPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns offers for one specific reservation.
            /// </summary>
            /// <remarks>
            /// Calculates and returns offers for amending a specific
            /// reservation.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation to be amended.
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// Number of adults
            /// </param>
            /// <param name='childrenAges'>
            /// Ages of children
            /// </param>
            /// <param name='channelCode'>
            /// The channel code used to filter the rate plans. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='promoCode'>
            /// The promo code associated with a certain special offer, like corporate rate
            /// </param>
            /// <param name='requote'>
            /// Whether the offers should be re-quoted based on current prices, or only
            /// additions like change of number of adults should be calculated.
            /// Defaults to 'false'
            /// </param>
            /// <param name='includeUnavailable'>
            /// Return also offers that are currently not publicly bookable as restrictions
            /// are violated. By default only available offers are returned
            /// </param>
            public static object BookingReservationsByIdOffersGet(this IBookingApi operations, string id, string arrival = default(string), string departure = default(string), int? adults = default(int?), IList<int?> childrenAges = default(IList<int?>), ChannelCode? channelCode = default(ChannelCode?), string promoCode = default(string), bool? requote = default(bool?), bool? includeUnavailable = default(bool?))
            {
                return operations.BookingReservationsByIdOffersGetAsync(id, arrival, departure, adults, childrenAges, channelCode, promoCode, requote, includeUnavailable).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns offers for one specific reservation.
            /// </summary>
            /// <remarks>
            /// Calculates and returns offers for amending a specific
            /// reservation.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation to be amended.
            /// </param>
            /// <param name='arrival'>
            /// Date and optional time of arrival&lt;br /&gt;Specify either a pure date or
            /// a date and time (without fractional second part) in UTC or with UTC offset
            /// as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='departure'>
            /// Date and optional time of departure. Cannot be more than 5 years after
            /// arrival.&lt;br /&gt;Specify either a pure date or a date and time (without
            /// fractional second part) in UTC or with UTC offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='adults'>
            /// Number of adults
            /// </param>
            /// <param name='childrenAges'>
            /// Ages of children
            /// </param>
            /// <param name='channelCode'>
            /// The channel code used to filter the rate plans. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='promoCode'>
            /// The promo code associated with a certain special offer, like corporate rate
            /// </param>
            /// <param name='requote'>
            /// Whether the offers should be re-quoted based on current prices, or only
            /// additions like change of number of adults should be calculated.
            /// Defaults to 'false'
            /// </param>
            /// <param name='includeUnavailable'>
            /// Return also offers that are currently not publicly bookable as restrictions
            /// are violated. By default only available offers are returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationsByIdOffersGetAsync(this IBookingApi operations, string id, string arrival = default(string), string departure = default(string), int? adults = default(int?), IList<int?> childrenAges = default(IList<int?>), ChannelCode? channelCode = default(ChannelCode?), string promoCode = default(string), bool? requote = default(bool?), bool? includeUnavailable = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationsByIdOffersGetWithHttpMessagesAsync(id, arrival, departure, adults, childrenAges, channelCode, promoCode, requote, includeUnavailable, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns service offers for one specific reservation.
            /// </summary>
            /// <remarks>
            /// Calculates and returns service offers for a specific
            /// reservation.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='channelCode'>
            /// The channel code used to filter the services. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='onlyDefaultDates'>
            /// Depending on the postNextDay setting of a service it will by default be
            /// posted before or after midnight.
            /// Breakfast is usually delivered on the next morning, so all the dates from
            /// the day after arrival to the departure day
            /// are default dates and will have this flag set to true. For services like a
            /// dinner it is the other way around.
            /// With this query parameter, you can also ask for the dates, that usually the
            /// service will not be booked. It defaults to true.
            /// </param>
            public static object BookingReservationsByIdServiceOffersGet(this IBookingApi operations, string id, ChannelCode? channelCode = default(ChannelCode?), bool? onlyDefaultDates = default(bool?))
            {
                return operations.BookingReservationsByIdServiceOffersGetAsync(id, channelCode, onlyDefaultDates).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns service offers for one specific reservation.
            /// </summary>
            /// <remarks>
            /// Calculates and returns service offers for a specific
            /// reservation.&lt;br&gt;You must have at least one of these scopes:
            /// 'offers.read, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='channelCode'>
            /// The channel code used to filter the services. Possible values include:
            /// 'Direct', 'BookingCom', 'Ibe', 'ChannelManager', 'Expedia', 'Homelike'
            /// </param>
            /// <param name='onlyDefaultDates'>
            /// Depending on the postNextDay setting of a service it will by default be
            /// posted before or after midnight.
            /// Breakfast is usually delivered on the next morning, so all the dates from
            /// the day after arrival to the departure day
            /// are default dates and will have this flag set to true. For services like a
            /// dinner it is the other way around.
            /// With this query parameter, you can also ask for the dates, that usually the
            /// service will not be booked. It defaults to true.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationsByIdServiceOffersGetAsync(this IBookingApi operations, string id, ChannelCode? channelCode = default(ChannelCode?), bool? onlyDefaultDates = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationsByIdServiceOffersGetWithHttpMessagesAsync(id, channelCode, onlyDefaultDates, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the services booked for a specific reservation.
            /// </summary>
            /// <remarks>
            /// Returns the services booked for a specific reservation.&lt;br&gt;You must
            /// have at least one of these scopes: 'reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            public static object BookingReservationsByIdServicesGet(this IBookingApi operations, string id)
            {
                return operations.BookingReservationsByIdServicesGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the services booked for a specific reservation.
            /// </summary>
            /// <remarks>
            /// Returns the services booked for a specific reservation.&lt;br&gt;You must
            /// have at least one of these scopes: 'reservations.read,
            /// reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationsByIdServicesGetAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationsByIdServicesGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a service from a reservation.
            /// </summary>
            /// <remarks>
            /// Removes a service from a reservation. The service will not be removed if it
            /// is mandatory, already posted or if the service date is in the
            /// past.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='serviceId'>
            /// The id of the service to delete
            /// </param>
            public static MessageItemCollection BookingReservationsByIdServicesDelete(this IBookingApi operations, string id, string serviceId)
            {
                return operations.BookingReservationsByIdServicesDeleteAsync(id, serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a service from a reservation.
            /// </summary>
            /// <remarks>
            /// Removes a service from a reservation. The service will not be removed if it
            /// is mandatory, already posted or if the service date is in the
            /// past.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='serviceId'>
            /// The id of the service to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationsByIdServicesDeleteAsync(this IBookingApi operations, string id, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationsByIdServicesDeleteWithHttpMessagesAsync(id, serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assign a unit to a reservation.
            /// </summary>
            /// <remarks>
            /// Assigns one of the available units to a reservation which is in state
            /// 'Confirmed' or 'InHouse'.&lt;br&gt;You must have at least one of these
            /// scopes: 'reservations.assign-unit, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation a unit should be assigned to.
            /// </param>
            public static object BookingReservationActionsByIdAssignUnitPut(this IBookingApi operations, string id)
            {
                return operations.BookingReservationActionsByIdAssignUnitPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign a unit to a reservation.
            /// </summary>
            /// <remarks>
            /// Assigns one of the available units to a reservation which is in state
            /// 'Confirmed' or 'InHouse'.&lt;br&gt;You must have at least one of these
            /// scopes: 'reservations.assign-unit, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation a unit should be assigned to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationActionsByIdAssignUnitPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdAssignUnitPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assign a specific unit to a reservation.
            /// </summary>
            /// <remarks>
            /// Assigns a specific unit to a reservation which is in state 'Confirmed' or
            /// 'InHouse'.&lt;br /&gt;If the unit is not available, the call will return an
            /// error, and no unit will be assigned.&lt;br&gt;You must have at least one of
            /// these scopes: 'reservations.assign-unit, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation the unit should be assigned to.
            /// </param>
            /// <param name='unitId'>
            /// The id of the unit to be assigned.
            /// </param>
            /// <param name='fromParameter'>
            /// The start date and optional time for the unit assignment. If not specified,
            /// the reservation's arrival will be used.&lt;br /&gt;Specify either a pure
            /// date or a date and time (without fractional second part) in UTC or with UTC
            /// offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end date and optional time for the unit assignment. If not specified,
            /// the reservation's departure will be used.&lt;br /&gt;Specify either a pure
            /// date or a date and time (without fractional second part) in UTC or with UTC
            /// offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            public static object BookingReservationActionsByIdAssignUnitByUnitIdPut(this IBookingApi operations, string id, string unitId, string fromParameter = default(string), string to = default(string))
            {
                return operations.BookingReservationActionsByIdAssignUnitByUnitIdPutAsync(id, unitId, fromParameter, to).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign a specific unit to a reservation.
            /// </summary>
            /// <remarks>
            /// Assigns a specific unit to a reservation which is in state 'Confirmed' or
            /// 'InHouse'.&lt;br /&gt;If the unit is not available, the call will return an
            /// error, and no unit will be assigned.&lt;br&gt;You must have at least one of
            /// these scopes: 'reservations.assign-unit, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation the unit should be assigned to.
            /// </param>
            /// <param name='unitId'>
            /// The id of the unit to be assigned.
            /// </param>
            /// <param name='fromParameter'>
            /// The start date and optional time for the unit assignment. If not specified,
            /// the reservation's arrival will be used.&lt;br /&gt;Specify either a pure
            /// date or a date and time (without fractional second part) in UTC or with UTC
            /// offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='to'>
            /// The end date and optional time for the unit assignment. If not specified,
            /// the reservation's departure will be used.&lt;br /&gt;Specify either a pure
            /// date or a date and time (without fractional second part) in UTC or with UTC
            /// offset as defined in &lt;a
            /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingReservationActionsByIdAssignUnitByUnitIdPutAsync(this IBookingApi operations, string id, string unitId, string fromParameter = default(string), string to = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdAssignUnitByUnitIdPutWithHttpMessagesAsync(id, unitId, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unassign units from a reservation.
            /// </summary>
            /// <remarks>
            /// Unassigns units for all time slices of the given reservation. If no units
            /// are assigned for the
            /// reservation nothing will happen. It will fail for reservations in status
            /// 'CheckedOut'.&lt;br&gt;You must have at least one of these scopes:
            /// 'reservations.assign-unit, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation the unit should be unassigned for.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdUnassignUnitsPut(this IBookingApi operations, string id)
            {
                return operations.BookingReservationActionsByIdUnassignUnitsPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unassign units from a reservation.
            /// </summary>
            /// <remarks>
            /// Unassigns units for all time slices of the given reservation. If no units
            /// are assigned for the
            /// reservation nothing will happen. It will fail for reservations in status
            /// 'CheckedOut'.&lt;br&gt;You must have at least one of these scopes:
            /// 'reservations.assign-unit, reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation the unit should be unassigned for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdUnassignUnitsPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdUnassignUnitsPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check-in of a reservation.
            /// </summary>
            /// <remarks>
            /// Check in a specific reservation which is in status 'Confirmed', and has a
            /// unit assigned. This changes the status to 'InHouse', and sets the check-in
            /// date and time.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            /// <param name='withCityTax'>
            /// Define if city tax should be added for this reservation or not. The default
            /// is "true".
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdCheckinPut(this IBookingApi operations, string id, bool? withCityTax = default(bool?))
            {
                return operations.BookingReservationActionsByIdCheckinPutAsync(id, withCityTax).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check-in of a reservation.
            /// </summary>
            /// <remarks>
            /// Check in a specific reservation which is in status 'Confirmed', and has a
            /// unit assigned. This changes the status to 'InHouse', and sets the check-in
            /// date and time.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            /// <param name='withCityTax'>
            /// Define if city tax should be added for this reservation or not. The default
            /// is "true".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdCheckinPutAsync(this IBookingApi operations, string id, bool? withCityTax = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdCheckinPutWithHttpMessagesAsync(id, withCityTax, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check-out of a reservation.
            /// </summary>
            /// <remarks>
            /// Check out a specific reservation which is in status 'InHouse'. This changes
            /// the status to 'CheckedOut', and sets the check-out date and time.
            /// All open charges on the folio will be posted.
            /// &lt;br /&gt;
            /// Check-out is only possible, if the departure date is not later than
            /// tomorrow. Otherwise, first amend the reservation and shorten the
            /// stay.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdCheckoutPut(this IBookingApi operations, string id)
            {
                return operations.BookingReservationActionsByIdCheckoutPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check-out of a reservation.
            /// </summary>
            /// <remarks>
            /// Check out a specific reservation which is in status 'InHouse'. This changes
            /// the status to 'CheckedOut', and sets the check-out date and time.
            /// All open charges on the folio will be posted.
            /// &lt;br /&gt;
            /// Check-out is only possible, if the departure date is not later than
            /// tomorrow. Otherwise, first amend the reservation and shorten the
            /// stay.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdCheckoutPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdCheckoutPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a reservation.
            /// </summary>
            /// <remarks>
            /// Cancel a specific reservation which is in status 'Confirmed' and where the
            /// arrival time is in the future.
            /// This changes the status to 'Canceled', and sets the cancellation date and
            /// time.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdCancelPut(this IBookingApi operations, string id)
            {
                return operations.BookingReservationActionsByIdCancelPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a reservation.
            /// </summary>
            /// <remarks>
            /// Cancel a specific reservation which is in status 'Confirmed' and where the
            /// arrival time is in the future.
            /// This changes the status to 'Canceled', and sets the cancellation date and
            /// time.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdCancelPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdCancelPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set a reservation to No-show.
            /// </summary>
            /// <remarks>
            /// Set a specific reservation to No-show which is in status 'Confirmed' and
            /// where the arrival date is in the past.
            /// This changes the status to 'NoShow', and sets the no-show date and
            /// time.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdNoshowPut(this IBookingApi operations, string id)
            {
                return operations.BookingReservationActionsByIdNoshowPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set a reservation to No-show.
            /// </summary>
            /// <remarks>
            /// Set a specific reservation to No-show which is in status 'Confirmed' and
            /// where the arrival date is in the past.
            /// This changes the status to 'NoShow', and sets the no-show date and
            /// time.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be processed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdNoshowPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdNoshowPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows you to amend the stay details of a reservation
            /// </summary>
            /// <remarks>
            /// Modifies the stay-related data of a reservation.&lt;br /&gt;
            /// If a reservation is 'Confirmed', you can change all fields.&lt;br /&gt;
            /// If a reservation is 'InHouse', only changes to future time slices are
            /// possible.&lt;br /&gt;
            /// Changes to reservations that are in the status 'CheckedOut' or 'Canceled'
            /// are not possible at all.&lt;br&gt;You must have this scope:
            /// 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be modified
            /// </param>
            /// <param name='body'>
            /// The new stay details that should be applied to the reservation.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdAmendPut(this IBookingApi operations, string id, DesiredStayDetailsModel body)
            {
                return operations.BookingReservationActionsByIdAmendPutAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows you to amend the stay details of a reservation
            /// </summary>
            /// <remarks>
            /// Modifies the stay-related data of a reservation.&lt;br /&gt;
            /// If a reservation is 'Confirmed', you can change all fields.&lt;br /&gt;
            /// If a reservation is 'InHouse', only changes to future time slices are
            /// possible.&lt;br /&gt;
            /// Changes to reservations that are in the status 'CheckedOut' or 'Canceled'
            /// are not possible at all.&lt;br&gt;You must have this scope:
            /// 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be modified
            /// </param>
            /// <param name='body'>
            /// The new stay details that should be applied to the reservation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdAmendPutAsync(this IBookingApi operations, string id, DesiredStayDetailsModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdAmendPutWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows you to amend the stay details of a reservation regardless of
            /// availability or restrictions.
            /// </summary>
            /// <remarks>
            /// Modifies the stay-related data of a reservation.&lt;br /&gt;
            /// If a reservation is 'Confirmed', you can change all fields.&lt;br /&gt;
            /// If a reservation is 'InHouse', only changes to future time slices are
            /// possible.&lt;br /&gt;
            /// Changes to reservations that are in the status 'CheckedOut' or 'Canceled'
            /// are not possible at all.&lt;br&gt;You must have this scope:
            /// 'reservations.force-manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be modified
            /// </param>
            /// <param name='body'>
            /// The new stay details that should be applied to the reservation.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdAmendforcePut(this IBookingApi operations, string id, DesiredStayDetailsModel body)
            {
                return operations.BookingReservationActionsByIdAmendforcePutAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows you to amend the stay details of a reservation regardless of
            /// availability or restrictions.
            /// </summary>
            /// <remarks>
            /// Modifies the stay-related data of a reservation.&lt;br /&gt;
            /// If a reservation is 'Confirmed', you can change all fields.&lt;br /&gt;
            /// If a reservation is 'InHouse', only changes to future time slices are
            /// possible.&lt;br /&gt;
            /// Changes to reservations that are in the status 'CheckedOut' or 'Canceled'
            /// are not possible at all.&lt;br&gt;You must have this scope:
            /// 'reservations.force-manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation that should be modified
            /// </param>
            /// <param name='body'>
            /// The new stay details that should be applied to the reservation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdAmendforcePutAsync(this IBookingApi operations, string id, DesiredStayDetailsModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdAmendforcePutWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Book the service for a specific reservation.
            /// </summary>
            /// <remarks>
            /// Use this to book a service for a specific reservation.
            /// Please note that when dates are specified, all desired dates must be
            /// specified or they will be removed if not posted to the folio.&lt;br&gt;You
            /// must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdBookServicePut(this IBookingApi operations, string id, BookReservationServiceModel body)
            {
                return operations.BookingReservationActionsByIdBookServicePutAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Book the service for a specific reservation.
            /// </summary>
            /// <remarks>
            /// Use this to book a service for a specific reservation.
            /// Please note that when dates are specified, all desired dates must be
            /// specified or they will be removed if not posted to the folio.&lt;br&gt;You
            /// must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdBookServicePutAsync(this IBookingApi operations, string id, BookReservationServiceModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdBookServicePutWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the city tax from a reservation.
            /// </summary>
            /// <remarks>
            /// Use this is you want to remove the city tax from a reservation before the
            /// stay.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdRemoveCityTaxPut(this IBookingApi operations, string id)
            {
                return operations.BookingReservationActionsByIdRemoveCityTaxPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the city tax from a reservation.
            /// </summary>
            /// <remarks>
            /// Use this is you want to remove the city tax from a reservation before the
            /// stay.&lt;br&gt;You must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdRemoveCityTaxPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdRemoveCityTaxPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the city tax to a reservation.
            /// </summary>
            /// <remarks>
            /// Use this if you want to add the city tax to a reservation.&lt;br&gt;You
            /// must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            public static MessageItemCollection BookingReservationActionsByIdAddCityTaxPut(this IBookingApi operations, string id)
            {
                return operations.BookingReservationActionsByIdAddCityTaxPutAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the city tax to a reservation.
            /// </summary>
            /// <remarks>
            /// Use this if you want to add the city tax to a reservation.&lt;br&gt;You
            /// must have this scope: 'reservations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the reservation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> BookingReservationActionsByIdAddCityTaxPutAsync(this IBookingApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingReservationActionsByIdAddCityTaxPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of supported sources.
            /// </summary>
            /// <remarks>
            /// Returns a list of channels that could be used as a source to create
            /// bookings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object BookingTypesSourcesGet(this IBookingApi operations)
            {
                return operations.BookingTypesSourcesGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of supported sources.
            /// </summary>
            /// <remarks>
            /// Returns a list of channels that could be used as a source to create
            /// bookings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BookingTypesSourcesGetAsync(this IBookingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookingTypesSourcesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
