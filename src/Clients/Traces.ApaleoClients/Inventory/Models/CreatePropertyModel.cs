// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Inventory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CreatePropertyModel
    {
        /// <summary>
        /// Initializes a new instance of the CreatePropertyModel class.
        /// </summary>
        public CreatePropertyModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreatePropertyModel class.
        /// </summary>
        /// <param name="code">The code for the property that can be shown in
        /// reports and table views</param>
        /// <param name="commercialRegisterEntry">The entry in the Commercial
        /// Reigster of the company running the property, as it should appear
        /// on invoices</param>
        /// <param name="companyName">The legal name of the company running the
        /// property.</param>
        /// <param name="currencyCode">The currency a property works
        /// with.</param>
        /// <param name="defaultCheckInTime">The default check-in time&lt;br
        /// /&gt;Specify a time (without fractional second part) as defined in
        /// the &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="defaultCheckOutTime">The default check-out time&lt;br
        /// /&gt;Specify a time (without fractional second part) as defined in
        /// the &lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601:2004&lt;/a&gt;</param>
        /// <param name="location">The location of the property</param>
        /// <param name="name">The name for the property</param>
        /// <param name="paymentTerms">The payment terms used for all rate
        /// plans</param>
        /// <param name="taxId">The Tax-ID of the company running the property,
        /// as it should appear on invoices</param>
        /// <param name="timeZone">The time zone name of the property from the
        /// IANA Time Zone Database.
        /// (see:
        /// https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)</param>
        /// <param name="bankAccount">Bank account information of the company
        /// running the property</param>
        /// <param name="description">The description for the property</param>
        /// <param name="managingDirectors">The managing director(s) of the
        /// company, as they should appear on invoices</param>
        public CreatePropertyModel(string code, string commercialRegisterEntry, string companyName, string currencyCode, string defaultCheckInTime, string defaultCheckOutTime, CreateAddressModel location, IDictionary<string, string> name, IDictionary<string, string> paymentTerms, string taxId, string timeZone, BankAccountModel bankAccount = default(BankAccountModel), IDictionary<string, string> description = default(IDictionary<string, string>), string managingDirectors = default(string))
        {
            BankAccount = bankAccount;
            Code = code;
            CommercialRegisterEntry = commercialRegisterEntry;
            CompanyName = companyName;
            CurrencyCode = currencyCode;
            DefaultCheckInTime = defaultCheckInTime;
            DefaultCheckOutTime = defaultCheckOutTime;
            Description = description;
            Location = location;
            ManagingDirectors = managingDirectors;
            Name = name;
            PaymentTerms = paymentTerms;
            TaxId = taxId;
            TimeZone = timeZone;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets bank account information of the company running the
        /// property
        /// </summary>
        [JsonProperty(PropertyName = "bankAccount")]
        public BankAccountModel BankAccount { get; set; }

        /// <summary>
        /// Gets or sets the code for the property that can be shown in reports
        /// and table views
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the entry in the Commercial Reigster of the company
        /// running the property, as it should appear on invoices
        /// </summary>
        [JsonProperty(PropertyName = "commercialRegisterEntry")]
        public string CommercialRegisterEntry { get; set; }

        /// <summary>
        /// Gets or sets the legal name of the company running the property.
        /// </summary>
        [JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or sets the currency a property works with.
        /// </summary>
        [JsonProperty(PropertyName = "currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or sets the default check-in time&amp;lt;br /&amp;gt;Specify a
        /// time (without fractional second part) as defined in the &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "defaultCheckInTime")]
        public string DefaultCheckInTime { get; set; }

        /// <summary>
        /// Gets or sets the default check-out time&amp;lt;br /&amp;gt;Specify
        /// a time (without fractional second part) as defined in the &amp;lt;a
        /// href="https://en.wikipedia.org/wiki/ISO_8601"&amp;gt;ISO8601:2004&amp;lt;/a&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "defaultCheckOutTime")]
        public string DefaultCheckOutTime { get; set; }

        /// <summary>
        /// Gets or sets the description for the property
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or sets the location of the property
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public CreateAddressModel Location { get; set; }

        /// <summary>
        /// Gets or sets the managing director(s) of the company, as they
        /// should appear on invoices
        /// </summary>
        [JsonProperty(PropertyName = "managingDirectors")]
        public string ManagingDirectors { get; set; }

        /// <summary>
        /// Gets or sets the name for the property
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public IDictionary<string, string> Name { get; set; }

        /// <summary>
        /// Gets or sets the payment terms used for all rate plans
        /// </summary>
        [JsonProperty(PropertyName = "paymentTerms")]
        public IDictionary<string, string> PaymentTerms { get; set; }

        /// <summary>
        /// Gets or sets the Tax-ID of the company running the property, as it
        /// should appear on invoices
        /// </summary>
        [JsonProperty(PropertyName = "taxId")]
        public string TaxId { get; set; }

        /// <summary>
        /// Gets or sets the time zone name of the property from the IANA Time
        /// Zone Database.
        /// (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
        /// </summary>
        [JsonProperty(PropertyName = "timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (CommercialRegisterEntry == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommercialRegisterEntry");
            }
            if (CompanyName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CompanyName");
            }
            if (CurrencyCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CurrencyCode");
            }
            if (DefaultCheckInTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultCheckInTime");
            }
            if (DefaultCheckOutTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultCheckOutTime");
            }
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (PaymentTerms == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PaymentTerms");
            }
            if (TaxId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TaxId");
            }
            if (TimeZone == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TimeZone");
            }
            if (Code != null)
            {
                if (Code.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Code", 10);
                }
                if (Code.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Code", 3);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Code, "^[a-zA-Z0-9_]*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Code", "^[a-zA-Z0-9_]*$");
                }
            }
            if (Location != null)
            {
                Location.Validate();
            }
        }
    }
}
