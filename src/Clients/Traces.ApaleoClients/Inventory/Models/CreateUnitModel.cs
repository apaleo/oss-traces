// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Inventory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CreateUnitModel
    {
        /// <summary>
        /// Initializes a new instance of the CreateUnitModel class.
        /// </summary>
        public CreateUnitModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateUnitModel class.
        /// </summary>
        /// <param name="description">The description for the unit</param>
        /// <param name="maxPersons">Maximum number of persons for the
        /// unit</param>
        /// <param name="name">The name for the unit</param>
        /// <param name="propertyId">The id of the property where the unit will
        /// be created</param>
        /// <param name="condition">Condition of the unit. Possible values
        /// include: 'Clean', 'CleanToBeInspected', 'Dirty'</param>
        /// <param name="unitGroupId">The id of the unit group</param>
        public CreateUnitModel(IDictionary<string, string> description, int maxPersons, string name, string propertyId, UnitCondition? condition = default(UnitCondition?), string unitGroupId = default(string))
        {
            Condition = condition;
            Description = description;
            MaxPersons = maxPersons;
            Name = name;
            PropertyId = propertyId;
            UnitGroupId = unitGroupId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets condition of the unit. Possible values include:
        /// 'Clean', 'CleanToBeInspected', 'Dirty'
        /// </summary>
        [JsonProperty(PropertyName = "condition")]
        public UnitCondition? Condition { get; set; }

        /// <summary>
        /// Gets or sets the description for the unit
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or sets maximum number of persons for the unit
        /// </summary>
        [JsonProperty(PropertyName = "maxPersons")]
        public int MaxPersons { get; set; }

        /// <summary>
        /// Gets or sets the name for the unit
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the id of the property where the unit will be created
        /// </summary>
        [JsonProperty(PropertyName = "propertyId")]
        public string PropertyId { get; set; }

        /// <summary>
        /// Gets or sets the id of the unit group
        /// </summary>
        [JsonProperty(PropertyName = "unitGroupId")]
        public string UnitGroupId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (PropertyId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PropertyId");
            }
            if (MaxPersons > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPersons", 2147483647);
            }
            if (MaxPersons < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPersons", 1);
            }
        }
    }
}
