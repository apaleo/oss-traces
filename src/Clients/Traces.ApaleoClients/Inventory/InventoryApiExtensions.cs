// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Inventory
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InventoryApi.
    /// </summary>
    public static partial class InventoryApiExtensions
    {
            /// <summary>
            /// Get a properties list
            /// </summary>
            /// <remarks>
            /// Get the list of properties.&lt;br&gt;Scopes required: 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            public static object InventoryPropertiesGet(this IInventoryApi operations, int? pageNumber = 1, int? pageSize = 100)
            {
                return operations.InventoryPropertiesGetAsync(pageNumber, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a properties list
            /// </summary>
            /// <remarks>
            /// Get the list of properties.&lt;br&gt;Scopes required: 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryPropertiesGetAsync(this IInventoryApi operations, int? pageNumber = 1, int? pageSize = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryPropertiesGetWithHttpMessagesAsync(pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a property
            /// </summary>
            /// <remarks>
            /// Use this call to create a new property.&lt;br&gt;Scopes required:
            /// 'properties.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the property.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object InventoryPropertiesPost(this IInventoryApi operations, CreatePropertyModel requestBody, string idempotencyKey = default(string))
            {
                return operations.InventoryPropertiesPostAsync(requestBody, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a property
            /// </summary>
            /// <remarks>
            /// Use this call to create a new property.&lt;br&gt;Scopes required:
            /// 'properties.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the property.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryPropertiesPostAsync(this IInventoryApi operations, CreatePropertyModel requestBody, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryPropertiesPostWithHttpMessagesAsync(requestBody, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return total count of properties
            /// </summary>
            /// <remarks>
            /// Return total count of properties&lt;br&gt;Scopes required:
            /// 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object InventoryPropertiescountGet(this IInventoryApi operations)
            {
                return operations.InventoryPropertiescountGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return total count of properties
            /// </summary>
            /// <remarks>
            /// Return total count of properties&lt;br&gt;Scopes required:
            /// 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryPropertiescountGetAsync(this IInventoryApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryPropertiescountGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a property
            /// </summary>
            /// <remarks>
            /// Get a property by id.&lt;br&gt;Scopes required: 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the property.
            /// </param>
            /// <param name='languages'>
            /// 'all' or comma separated list of two-letter language codes (ISO Alpha-2)
            /// </param>
            public static object InventoryPropertiesByIdGet(this IInventoryApi operations, string id, IList<string> languages = default(IList<string>))
            {
                return operations.InventoryPropertiesByIdGetAsync(id, languages).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a property
            /// </summary>
            /// <remarks>
            /// Get a property by id.&lt;br&gt;Scopes required: 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the property.
            /// </param>
            /// <param name='languages'>
            /// 'all' or comma separated list of two-letter language codes (ISO Alpha-2)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryPropertiesByIdGetAsync(this IInventoryApi operations, string id, IList<string> languages = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryPropertiesByIdGetWithHttpMessagesAsync(id, languages, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a property exists
            /// </summary>
            /// <remarks>
            /// Check if a property exists by id.&lt;br&gt;Scopes required:
            /// 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the property.
            /// </param>
            public static void InventoryPropertiesByIdHead(this IInventoryApi operations, string id)
            {
                operations.InventoryPropertiesByIdHeadAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a property exists
            /// </summary>
            /// <remarks>
            /// Check if a property exists by id.&lt;br&gt;Scopes required:
            /// 'properties.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the property.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InventoryPropertiesByIdHeadAsync(this IInventoryApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InventoryPropertiesByIdHeadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Allows to modify property
            /// </summary>
            /// <remarks>
            /// Here's a list of allowed operations:
            /// - Replace Name
            /// - Add, replace and remove Description
            /// - Replace CompanyName
            /// - Add, replace and remove ManagingDirectors
            /// - Replace CommercialRegisterEntry
            /// - Replace TaxId
            /// - Replace Location
            /// - Add, replace and remove BankAccount
            /// - Replace PaymentTerms
            /// - Set IsTemplate&lt;br&gt;Scopes required: 'properties.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the property.
            /// </param>
            /// <param name='request'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            public static MessageItemCollection InventoryPropertiesByIdPatch(this IInventoryApi operations, string id, IList<Operation> request)
            {
                return operations.InventoryPropertiesByIdPatchAsync(id, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows to modify property
            /// </summary>
            /// <remarks>
            /// Here's a list of allowed operations:
            /// - Replace Name
            /// - Add, replace and remove Description
            /// - Replace CompanyName
            /// - Add, replace and remove ManagingDirectors
            /// - Replace CommercialRegisterEntry
            /// - Replace TaxId
            /// - Replace Location
            /// - Add, replace and remove BankAccount
            /// - Replace PaymentTerms
            /// - Set IsTemplate&lt;br&gt;Scopes required: 'properties.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the property.
            /// </param>
            /// <param name='request'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> InventoryPropertiesByIdPatchAsync(this IInventoryApi operations, string id, IList<Operation> request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryPropertiesByIdPatchWithHttpMessagesAsync(id, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of supported countries.
            /// </summary>
            /// <remarks>
            /// Returns a list of ISO country codes that could be used to create
            /// properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object InventoryTypesCountriesGet(this IInventoryApi operations)
            {
                return operations.InventoryTypesCountriesGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of supported countries.
            /// </summary>
            /// <remarks>
            /// Returns a list of ISO country codes that could be used to create
            /// properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryTypesCountriesGetAsync(this IInventoryApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryTypesCountriesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all unit groups, or all unit groups for a property
            /// </summary>
            /// <remarks>
            /// Get the list of unit groups.&lt;br&gt;Scopes required: 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return unit groups for specific property
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property. All other values will be silently ignored.
            /// </param>
            public static object InventoryUnitGroupsGet(this IInventoryApi operations, string propertyId = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>))
            {
                return operations.InventoryUnitGroupsGetAsync(propertyId, pageNumber, pageSize, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all unit groups, or all unit groups for a property
            /// </summary>
            /// <remarks>
            /// Get the list of unit groups.&lt;br&gt;Scopes required: 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return unit groups for specific property
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property. All other values will be silently ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitGroupsGetAsync(this IInventoryApi operations, string propertyId = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitGroupsGetWithHttpMessagesAsync(propertyId, pageNumber, pageSize, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a unit group
            /// </summary>
            /// <remarks>
            /// Use this call to create a new unit group.&lt;br&gt;Scopes required:
            /// 'unitgroups.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the unit group.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object InventoryUnitGroupsPost(this IInventoryApi operations, CreateUnitGroupModel requestBody, string idempotencyKey = default(string))
            {
                return operations.InventoryUnitGroupsPostAsync(requestBody, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a unit group
            /// </summary>
            /// <remarks>
            /// Use this call to create a new unit group.&lt;br&gt;Scopes required:
            /// 'unitgroups.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the unit group.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitGroupsPostAsync(this IInventoryApi operations, CreateUnitGroupModel requestBody, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitGroupsPostWithHttpMessagesAsync(requestBody, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns number of unit groups
            /// </summary>
            /// <remarks>
            /// Returns number of unit groups matching the filter criteria&lt;br&gt;Scopes
            /// required: 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return unit groups for specific property
            /// </param>
            public static object InventoryUnitGroupscountGet(this IInventoryApi operations, string propertyId = default(string))
            {
                return operations.InventoryUnitGroupscountGetAsync(propertyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns number of unit groups
            /// </summary>
            /// <remarks>
            /// Returns number of unit groups matching the filter criteria&lt;br&gt;Scopes
            /// required: 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return unit groups for specific property
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitGroupscountGetAsync(this IInventoryApi operations, string propertyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitGroupscountGetWithHttpMessagesAsync(propertyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a unit group
            /// </summary>
            /// <remarks>
            /// Use this call to delete a unit group.&lt;br&gt;Scopes required:
            /// 'unitgroups.delete'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            public static void InventoryUnitGroupsByIdDelete(this IInventoryApi operations, string id)
            {
                operations.InventoryUnitGroupsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a unit group
            /// </summary>
            /// <remarks>
            /// Use this call to delete a unit group.&lt;br&gt;Scopes required:
            /// 'unitgroups.delete'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InventoryUnitGroupsByIdDeleteAsync(this IInventoryApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InventoryUnitGroupsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a unit group
            /// </summary>
            /// <remarks>
            /// Get a unit group by id.&lt;br&gt;Scopes required: 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            /// <param name='languages'>
            /// 'all' or comma separated list of two-letter language codes (ISO Alpha-2)
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property. All other values will be silently ignored.
            /// </param>
            public static object InventoryUnitGroupsByIdGet(this IInventoryApi operations, string id, IList<string> languages = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.InventoryUnitGroupsByIdGetAsync(id, languages, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a unit group
            /// </summary>
            /// <remarks>
            /// Get a unit group by id.&lt;br&gt;Scopes required: 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            /// <param name='languages'>
            /// 'all' or comma separated list of two-letter language codes (ISO Alpha-2)
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property. All other values will be silently ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitGroupsByIdGetAsync(this IInventoryApi operations, string id, IList<string> languages = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitGroupsByIdGetWithHttpMessagesAsync(id, languages, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a unit group exists
            /// </summary>
            /// <remarks>
            /// Check if a unit group exists by id.&lt;br&gt;Scopes required:
            /// 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            public static void InventoryUnitGroupsByIdHead(this IInventoryApi operations, string id)
            {
                operations.InventoryUnitGroupsByIdHeadAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a unit group exists
            /// </summary>
            /// <remarks>
            /// Check if a unit group exists by id.&lt;br&gt;Scopes required:
            /// 'unitgroups.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InventoryUnitGroupsByIdHeadAsync(this IInventoryApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InventoryUnitGroupsByIdHeadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Replace a unit group
            /// </summary>
            /// <remarks>
            /// Use this call to modify a unit group.&lt;br&gt;Scopes required:
            /// 'unitgroups.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the unit group.
            /// </param>
            public static MessageItemCollection InventoryUnitGroupsByIdPut(this IInventoryApi operations, string id, ReplaceUnitGroupModel requestBody)
            {
                return operations.InventoryUnitGroupsByIdPutAsync(id, requestBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace a unit group
            /// </summary>
            /// <remarks>
            /// Use this call to modify a unit group.&lt;br&gt;Scopes required:
            /// 'unitgroups.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit group.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the unit group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> InventoryUnitGroupsByIdPutAsync(this IInventoryApi operations, string id, ReplaceUnitGroupModel requestBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitGroupsByIdPutWithHttpMessagesAsync(id, requestBody, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a units list
            /// </summary>
            /// <remarks>
            /// Get the list of units.&lt;br&gt;Scopes required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return units for specific property
            /// </param>
            /// <param name='unitGroupId'>
            /// Return units for the specific unit group
            /// </param>
            /// <param name='isOccupied'>
            /// Return only occupied or vacant units
            /// </param>
            /// <param name='maintenanceType'>
            /// Return units with the specific maintenance type. Possible values include:
            /// 'OutOfService', 'OutOfOrder', 'OutOfInventory'
            /// </param>
            /// <param name='condition'>
            /// Return units with a specific condition. Possible values include: 'Clean',
            /// 'CleanToBeInspected', 'Dirty'
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup. All other values will be silently
            /// ignored.
            /// </param>
            public static object InventoryUnitsGet(this IInventoryApi operations, string propertyId = default(string), string unitGroupId = default(string), bool? isOccupied = default(bool?), string maintenanceType = default(string), string condition = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>))
            {
                return operations.InventoryUnitsGetAsync(propertyId, unitGroupId, isOccupied, maintenanceType, condition, pageNumber, pageSize, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a units list
            /// </summary>
            /// <remarks>
            /// Get the list of units.&lt;br&gt;Scopes required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return units for specific property
            /// </param>
            /// <param name='unitGroupId'>
            /// Return units for the specific unit group
            /// </param>
            /// <param name='isOccupied'>
            /// Return only occupied or vacant units
            /// </param>
            /// <param name='maintenanceType'>
            /// Return units with the specific maintenance type. Possible values include:
            /// 'OutOfService', 'OutOfOrder', 'OutOfInventory'
            /// </param>
            /// <param name='condition'>
            /// Return units with a specific condition. Possible values include: 'Clean',
            /// 'CleanToBeInspected', 'Dirty'
            /// </param>
            /// <param name='pageNumber'>
            /// Page number, starting from 1 and defaulting to 1. Results in 204 if there
            /// are no items on that page.
            /// </param>
            /// <param name='pageSize'>
            /// Page size. If this is not set, the pageNumber will be ignored and all
            /// values returned.
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup. All other values will be silently
            /// ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitsGetAsync(this IInventoryApi operations, string propertyId = default(string), string unitGroupId = default(string), bool? isOccupied = default(bool?), string maintenanceType = default(string), string condition = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitsGetWithHttpMessagesAsync(propertyId, unitGroupId, isOccupied, maintenanceType, condition, pageNumber, pageSize, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows to patch one or more units
            /// </summary>
            /// <remarks>
            /// Here's a list of allowed operations:
            /// - Set unit condition
            /// - Set unit description
            /// - Set unit name
            /// - Set unit unitGroupId
            /// - Set unit maxPersons&lt;br&gt;Scopes required: 'units.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unitIds'>
            /// </param>
            /// <param name='request'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            public static MessageItemCollection InventoryUnitsPatch(this IInventoryApi operations, IList<string> unitIds, IList<Operation> request)
            {
                return operations.InventoryUnitsPatchAsync(unitIds, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows to patch one or more units
            /// </summary>
            /// <remarks>
            /// Here's a list of allowed operations:
            /// - Set unit condition
            /// - Set unit description
            /// - Set unit name
            /// - Set unit unitGroupId
            /// - Set unit maxPersons&lt;br&gt;Scopes required: 'units.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unitIds'>
            /// </param>
            /// <param name='request'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> InventoryUnitsPatchAsync(this IInventoryApi operations, IList<string> unitIds, IList<Operation> request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitsPatchWithHttpMessagesAsync(unitIds, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a unit
            /// </summary>
            /// <remarks>
            /// Use this call to create a new unit.&lt;br&gt;Scopes required:
            /// 'units.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the unit.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object InventoryUnitsPost(this IInventoryApi operations, CreateUnitModel requestBody, string idempotencyKey = default(string))
            {
                return operations.InventoryUnitsPostAsync(requestBody, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a unit
            /// </summary>
            /// <remarks>
            /// Use this call to create a new unit.&lt;br&gt;Scopes required:
            /// 'units.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the unit.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitsPostAsync(this IInventoryApi operations, CreateUnitModel requestBody, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitsPostWithHttpMessagesAsync(requestBody, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns number of units
            /// </summary>
            /// <remarks>
            /// Returns number of units matching the filter criteria&lt;br&gt;Scopes
            /// required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return units for specific property
            /// </param>
            /// <param name='unitGroupId'>
            /// Return units for the specific unit group
            /// </param>
            /// <param name='isOccupied'>
            /// Return only occupied or vacant units
            /// </param>
            /// <param name='maintenanceType'>
            /// Return units with the specific maintenance type. Possible values include:
            /// 'OutOfService', 'OutOfOrder', 'OutOfInventory'
            /// </param>
            /// <param name='condition'>
            /// Return units with a specific condition. Possible values include: 'Clean',
            /// 'CleanToBeInspected', 'Dirty'
            /// </param>
            public static object InventoryUnitscountGet(this IInventoryApi operations, string propertyId = default(string), string unitGroupId = default(string), bool? isOccupied = default(bool?), string maintenanceType = default(string), string condition = default(string))
            {
                return operations.InventoryUnitscountGetAsync(propertyId, unitGroupId, isOccupied, maintenanceType, condition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns number of units
            /// </summary>
            /// <remarks>
            /// Returns number of units matching the filter criteria&lt;br&gt;Scopes
            /// required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// Return units for specific property
            /// </param>
            /// <param name='unitGroupId'>
            /// Return units for the specific unit group
            /// </param>
            /// <param name='isOccupied'>
            /// Return only occupied or vacant units
            /// </param>
            /// <param name='maintenanceType'>
            /// Return units with the specific maintenance type. Possible values include:
            /// 'OutOfService', 'OutOfOrder', 'OutOfInventory'
            /// </param>
            /// <param name='condition'>
            /// Return units with a specific condition. Possible values include: 'Clean',
            /// 'CleanToBeInspected', 'Dirty'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitscountGetAsync(this IInventoryApi operations, string propertyId = default(string), string unitGroupId = default(string), bool? isOccupied = default(bool?), string maintenanceType = default(string), string condition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitscountGetWithHttpMessagesAsync(propertyId, unitGroupId, isOccupied, maintenanceType, condition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create multiple units
            /// </summary>
            /// <remarks>
            /// Use this call to create multiple units, following a naming
            /// rule.&lt;br&gt;Scopes required: 'units.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the units.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            public static object InventoryUnitsBulkPost(this IInventoryApi operations, BulkCreateUnitsModel requestBody, string idempotencyKey = default(string))
            {
                return operations.InventoryUnitsBulkPostAsync(requestBody, idempotencyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create multiple units
            /// </summary>
            /// <remarks>
            /// Use this call to create multiple units, following a naming
            /// rule.&lt;br&gt;Scopes required: 'units.create'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// The definition of the units.
            /// </param>
            /// <param name='idempotencyKey'>
            /// Unique key for safely retrying requests without accidentally performing the
            /// same operation twice.
            /// We'll always send back the same response for requests made with the same
            /// key,
            /// and keys can't be reused with different request parameters. Keys expire
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitsBulkPostAsync(this IInventoryApi operations, BulkCreateUnitsModel requestBody, string idempotencyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitsBulkPostWithHttpMessagesAsync(requestBody, idempotencyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a unit
            /// </summary>
            /// <remarks>
            /// Use this call to delete a unit.&lt;br&gt;Scopes required: 'units.delete'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            public static void InventoryUnitsByIdDelete(this IInventoryApi operations, string id)
            {
                operations.InventoryUnitsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a unit
            /// </summary>
            /// <remarks>
            /// Use this call to delete a unit.&lt;br&gt;Scopes required: 'units.delete'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InventoryUnitsByIdDeleteAsync(this IInventoryApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InventoryUnitsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a unit
            /// </summary>
            /// <remarks>
            /// Get a unit by id.&lt;br&gt;Scopes required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            /// <param name='languages'>
            /// 'all' or comma separated list of two-letter language codes (ISO Alpha-2)
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup. All other values will be silently
            /// ignored.
            /// </param>
            public static object InventoryUnitsByIdGet(this IInventoryApi operations, string id, IList<string> languages = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.InventoryUnitsByIdGetAsync(id, languages, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a unit
            /// </summary>
            /// <remarks>
            /// Get a unit by id.&lt;br&gt;Scopes required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            /// <param name='languages'>
            /// 'all' or comma separated list of two-letter language codes (ISO Alpha-2)
            /// </param>
            /// <param name='expand'>
            /// List of all embedded resources that should be expanded in the response.
            /// Possible values are: property, unitGroup. All other values will be silently
            /// ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InventoryUnitsByIdGetAsync(this IInventoryApi operations, string id, IList<string> languages = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitsByIdGetWithHttpMessagesAsync(id, languages, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a unit exists
            /// </summary>
            /// <remarks>
            /// Check if a unit exists by id.&lt;br&gt;Scopes required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            public static void InventoryUnitsByIdHead(this IInventoryApi operations, string id)
            {
                operations.InventoryUnitsByIdHeadAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a unit exists
            /// </summary>
            /// <remarks>
            /// Check if a unit exists by id.&lt;br&gt;Scopes required: 'units.read'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InventoryUnitsByIdHeadAsync(this IInventoryApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InventoryUnitsByIdHeadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Allows to patch unit
            /// </summary>
            /// <remarks>
            /// Here's a list of allowed operations:
            /// - Set unit condition
            /// - Set unit description
            /// - Set unit name
            /// - Set unit unitGroupId
            /// - Set unit maxPersons&lt;br&gt;Scopes required: 'units.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            /// <param name='request'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            public static MessageItemCollection InventoryUnitsByIdPatch(this IInventoryApi operations, string id, IList<Operation> request)
            {
                return operations.InventoryUnitsByIdPatchAsync(id, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows to patch unit
            /// </summary>
            /// <remarks>
            /// Here's a list of allowed operations:
            /// - Set unit condition
            /// - Set unit description
            /// - Set unit name
            /// - Set unit unitGroupId
            /// - Set unit maxPersons&lt;br&gt;Scopes required: 'units.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the unit.
            /// </param>
            /// <param name='request'>
            /// Define the list of operations to be applied to the resource. Learn more
            /// about JSON Patch here: http://jsonpatch.com/.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> InventoryUnitsByIdPatchAsync(this IInventoryApi operations, string id, IList<Operation> request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InventoryUnitsByIdPatchWithHttpMessagesAsync(id, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
