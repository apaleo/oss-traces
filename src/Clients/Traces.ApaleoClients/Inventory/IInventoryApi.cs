// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Inventory
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Setup and manage &lt;b&gt;properties&lt;/b&gt; (hotels, etc.) and all
    /// the entites in them to rent out:
    /// &lt;b&gt;Units&lt;/b&gt; such as rooms, parking lots, beds, meeting
    /// rooms, etc. Units can be combined into &lt;b&gt;groups&lt;/b&gt;
    /// (single rooms, double rooms).
    /// </summary>
    public partial interface IInventoryApi : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Get a properties list
        /// </summary>
        /// <remarks>
        /// Get the list of properties.&lt;br&gt;Scopes required:
        /// 'properties.read'.
        /// </remarks>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryPropertiesGetWithHttpMessagesAsync(int? pageNumber = 1, int? pageSize = 100, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a property
        /// </summary>
        /// <remarks>
        /// Use this call to create a new property.&lt;br&gt;Scopes required:
        /// 'properties.create'.
        /// </remarks>
        /// <param name='requestBody'>
        /// The definition of the property.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,InventoryPropertiesPostHeaders>> InventoryPropertiesPostWithHttpMessagesAsync(CreatePropertyModel requestBody, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return total count of properties
        /// </summary>
        /// <remarks>
        /// Return total count of properties&lt;br&gt;Scopes required:
        /// 'properties.read'.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryPropertiescountGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a property
        /// </summary>
        /// <remarks>
        /// Get a property by id.&lt;br&gt;Scopes required: 'properties.read'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the property.
        /// </param>
        /// <param name='languages'>
        /// 'all' or comma separated list of two-letter language codes (ISO
        /// Alpha-2)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryPropertiesByIdGetWithHttpMessagesAsync(string id, IList<string> languages = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if a property exists
        /// </summary>
        /// <remarks>
        /// Check if a property exists by id.&lt;br&gt;Scopes required:
        /// 'properties.read'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the property.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InventoryPropertiesByIdHeadWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows to modify property
        /// </summary>
        /// <remarks>
        /// Here's a list of allowed operations:
        /// - Replace Name
        /// - Add, replace and remove Description
        /// - Replace CompanyName
        /// - Add, replace and remove ManagingDirectors
        /// - Replace CommercialRegisterEntry
        /// - Replace TaxId
        /// - Replace Location
        /// - Add, replace and remove BankAccount
        /// - Replace PaymentTerms
        /// - Set IsTemplate&lt;br&gt;Scopes required: 'properties.manage'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the property.
        /// </param>
        /// <param name='request'>
        /// Define the list of operations to be applied to the resource. Learn
        /// more about JSON Patch here: http://jsonpatch.com/.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> InventoryPropertiesByIdPatchWithHttpMessagesAsync(string id, IList<Operation> request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of supported countries.
        /// </summary>
        /// <remarks>
        /// Returns a list of ISO country codes that could be used to create
        /// properties.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryTypesCountriesGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all unit groups, or all unit groups for a property
        /// </summary>
        /// <remarks>
        /// Get the list of unit groups.&lt;br&gt;Scopes required:
        /// 'unitgroups.read'.
        /// </remarks>
        /// <param name='propertyId'>
        /// Return unit groups for specific property
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: property. All other values will be
        /// silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryUnitGroupsGetWithHttpMessagesAsync(string propertyId = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a unit group
        /// </summary>
        /// <remarks>
        /// Use this call to create a new unit group.&lt;br&gt;Scopes required:
        /// 'unitgroups.create'.
        /// </remarks>
        /// <param name='requestBody'>
        /// The definition of the unit group.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,InventoryUnitGroupsPostHeaders>> InventoryUnitGroupsPostWithHttpMessagesAsync(CreateUnitGroupModel requestBody, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns number of unit groups
        /// </summary>
        /// <remarks>
        /// Returns number of unit groups matching the filter
        /// criteria&lt;br&gt;Scopes required: 'unitgroups.read'.
        /// </remarks>
        /// <param name='propertyId'>
        /// Return unit groups for specific property
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryUnitGroupscountGetWithHttpMessagesAsync(string propertyId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a unit group
        /// </summary>
        /// <remarks>
        /// Use this call to delete a unit group.&lt;br&gt;Scopes required:
        /// 'unitgroups.delete'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InventoryUnitGroupsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a unit group
        /// </summary>
        /// <remarks>
        /// Get a unit group by id.&lt;br&gt;Scopes required:
        /// 'unitgroups.read'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit group.
        /// </param>
        /// <param name='languages'>
        /// 'all' or comma separated list of two-letter language codes (ISO
        /// Alpha-2)
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: property. All other values will be
        /// silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryUnitGroupsByIdGetWithHttpMessagesAsync(string id, IList<string> languages = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if a unit group exists
        /// </summary>
        /// <remarks>
        /// Check if a unit group exists by id.&lt;br&gt;Scopes required:
        /// 'unitgroups.read'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InventoryUnitGroupsByIdHeadWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Replace a unit group
        /// </summary>
        /// <remarks>
        /// Use this call to modify a unit group.&lt;br&gt;Scopes required:
        /// 'unitgroups.manage'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit group.
        /// </param>
        /// <param name='requestBody'>
        /// The definition of the unit group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> InventoryUnitGroupsByIdPutWithHttpMessagesAsync(string id, ReplaceUnitGroupModel requestBody, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a units list
        /// </summary>
        /// <remarks>
        /// Get the list of units.&lt;br&gt;Scopes required: 'units.read'.
        /// </remarks>
        /// <param name='propertyId'>
        /// Return units for specific property
        /// </param>
        /// <param name='unitGroupId'>
        /// Return units for the specific unit group
        /// </param>
        /// <param name='isOccupied'>
        /// Return only occupied or vacant units
        /// </param>
        /// <param name='maintenanceType'>
        /// Return units with the specific maintenance type. Possible values
        /// include: 'OutOfService', 'OutOfOrder', 'OutOfInventory'
        /// </param>
        /// <param name='condition'>
        /// Return units with a specific condition. Possible values include:
        /// 'Clean', 'CleanToBeInspected', 'Dirty'
        /// </param>
        /// <param name='pageNumber'>
        /// Page number, starting from 1 and defaulting to 1. Results in 204 if
        /// there are no items on that page.
        /// </param>
        /// <param name='pageSize'>
        /// Page size. If this is not set, the pageNumber will be ignored and
        /// all values returned.
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: property, unitGroup. All other
        /// values will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryUnitsGetWithHttpMessagesAsync(string propertyId = default(string), string unitGroupId = default(string), bool? isOccupied = default(bool?), string maintenanceType = default(string), string condition = default(string), int? pageNumber = 1, int? pageSize = 100, IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows to patch one or more units
        /// </summary>
        /// <remarks>
        /// Here's a list of allowed operations:
        /// - Set unit condition
        /// - Set unit description
        /// - Set unit name
        /// - Set unit unitGroupId
        /// - Set unit maxPersons&lt;br&gt;Scopes required: 'units.manage'.
        /// </remarks>
        /// <param name='unitIds'>
        /// </param>
        /// <param name='request'>
        /// Define the list of operations to be applied to the resource. Learn
        /// more about JSON Patch here: http://jsonpatch.com/.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> InventoryUnitsPatchWithHttpMessagesAsync(IList<string> unitIds, IList<Operation> request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a unit
        /// </summary>
        /// <remarks>
        /// Use this call to create a new unit.&lt;br&gt;Scopes required:
        /// 'units.create'.
        /// </remarks>
        /// <param name='requestBody'>
        /// The definition of the unit.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,InventoryUnitsPostHeaders>> InventoryUnitsPostWithHttpMessagesAsync(CreateUnitModel requestBody, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns number of units
        /// </summary>
        /// <remarks>
        /// Returns number of units matching the filter
        /// criteria&lt;br&gt;Scopes required: 'units.read'.
        /// </remarks>
        /// <param name='propertyId'>
        /// Return units for specific property
        /// </param>
        /// <param name='unitGroupId'>
        /// Return units for the specific unit group
        /// </param>
        /// <param name='isOccupied'>
        /// Return only occupied or vacant units
        /// </param>
        /// <param name='maintenanceType'>
        /// Return units with the specific maintenance type. Possible values
        /// include: 'OutOfService', 'OutOfOrder', 'OutOfInventory'
        /// </param>
        /// <param name='condition'>
        /// Return units with a specific condition. Possible values include:
        /// 'Clean', 'CleanToBeInspected', 'Dirty'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryUnitscountGetWithHttpMessagesAsync(string propertyId = default(string), string unitGroupId = default(string), bool? isOccupied = default(bool?), string maintenanceType = default(string), string condition = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create multiple units
        /// </summary>
        /// <remarks>
        /// Use this call to create multiple units, following a naming
        /// rule.&lt;br&gt;Scopes required: 'units.create'.
        /// </remarks>
        /// <param name='requestBody'>
        /// The definition of the units.
        /// </param>
        /// <param name='idempotencyKey'>
        /// Unique key for safely retrying requests without accidentally
        /// performing the same operation twice.
        /// We'll always send back the same response for requests made with the
        /// same key,
        /// and keys can't be reused with different request parameters. Keys
        /// expire after 24 hours.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,InventoryUnitsBulkPostHeaders>> InventoryUnitsBulkPostWithHttpMessagesAsync(BulkCreateUnitsModel requestBody, string idempotencyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a unit
        /// </summary>
        /// <remarks>
        /// Use this call to delete a unit.&lt;br&gt;Scopes required:
        /// 'units.delete'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InventoryUnitsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a unit
        /// </summary>
        /// <remarks>
        /// Get a unit by id.&lt;br&gt;Scopes required: 'units.read'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit.
        /// </param>
        /// <param name='languages'>
        /// 'all' or comma separated list of two-letter language codes (ISO
        /// Alpha-2)
        /// </param>
        /// <param name='expand'>
        /// List of all embedded resources that should be expanded in the
        /// response. Possible values are: property, unitGroup. All other
        /// values will be silently ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InventoryUnitsByIdGetWithHttpMessagesAsync(string id, IList<string> languages = default(IList<string>), IList<string> expand = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if a unit exists
        /// </summary>
        /// <remarks>
        /// Check if a unit exists by id.&lt;br&gt;Scopes required:
        /// 'units.read'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InventoryUnitsByIdHeadWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Allows to patch unit
        /// </summary>
        /// <remarks>
        /// Here's a list of allowed operations:
        /// - Set unit condition
        /// - Set unit description
        /// - Set unit name
        /// - Set unit unitGroupId
        /// - Set unit maxPersons&lt;br&gt;Scopes required: 'units.manage'.
        /// </remarks>
        /// <param name='id'>
        /// The id of the unit.
        /// </param>
        /// <param name='request'>
        /// Define the list of operations to be applied to the resource. Learn
        /// more about JSON Patch here: http://jsonpatch.com/.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageItemCollection>> InventoryUnitsByIdPatchWithHttpMessagesAsync(string id, IList<Operation> request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
