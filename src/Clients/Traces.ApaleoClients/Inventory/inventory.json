{
  "definitions": {
    "AddressModel": {
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        }
      },
      "required": [
        "addressLine1",
        "postalCode",
        "city",
        "countryCode"
      ],
      "type": "object"
    },
    "BankAccountModel": {
      "properties": {
        "bank": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BulkCreateUnitsModel": {
      "example": {
        "condition": "Clean",
        "description": {
          "de": "Kleiner Meetingraum",
          "en": "Small meetingroom"
        },
        "maxPersons": 12,
        "names": [
          "Vermont",
          "Montreal",
          "Cincinnati"
        ],
        "propertyId": "MUC",
        "unitGroupId": "MUC-MEET"
      },
      "properties": {
        "condition": {
          "description": "Condition of the unit",
          "enum": [
            "Clean",
            "CleanToBeInspected",
            "Dirty"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "UnitCondition"
          }
        },
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description, used for all units",
          "type": "object"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the units",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        },
        "names": {
          "description": "The list of unit names",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "propertyId": {
          "description": "The id of the property where the units will be created",
          "type": "string"
        },
        "unitGroupId": {
          "description": "The id of the unit group used for all units",
          "type": "string"
        }
      },
      "required": [
        "propertyId",
        "names",
        "description",
        "maxPersons"
      ],
      "type": "object"
    },
    "BulkUnitsCreatedModel": {
      "example": {
        "ids": [
          "MUC-CFP",
          "MUC-XTA",
          "MUC-CPZ"
        ]
      },
      "properties": {
        "ids": {
          "description": "The unit ids",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "ids"
      ],
      "type": "object"
    },
    "CountModel": {
      "example": {
        "count": 50
      },
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "count"
      ],
      "type": "object"
    },
    "CountryListModel": {
      "example": {
        "countryCodes": [
          "DE",
          "US"
        ]
      },
      "properties": {
        "countryCodes": {
          "description": "List of ISO country codes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "countryCodes"
      ],
      "type": "object"
    },
    "CreateAddressModel": {
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "countryCode": {
          "description": "The country code, in ISO 3166-1 alpha-2 code",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        }
      },
      "required": [
        "addressLine1",
        "postalCode",
        "city",
        "countryCode"
      ],
      "type": "object"
    },
    "CreatePropertyModel": {
      "example": {
        "bankAccount": {
          "bank": "Stadtsparkasse München",
          "bic": "SSKMDEMMXXX",
          "iban": "DE44 5001 0517 5407 3249 31"
        },
        "code": "MUC",
        "commercialRegisterEntry": "Amtsgericht München, HRB 279336",
        "companyName": "Hotel Münchner GmbH",
        "currencyCode": "EUR",
        "defaultCheckInTime": "17:00:00",
        "defaultCheckOutTime": "11:00:00",
        "description": {
          "de": "Dies ist das Demo Hotel München",
          "en": "This is the demo hotel Munich"
        },
        "location": {
          "addressLine1": "Marienplatz 1",
          "city": "München",
          "countryCode": "DE",
          "postalCode": "80331"
        },
        "managingDirectors": "Franz-Josef Gruber",
        "name": {
          "de": "Demo Hotel München",
          "en": "Demo Hotel Munich"
        },
        "paymentTerms": {
          "de": "Zahlung bei Checkout",
          "en": "Pay on checkout"
        },
        "taxId": "DE311053702",
        "timeZone": "Europe/Berlin"
      },
      "properties": {
        "bankAccount": {
          "$ref": "#/definitions/BankAccountModel",
          "description": "Bank account information of the company running the property"
        },
        "code": {
          "description": "The code for the property that can be shown in reports and table views",
          "maxLength": 10,
          "minLength": 3,
          "pattern": "^[a-zA-Z0-9_]*$",
          "type": "string"
        },
        "commercialRegisterEntry": {
          "description": "The entry in the Commercial Reigster of the company running the property, as it should appear on invoices",
          "type": "string"
        },
        "companyName": {
          "description": "The legal name of the company running the property.",
          "type": "string"
        },
        "currencyCode": {
          "description": "The currency a property works with.",
          "type": "string"
        },
        "defaultCheckInTime": {
          "description": "The default check-in time<br />Specify a time (without fractional second part) as defined in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "defaultCheckOutTime": {
          "description": "The default check-out time<br />Specify a time (without fractional second part) as defined in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "type": "string"
        },
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description for the property",
          "type": "object"
        },
        "location": {
          "$ref": "#/definitions/CreateAddressModel",
          "description": "The location of the property"
        },
        "managingDirectors": {
          "description": "The managing director(s) of the company, as they should appear on invoices",
          "type": "string"
        },
        "name": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The name for the property",
          "type": "object"
        },
        "paymentTerms": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The payment terms used for all rate plans",
          "type": "object"
        },
        "taxId": {
          "description": "The Tax-ID of the company running the property, as it should appear on invoices",
          "type": "string"
        },
        "timeZone": {
          "description": "The time zone name of the property from the IANA Time Zone Database.\r\n(see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
          "type": "string"
        }
      },
      "required": [
        "code",
        "name",
        "companyName",
        "commercialRegisterEntry",
        "taxId",
        "location",
        "paymentTerms",
        "timeZone",
        "defaultCheckInTime",
        "defaultCheckOutTime",
        "currencyCode"
      ],
      "type": "object"
    },
    "CreateUnitGroupModel": {
      "example": {
        "code": "DBL",
        "description": {
          "de": "Dies ist ein schönes Zimmer mit Kingsize-Bett und Flachbildschirm",
          "en": "This is a nice room with as kingsize bed and flat screen"
        },
        "maxPersons": 4,
        "name": {
          "de": "Doppelzimmer",
          "en": "Double Room"
        },
        "propertyId": "MUC",
        "rank": 1
      },
      "properties": {
        "code": {
          "description": "The code for the unit group that can be shown in reports and table views",
          "maxLength": 10,
          "minLength": 3,
          "pattern": "^[a-zA-Z0-9_]*$",
          "type": "string"
        },
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description for the unit group",
          "type": "object"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit group",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The name for the unit group",
          "type": "object"
        },
        "propertyId": {
          "description": "The id of the property where unit group will be created",
          "type": "string"
        },
        "rank": {
          "description": "The unit group rank\r\nRestrictions:\r\n- Should be greater or equal to one",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "code",
        "propertyId",
        "name",
        "description",
        "maxPersons"
      ],
      "type": "object"
    },
    "CreateUnitModel": {
      "example": {
        "condition": "Clean",
        "description": {
          "de": "Zimmer 102",
          "en": "Room 102"
        },
        "maxPersons": 4,
        "name": "A.102",
        "propertyId": "MUC",
        "unitGroupId": "MUC-DBL"
      },
      "properties": {
        "condition": {
          "description": "Condition of the unit",
          "enum": [
            "Clean",
            "CleanToBeInspected",
            "Dirty"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "UnitCondition"
          }
        },
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description for the unit",
          "type": "object"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "description": "The name for the unit",
          "type": "string"
        },
        "propertyId": {
          "description": "The id of the property where the unit will be created",
          "type": "string"
        },
        "unitGroupId": {
          "description": "The id of the unit group",
          "type": "string"
        }
      },
      "required": [
        "propertyId",
        "name",
        "description",
        "maxPersons"
      ],
      "type": "object"
    },
    "EmbeddedPropertyModel": {
      "properties": {
        "code": {
          "description": "The code for the property that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "description": "The description for the property",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "The property id",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The name for the property",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "EmbeddedUnitGroupModel": {
      "properties": {
        "code": {
          "description": "The code for the unit group that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "description": "The description for the unit group",
          "type": "string"
        },
        "id": {
          "description": "The unit group id",
          "type": "string"
        },
        "name": {
          "description": "The name for the unit group",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "MessageItemCollection": {
      "properties": {
        "messages": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "Operation": {
      "properties": {
        "from": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "PropertyCreatedModel": {
      "example": {
        "id": "MUC"
      },
      "properties": {
        "id": {
          "description": "The property id",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PropertyItemModel": {
      "properties": {
        "code": {
          "description": "The code for the property that can be shown in reports and table views",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />Specify a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "currencyCode": {
          "description": "The currency a property works with.",
          "type": "string"
        },
        "description": {
          "description": "The description for the property",
          "type": "string"
        },
        "id": {
          "description": "The property id",
          "type": "string"
        },
        "isTemplate": {
          "description": "Whether the property can be used as a template for other properties",
          "type": "boolean"
        },
        "location": {
          "$ref": "#/definitions/AddressModel",
          "description": "The location of the property"
        },
        "name": {
          "description": "The name for the property",
          "type": "string"
        },
        "propertyTemplateId": {
          "description": "The id of the property used as a template while creating the property",
          "type": "string"
        },
        "timeZone": {
          "description": "The time zone name of the property from the IANA Time Zone Database.\r\n(see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
          "type": "string"
        }
      },
      "required": [
        "id",
        "code",
        "isTemplate",
        "name",
        "location",
        "timeZone",
        "currencyCode",
        "created"
      ],
      "type": "object"
    },
    "PropertyListModel": {
      "example": {
        "count": 0,
        "properties": [
          {
            "code": "MUC",
            "created": "0001-01-01T00:00:00Z",
            "description": "This is the demo hotel Munich",
            "id": "MUC",
            "isTemplate": true,
            "location": {
              "addressLine1": "Marienplatz 1",
              "city": "München",
              "countryCode": "DE",
              "postalCode": "80331"
            },
            "name": "Demo Hotel Munich",
            "timeZone": "Europe/Berlin"
          },
          {
            "code": "BER",
            "created": "0001-01-01T00:00:00Z",
            "description": "This is the demo hotel Berlin",
            "id": "BER",
            "isTemplate": false,
            "location": {
              "addressLine1": "Mohrenstraße 30",
              "city": "Berlin",
              "countryCode": "DE",
              "postalCode": "10117"
            },
            "name": "Demo Hotel Berlin",
            "propertyTemplateId": "MUC",
            "timeZone": "Europe/Berlin"
          }
        ]
      },
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "properties": {
          "description": "List of properties",
          "items": {
            "$ref": "#/definitions/PropertyItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "properties",
        "count"
      ],
      "type": "object"
    },
    "PropertyModel": {
      "description": "With this request you can create a new property",
      "example": {
        "bankAccount": {
          "bank": "Stadtsparkasse München",
          "bic": "SSKMDEMMXXX",
          "iban": "DE44 5001 0517 5407 3249 31"
        },
        "code": "MUC",
        "commercialRegisterEntry": "Amtsgericht München, HRB 279336",
        "companyName": "Hotel Münchner GmbH",
        "created": "0001-01-01T00:00:00Z",
        "currencyCode": "EUR",
        "description": {
          "de": "Dies ist das Demo Hotel München",
          "en": "This is the demo hotel Munich"
        },
        "id": "MUC",
        "isTemplate": false,
        "location": {
          "addressLine1": "Marienplatz 1",
          "city": "München",
          "countryCode": "DE",
          "postalCode": "80331"
        },
        "managingDirectors": "Franz-Josef Gruber",
        "name": {
          "de": "Demo Hotel München",
          "en": "Demo Hotel Munich"
        },
        "paymentTerms": {
          "de": "Zahlung bei Checkout",
          "en": "Pay on checkout"
        },
        "propertyTemplateId": "BER",
        "taxId": "DE311053702",
        "timeZone": "Europe/Berlin"
      },
      "properties": {
        "bankAccount": {
          "$ref": "#/definitions/BankAccountModel"
        },
        "code": {
          "description": "The code for the property that can be shown in reports and table views",
          "type": "string"
        },
        "commercialRegisterEntry": {
          "description": "The entry in the Commercial Reigster of the company running the property, as it should appear on invoices",
          "type": "string"
        },
        "companyName": {
          "description": "The legal name of the company running the property.",
          "type": "string"
        },
        "created": {
          "description": "Date of creation<br />Specify a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "currencyCode": {
          "description": "The currency a property works with.",
          "type": "string"
        },
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description for the property",
          "type": "object"
        },
        "id": {
          "description": "The property id",
          "type": "string"
        },
        "isTemplate": {
          "description": "Whether the property can be used as a template for other properties",
          "type": "boolean"
        },
        "location": {
          "$ref": "#/definitions/AddressModel",
          "description": "The location of the property"
        },
        "managingDirectors": {
          "description": "The managing director(s) of the company, as they should appear on invoices",
          "type": "string"
        },
        "name": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The name for the property",
          "type": "object"
        },
        "paymentTerms": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The payment terms used for all rate plans",
          "type": "object"
        },
        "propertyTemplateId": {
          "description": "The id of the property used as a template while creating the property",
          "type": "string"
        },
        "taxId": {
          "description": "The Tax-ID of the company running the property, as it should appear on invoices",
          "type": "string"
        },
        "timeZone": {
          "description": "The time zone name of the property from the IANA Time Zone Database.\r\n(see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
          "type": "string"
        }
      },
      "required": [
        "id",
        "code",
        "name",
        "isTemplate",
        "companyName",
        "commercialRegisterEntry",
        "taxId",
        "location",
        "paymentTerms",
        "timeZone",
        "currencyCode",
        "created"
      ],
      "type": "object"
    },
    "ReplaceUnitGroupModel": {
      "example": {
        "description": {
          "de": "Dies ist ein schönes Zimmer mit Kingsize-Bett und Flachbildschirm",
          "en": "This is a nice room with as kingsize bed and flat screen"
        },
        "maxPersons": 4,
        "name": {
          "de": "Doppelzimmer",
          "en": "Double Room"
        },
        "rank": 2
      },
      "properties": {
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description for the unit group",
          "type": "object"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit group.\r\nIf this value is increased, the surcharges for the related rate plans must be specified in order for the rate plans to be sellable for the new possible occupancies.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The name for the unit group",
          "type": "object"
        },
        "rank": {
          "description": "The unit group rank\r\nRestrictions:\r\n- Should be greater or equal to one",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "description"
      ],
      "type": "object"
    },
    "UnitCreatedModel": {
      "example": {
        "id": "MUC-CFP"
      },
      "properties": {
        "id": {
          "description": "The unit id",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "UnitGroupCreatedModel": {
      "example": {
        "id": "MUC-DBL"
      },
      "properties": {
        "id": {
          "description": "The unit group id",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "UnitGroupItemModel": {
      "properties": {
        "code": {
          "description": "The code for the unit group that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "description": "The description for the unit group",
          "type": "string"
        },
        "id": {
          "description": "The unit group id",
          "type": "string"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit group",
          "format": "int32",
          "type": "integer"
        },
        "memberCount": {
          "description": "Number of units in this group",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name for the unit group",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel",
          "description": "The property to which the unit group belongs to"
        },
        "rank": {
          "description": "The unit group rank",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "code",
        "name",
        "description",
        "memberCount",
        "property"
      ],
      "type": "object"
    },
    "UnitGroupListModel": {
      "example": {
        "count": 0,
        "unitGroups": [
          {
            "code": "DBL",
            "description": "This is a nice room with as kingsize bed and flat screen",
            "id": "MUC-DBL",
            "maxPersons": 4,
            "memberCount": 2,
            "name": "Double Room",
            "property": {
              "code": "MUC",
              "description": "This is the demo hotel Munich",
              "id": "MUC",
              "name": "Demo Hotel Munich"
            },
            "rank": 2
          },
          {
            "code": "SGL",
            "description": "This is a nice room with as standard bed",
            "id": "BER-SGL",
            "maxPersons": 2,
            "memberCount": 5,
            "name": "Standard Room",
            "property": {
              "code": "BER",
              "description": "This is the demo hotel Berlin",
              "id": "BER",
              "name": "Demo Hotel Berlin"
            },
            "rank": 1
          }
        ]
      },
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "unitGroups": {
          "description": "List of unit groups",
          "items": {
            "$ref": "#/definitions/UnitGroupItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "unitGroups",
        "count"
      ],
      "type": "object"
    },
    "UnitGroupModel": {
      "description": "With this request you can create a new property",
      "example": {
        "code": "DBL",
        "description": {
          "de": "Dies ist ein schönes Zimmer mit Kingsize-Bett und Flachbildschirm",
          "en": "This is a nice room with as kingsize bed and flat screen"
        },
        "id": "MUC-DBL",
        "maxPersons": 4,
        "memberCount": 0,
        "name": {
          "de": "Doppelzimmer",
          "en": "Double Room"
        },
        "property": {
          "code": "MUC",
          "description": "This is the demo hotel Munich",
          "id": "MUC",
          "name": "Demo Hotel Munich"
        },
        "rank": 2
      },
      "properties": {
        "code": {
          "description": "The code for the unit group that can be shown in reports and table views",
          "type": "string"
        },
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description for the unit group",
          "type": "object"
        },
        "id": {
          "description": "The unit group id",
          "type": "string"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit group",
          "format": "int32",
          "type": "integer"
        },
        "memberCount": {
          "description": "Number of units in this group",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The name for the unit group",
          "type": "object"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel",
          "description": "The property to which the unit group belongs to"
        },
        "rank": {
          "description": "The unit group rank",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "code",
        "property",
        "name",
        "memberCount",
        "description",
        "maxPersons"
      ],
      "type": "object"
    },
    "UnitItemMaintenanceModel": {
      "properties": {
        "id": {
          "description": "The id for the scheduled maintenance",
          "type": "string"
        },
        "type": {
          "description": "The type of maintenance that is planned for the unit. A small repair (OutOfService),\r\na bigger disfunction that does not allow to sell the unit (OutOfOrder) or is it\r\neven under construction and should reduce the house count (OutOfInventory)",
          "enum": [
            "OutOfService",
            "OutOfOrder",
            "OutOfInventory"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "MaintenanceType"
          }
        }
      },
      "required": [
        "id",
        "type"
      ],
      "type": "object"
    },
    "UnitItemModel": {
      "properties": {
        "created": {
          "description": "Date of creation<br />Specify a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "The description for the unit",
          "type": "string"
        },
        "id": {
          "description": "The unit id",
          "type": "string"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name for the unit",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel",
          "description": "The property to which the unit belongs to"
        },
        "status": {
          "$ref": "#/definitions/UnitItemStatusModel",
          "description": "The current status of the unit"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel",
          "description": "The unit group"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "property",
        "status",
        "maxPersons",
        "created"
      ],
      "type": "object"
    },
    "UnitItemStatusModel": {
      "properties": {
        "condition": {
          "enum": [
            "Clean",
            "CleanToBeInspected",
            "Dirty"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "UnitCondition"
          }
        },
        "isOccupied": {
          "type": "boolean"
        },
        "maintenance": {
          "$ref": "#/definitions/UnitItemMaintenanceModel"
        }
      },
      "required": [
        "isOccupied",
        "condition"
      ],
      "type": "object"
    },
    "UnitListModel": {
      "example": {
        "count": 2,
        "units": [
          {
            "created": "0001-01-01T00:00:00Z",
            "description": "Room 101",
            "id": "MUC-JQI",
            "maxPersons": 4,
            "name": "A.101",
            "property": {
              "code": "MUC",
              "description": "This is the demo hotel Munich",
              "id": "MUC",
              "name": "Demo Hotel Munich"
            },
            "status": {
              "condition": "Dirty",
              "isOccupied": true,
              "maintenance": {
                "id": "MUC-JQI-SGHZD",
                "type": "OutOfService"
              }
            },
            "unitGroup": {
              "code": "DBL",
              "description": "Double",
              "id": "MUC-DBL",
              "name": "Double"
            }
          },
          {
            "created": "0001-01-01T00:00:00Z",
            "description": "Room 102",
            "id": "MUC-ELG",
            "maxPersons": 1,
            "name": "A.102",
            "property": {
              "code": "MUC",
              "description": "This is the demo hotel Munich",
              "id": "MUC",
              "name": "Demo Hotel Munich"
            },
            "status": {
              "condition": "Clean",
              "isOccupied": false,
              "maintenance": {
                "id": "MUC-ELG-GSZGK",
                "type": "OutOfOrder"
              }
            },
            "unitGroup": {
              "code": "SGL",
              "description": "Standard",
              "id": "MUC-SGL",
              "name": "Standard"
            }
          }
        ]
      },
      "properties": {
        "count": {
          "description": "Total count of items",
          "format": "int64",
          "type": "integer"
        },
        "units": {
          "description": "List of units",
          "items": {
            "$ref": "#/definitions/UnitItemModel"
          },
          "type": "array"
        }
      },
      "required": [
        "units",
        "count"
      ],
      "type": "object"
    },
    "UnitMaintenanceModel": {
      "properties": {
        "description": {
          "description": "The description text for the maintenance",
          "type": "string"
        },
        "from": {
          "description": "Date and time the scheduled maintenance window starts<br />Specify a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The id for the scheduled maintenance",
          "type": "string"
        },
        "to": {
          "description": "Date and time the scheduled maintenance window ends<br />Specify a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "description": "The type of maintenance that is planned for the unit. A small repair (OutOfService),\r\na bigger disfunction that does not allow to sell the unit (OutOfOrder) or is it\r\neven under construction and should reduce the house count (OutOfInventory)",
          "enum": [
            "OutOfService",
            "OutOfOrder",
            "OutOfInventory"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "MaintenanceType"
          }
        }
      },
      "required": [
        "id",
        "from",
        "to",
        "type"
      ],
      "type": "object"
    },
    "UnitModel": {
      "example": {
        "created": "0001-01-01T00:00:00Z",
        "description": {
          "de": "1.OG Zimmer 1",
          "en": "First Floor Room 1"
        },
        "id": "MUC-YTO",
        "maxPersons": 2,
        "name": "1.001",
        "property": {
          "code": "BER",
          "description": "This is the demo hotel Berlin",
          "id": "BER",
          "name": "Demo Hotel Berlin"
        },
        "status": {
          "condition": "Clean",
          "isOccupied": false,
          "maintenance": {
            "description": "The remote control for the TV needs to be replaced.",
            "from": "2019-11-25T11:54:33.3672125+01:00",
            "id": "MUC-YTO-SGHZD",
            "to": "2019-11-27T11:54:33.3672125+01:00",
            "type": "OutOfService"
          }
        },
        "unitGroup": {
          "code": "DBL",
          "description": "Double",
          "id": "MUC-DBL",
          "name": "Double"
        }
      },
      "properties": {
        "created": {
          "description": "Date of creation<br />Specify a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The description for the unit",
          "type": "object"
        },
        "id": {
          "description": "The unit id",
          "type": "string"
        },
        "maxPersons": {
          "description": "Maximum number of persons for the unit",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name for the unit",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/EmbeddedPropertyModel",
          "description": "The property to which the unit belongs to"
        },
        "status": {
          "$ref": "#/definitions/UnitStatusModel",
          "description": "The current status of the unit"
        },
        "unitGroup": {
          "$ref": "#/definitions/EmbeddedUnitGroupModel",
          "description": "The unit group"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "property",
        "status",
        "maxPersons",
        "created"
      ],
      "type": "object"
    },
    "UnitStatusModel": {
      "properties": {
        "condition": {
          "enum": [
            "Clean",
            "CleanToBeInspected",
            "Dirty"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "UnitCondition"
          }
        },
        "isOccupied": {
          "type": "boolean"
        },
        "maintenance": {
          "$ref": "#/definitions/UnitMaintenanceModel"
        }
      },
      "required": [
        "isOccupied",
        "condition"
      ],
      "type": "object"
    }
  },
  "info": {
    "description": "Setup and manage <b>properties</b> (hotels, etc.) and all the entites in them to rent out:\n<b>Units</b> such as rooms, parking lots, beds, meeting rooms, etc. Units can be combined into <b>groups</b> (single rooms, double rooms).",
    "title": "apaleo Inventory API",
    "version": "v1"
  },
  "paths": {
    "/inventory/v1/properties": {
      "get": {
        "consumes": [],
        "description": "Get the list of properties.<br>Scopes required: 'properties.read'.",
        "operationId": "InventoryPropertiesGet",
        "parameters": [
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all properties.",
            "schema": {
              "$ref": "#/definitions/PropertyListModel"
            }
          },
          "204": {
            "description": "There are no properties found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "properties.read",
              "admin"
            ]
          }
        ],
        "summary": "Get a properties list",
        "tags": [
          "Property"
        ]
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Use this call to create a new property.<br>Scopes required: 'properties.create'.",
        "operationId": "InventoryPropertiesPost",
        "parameters": [
          {
            "description": "The definition of the property.",
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePropertyModel"
            }
          },
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "Creation of the new property was successful.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PropertyCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "properties.create",
              "admin"
            ]
          }
        ],
        "summary": "Creates a property",
        "tags": [
          "Property"
        ]
      }
    },
    "/inventory/v1/properties/$count": {
      "get": {
        "consumes": [],
        "description": "Return total count of properties<br>Scopes required: 'properties.read'.",
        "operationId": "InventoryProperties$countGet",
        "parameters": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CountModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "properties.read",
              "admin"
            ]
          }
        ],
        "summary": "Return total count of properties",
        "tags": [
          "Property"
        ]
      }
    },
    "/inventory/v1/properties/{id}": {
      "get": {
        "consumes": [],
        "description": "Get a property by id.<br>Scopes required: 'properties.read'.",
        "operationId": "InventoryPropertiesByIdGet",
        "parameters": [
          {
            "description": "The id of the property.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "languages",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all the property data.",
            "schema": {
              "$ref": "#/definitions/PropertyModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "properties.read",
              "admin"
            ]
          }
        ],
        "summary": "Get a property",
        "tags": [
          "Property"
        ]
      },
      "head": {
        "consumes": [],
        "description": "Check if a property exists by id.<br>Scopes required: 'properties.read'.",
        "operationId": "InventoryPropertiesByIdHead",
        "parameters": [
          {
            "description": "The id of the property.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "The property exists."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "properties.read",
              "admin"
            ]
          }
        ],
        "summary": "Check if a property exists",
        "tags": [
          "Property"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Here's a list of allowed operations:\r\n- Replace Name\r\n- Add, replace and remove Description\r\n- Replace CompanyName\r\n- Add, replace and remove ManagingDirectors\r\n- Replace CommercialRegisterEntry\r\n- Replace TaxId\r\n- Replace Location\r\n- Add, replace and remove BankAccount\r\n- Replace PaymentTerms\r\n- Set IsTemplate<br>Scopes required: 'properties.manage'.",
        "operationId": "InventoryPropertiesByIdPatch",
        "parameters": [
          {
            "description": "The id of the property.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Operation"
              },
              "type": "array"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "properties.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows to modify property",
        "tags": [
          "Property"
        ]
      }
    },
    "/inventory/v1/types/countries": {
      "get": {
        "consumes": [],
        "description": "Returns a list of ISO country codes that could be used to create properties.",
        "operationId": "InventoryTypesCountriesGet",
        "parameters": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/CountryListModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "summary": "Returns a list of supported countries.",
        "tags": [
          "Types"
        ]
      }
    },
    "/inventory/v1/unit-groups": {
      "get": {
        "consumes": [],
        "description": "Get the list of unit groups.<br>Scopes required: 'unitgroups.read'.",
        "operationId": "InventoryUnit-groupsGet",
        "parameters": [
          {
            "description": "Return unit groups for specific property",
            "in": "query",
            "name": "propertyId",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "default": null,
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "property"
              ],
              "type": "string"
            },
            "name": "expand",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all unit groups.",
            "schema": {
              "$ref": "#/definitions/UnitGroupListModel"
            }
          },
          "204": {
            "description": "There are no unit groups found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "unitgroups.read",
              "admin"
            ]
          }
        ],
        "summary": "Get all unit groups, or all unit groups for a property",
        "tags": [
          "UnitGroup"
        ]
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Use this call to create a new unit group.<br>Scopes required: 'unitgroups.create'.",
        "operationId": "InventoryUnit-groupsPost",
        "parameters": [
          {
            "description": "The definition of the unit group.",
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUnitGroupModel"
            }
          },
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "Creation of the new unit group was successful.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/UnitGroupCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "unitgroups.create",
              "admin"
            ]
          }
        ],
        "summary": "Create a unit group",
        "tags": [
          "UnitGroup"
        ]
      }
    },
    "/inventory/v1/unit-groups/$count": {
      "get": {
        "consumes": [],
        "description": "Returns number of unit groups matching the filter criteria<br>Scopes required: 'unitgroups.read'.",
        "operationId": "InventoryUnit-groups$countGet",
        "parameters": [
          {
            "description": "Return unit groups for specific property",
            "in": "query",
            "name": "propertyId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CountModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "unitgroups.read",
              "admin"
            ]
          }
        ],
        "summary": "Returns number of unit groups",
        "tags": [
          "UnitGroup"
        ]
      }
    },
    "/inventory/v1/unit-groups/{id}": {
      "delete": {
        "consumes": [],
        "description": "Use this call to delete a unit group.<br>Scopes required: 'unitgroups.delete'.",
        "operationId": "InventoryUnit-groupsByIdDelete",
        "parameters": [
          {
            "description": "The id of the unit group.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "Deletion of the unit group was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "unitgroups.delete",
              "admin"
            ]
          }
        ],
        "summary": "Delete a unit group",
        "tags": [
          "UnitGroup"
        ]
      },
      "get": {
        "consumes": [],
        "description": "Get a unit group by id.<br>Scopes required: 'unitgroups.read'.",
        "operationId": "InventoryUnit-groupsByIdGet",
        "parameters": [
          {
            "description": "The id of the unit group.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "languages",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "csv",
            "default": null,
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "property"
              ],
              "type": "string"
            },
            "name": "expand",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all the unit group data.",
            "schema": {
              "$ref": "#/definitions/UnitGroupModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "unitgroups.read",
              "admin"
            ]
          }
        ],
        "summary": "Get a unit group",
        "tags": [
          "UnitGroup"
        ]
      },
      "head": {
        "consumes": [],
        "description": "Check if a unit group exists by id.<br>Scopes required: 'unitgroups.read'.",
        "operationId": "InventoryUnit-groupsByIdHead",
        "parameters": [
          {
            "description": "The id of the unit group.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "The unit group exists."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "unitgroups.read",
              "admin"
            ]
          }
        ],
        "summary": "Check if a unit group exists",
        "tags": [
          "UnitGroup"
        ]
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Use this call to modify a unit group.<br>Scopes required: 'unitgroups.manage'.",
        "operationId": "InventoryUnit-groupsByIdPut",
        "parameters": [
          {
            "description": "The id of the unit group.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The definition of the unit group.",
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceUnitGroupModel"
            }
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Replace of the unit group was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "unitgroups.manage",
              "admin"
            ]
          }
        ],
        "summary": "Replace a unit group",
        "tags": [
          "UnitGroup"
        ]
      }
    },
    "/inventory/v1/units": {
      "get": {
        "consumes": [],
        "description": "Get the list of units.<br>Scopes required: 'units.read'.",
        "operationId": "InventoryUnitsGet",
        "parameters": [
          {
            "description": "Return units for specific property",
            "in": "query",
            "name": "propertyId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return units for the specific unit group",
            "in": "query",
            "name": "unitGroupId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return only occupied or vacant units",
            "in": "query",
            "name": "isOccupied",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Return units with the specific maintenance type",
            "enum": [
              "OutOfService",
              "OutOfOrder",
              "OutOfInventory"
            ],
            "in": "query",
            "name": "maintenanceType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return units with a specific condition",
            "enum": [
              "Clean",
              "CleanToBeInspected",
              "Dirty"
            ],
            "in": "query",
            "name": "condition",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "default": null,
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "property",
                "unitGroup"
              ],
              "type": "string"
            },
            "name": "expand",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all units.",
            "schema": {
              "$ref": "#/definitions/UnitListModel"
            }
          },
          "204": {
            "description": "No units were found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.read",
              "admin"
            ]
          }
        ],
        "summary": "Get a units list",
        "tags": [
          "Unit"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Here's a list of allowed operations:\r\n- Set unit condition\r\n- Set unit description\r\n- Set unit name\r\n- Set unit unitGroupId\r\n- Set unit maxPersons<br>Scopes required: 'units.manage'.",
        "operationId": "InventoryUnitsPatch",
        "parameters": [
          {
            "collectionFormat": "csv",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "unitIds",
            "required": true,
            "type": "array"
          },
          {
            "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Operation"
              },
              "type": "array"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "Units were successfully modified."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows to patch one or more units",
        "tags": [
          "Unit"
        ]
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Use this call to create a new unit.<br>Scopes required: 'units.create'.",
        "operationId": "InventoryUnitsPost",
        "parameters": [
          {
            "description": "The definition of the unit.",
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUnitModel"
            }
          },
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "Creation of the new unit was successful.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/UnitCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.create",
              "admin"
            ]
          }
        ],
        "summary": "Create a unit",
        "tags": [
          "Unit"
        ]
      }
    },
    "/inventory/v1/units/$count": {
      "get": {
        "consumes": [],
        "description": "Returns number of units matching the filter criteria<br>Scopes required: 'units.read'.",
        "operationId": "InventoryUnits$countGet",
        "parameters": [
          {
            "description": "Return units for specific property",
            "in": "query",
            "name": "propertyId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return units for the specific unit group",
            "in": "query",
            "name": "unitGroupId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return only occupied or vacant units",
            "in": "query",
            "name": "isOccupied",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Return units with the specific maintenance type",
            "enum": [
              "OutOfService",
              "OutOfOrder",
              "OutOfInventory"
            ],
            "in": "query",
            "name": "maintenanceType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return units with a specific condition",
            "enum": [
              "Clean",
              "CleanToBeInspected",
              "Dirty"
            ],
            "in": "query",
            "name": "condition",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CountModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.read",
              "admin"
            ]
          }
        ],
        "summary": "Returns number of units",
        "tags": [
          "Unit"
        ]
      }
    },
    "/inventory/v1/units/bulk": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Use this call to create multiple units, following a naming rule.<br>Scopes required: 'units.create'.",
        "operationId": "InventoryUnitsBulkPost",
        "parameters": [
          {
            "description": "The definition of the units.",
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkCreateUnitsModel"
            }
          },
          {
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "in": "header",
            "name": "Idempotency-Key",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BulkUnitsCreatedModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.create",
              "admin"
            ]
          }
        ],
        "summary": "Create multiple units",
        "tags": [
          "Unit"
        ]
      }
    },
    "/inventory/v1/units/{id}": {
      "delete": {
        "consumes": [],
        "description": "Use this call to delete a unit.<br>Scopes required: 'units.delete'.",
        "operationId": "InventoryUnitsByIdDelete",
        "parameters": [
          {
            "description": "The id of the unit.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "Deletion of the unit was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.delete",
              "admin"
            ]
          }
        ],
        "summary": "Delete a unit",
        "tags": [
          "Unit"
        ]
      },
      "get": {
        "consumes": [],
        "description": "Get a unit by id.<br>Scopes required: 'units.read'.",
        "operationId": "InventoryUnitsByIdGet",
        "parameters": [
          {
            "description": "The id of the unit.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "languages",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "csv",
            "default": null,
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup. All other values will be silently ignored.",
            "in": "query",
            "items": {
              "enum": [
                "property",
                "unitGroup"
              ],
              "type": "string"
            },
            "name": "expand",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Return all the unit data.",
            "schema": {
              "$ref": "#/definitions/UnitModel"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.read",
              "admin"
            ]
          }
        ],
        "summary": "Get a unit",
        "tags": [
          "Unit"
        ]
      },
      "head": {
        "consumes": [],
        "description": "Check if a unit exists by id.<br>Scopes required: 'units.read'.",
        "operationId": "InventoryUnitsByIdHead",
        "parameters": [
          {
            "description": "The id of the unit.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "The unit exists."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.read",
              "admin"
            ]
          }
        ],
        "summary": "Check if a unit exists",
        "tags": [
          "Unit"
        ]
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "description": "Here's a list of allowed operations:\r\n- Set unit condition\r\n- Set unit description\r\n- Set unit name\r\n- Set unit unitGroupId\r\n- Set unit maxPersons<br>Scopes required: 'units.manage'.",
        "operationId": "InventoryUnitsByIdPatch",
        "parameters": [
          {
            "description": "The id of the unit.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Operation"
              },
              "type": "array"
            }
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "The unit was successfully modified."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "schema": {
              "$ref": "#/definitions/MessageItemCollection"
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "units.manage",
              "admin"
            ]
          }
        ],
        "summary": "Allows to patch unit",
        "tags": [
          "Unit"
        ]
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "authorizationUrl": "https://identity.apaleo.com/connect/authorize",
      "flow": "implicit",
      "scopes": {
        "admin": "Full access",
        "reservations.import": "Import reservations"
      },
      "type": "oauth2"
    }
  },
  "swagger": "2.0"
}
