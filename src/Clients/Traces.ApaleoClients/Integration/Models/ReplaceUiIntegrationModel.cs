// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Integration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ReplaceUiIntegrationModel
    {
        /// <summary>
        /// Initializes a new instance of the ReplaceUiIntegrationModel class.
        /// </summary>
        public ReplaceUiIntegrationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReplaceUiIntegrationModel class.
        /// </summary>
        /// <param name="label">Label to be displayed as the name of your
        /// integration.
        /// For example, this is the text that is displayed on your user's apps
        /// list.</param>
        /// <param name="sourceType">Public source type means, that the browser
        /// can see the URL directly. This is true for instance, if you have
        /// Hybrid OAuth flow active.
        ///
        /// Private source type means, that the server will request from that
        /// source URL a public URL, which is pre-authenticated and forward
        /// that to the client. Possible values include: 'Private',
        /// 'Public'</param>
        /// <param name="labelTranslations">Different translations for the
        /// integration label.
        /// You can provide as many translations as you want.
        /// You should only provide the iso code of the language for example
        /// 'en' for english and 'de' for German. No need for the country.
        /// If there is not a translation for a specific language, we will
        /// display the value of the Label as default.</param>
        /// <param name="propertyIds">List of Ids for the properties for which
        /// the integration is configured
        /// If the list is empty then the integration is configured for all
        /// properties
        /// Remark: Only applicable to non account level integrations</param>
        public ReplaceUiIntegrationModel(string label, string sourceType, string sourceUrl, string iconSource = default(string), IDictionary<string, string> labelTranslations = default(IDictionary<string, string>), IList<string> propertyIds = default(IList<string>))
        {
            IconSource = iconSource;
            Label = label;
            LabelTranslations = labelTranslations;
            PropertyIds = propertyIds;
            SourceType = sourceType;
            SourceUrl = sourceUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "iconSource")]
        public string IconSource { get; set; }

        /// <summary>
        /// Gets or sets label to be displayed as the name of your integration.
        /// For example, this is the text that is displayed on your user's apps
        /// list.
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets different translations for the integration label.
        /// You can provide as many translations as you want.
        /// You should only provide the iso code of the language for example
        /// 'en' for english and 'de' for German. No need for the country.
        /// If there is not a translation for a specific language, we will
        /// display the value of the Label as default.
        /// </summary>
        [JsonProperty(PropertyName = "labelTranslations")]
        public IDictionary<string, string> LabelTranslations { get; set; }

        /// <summary>
        /// Gets or sets list of Ids for the properties for which the
        /// integration is configured
        /// If the list is empty then the integration is configured for all
        /// properties
        /// Remark: Only applicable to non account level integrations
        /// </summary>
        [JsonProperty(PropertyName = "propertyIds")]
        public IList<string> PropertyIds { get; set; }

        /// <summary>
        /// Gets or sets public source type means, that the browser can see the
        /// URL directly. This is true for instance, if you have Hybrid OAuth
        /// flow active.
        ///
        /// Private source type means, that the server will request from that
        /// source URL a public URL, which is pre-authenticated and forward
        /// that to the client. Possible values include: 'Private', 'Public'
        /// </summary>
        [JsonProperty(PropertyName = "sourceType")]
        public string SourceType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceUrl")]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Label == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Label");
            }
            if (SourceType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceType");
            }
            if (SourceUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceUrl");
            }
        }
    }
}
