// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Integration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UiIntegrationItemModel
    {
        /// <summary>
        /// Initializes a new instance of the UiIntegrationItemModel class.
        /// </summary>
        public UiIntegrationItemModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UiIntegrationItemModel class.
        /// </summary>
        /// <param name="sourceType">Public source type means, that the browser
        /// can see the URL directly. This is true for instance, if you have
        /// Hybrid OAuth flow active.
        ///
        /// Private source type means, that the server will request from that
        /// source URL a public URL, which is pre-authenticated and forward
        /// that to the client. Possible values include: 'Private',
        /// 'Public'</param>
        /// <param name="target">Possible values include:
        /// 'DashboardPropertyContext', 'DashboardAccountContext',
        /// 'ReservationDetailsTab', 'PropertyMenuReports', 'PropertyMenuApps',
        /// 'AccountMenuApps', 'CompanyDetailsTab'</param>
        public UiIntegrationItemModel(string code, string id, string label, string sourceType, string sourceUrl, string target, string iconSource = default(string), IList<string> propertyIds = default(IList<string>))
        {
            Code = code;
            IconSource = iconSource;
            Id = id;
            Label = label;
            PropertyIds = propertyIds;
            SourceType = sourceType;
            SourceUrl = sourceUrl;
            Target = target;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "iconSource")]
        public string IconSource { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "propertyIds")]
        public IList<string> PropertyIds { get; set; }

        /// <summary>
        /// Gets or sets public source type means, that the browser can see the
        /// URL directly. This is true for instance, if you have Hybrid OAuth
        /// flow active.
        ///
        /// Private source type means, that the server will request from that
        /// source URL a public URL, which is pre-authenticated and forward
        /// that to the client. Possible values include: 'Private', 'Public'
        /// </summary>
        [JsonProperty(PropertyName = "sourceType")]
        public string SourceType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceUrl")]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'DashboardPropertyContext',
        /// 'DashboardAccountContext', 'ReservationDetailsTab',
        /// 'PropertyMenuReports', 'PropertyMenuApps', 'AccountMenuApps',
        /// 'CompanyDetailsTab'
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Label == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Label");
            }
            if (SourceType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceType");
            }
            if (SourceUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceUrl");
            }
            if (Target == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Target");
            }
        }
    }
}
