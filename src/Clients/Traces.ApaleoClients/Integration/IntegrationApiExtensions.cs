// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Traces.ApaleoClients.Integration
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IntegrationApi.
    /// </summary>
    public static partial class IntegrationApiExtensions
    {
            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static UiIntegrationListModel IntegrationUiIntegrationsGet(this IIntegrationApi operations)
            {
                return operations.IntegrationUiIntegrationsGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UiIntegrationListModel> IntegrationUiIntegrationsGetAsync(this IIntegrationApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationUiIntegrationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static void IntegrationUiIntegrationsByTargetDelete(this IIntegrationApi operations, string target)
            {
                operations.IntegrationUiIntegrationsByTargetDeleteAsync(target).GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task IntegrationUiIntegrationsByTargetDeleteAsync(this IIntegrationApi operations, string target, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.IntegrationUiIntegrationsByTargetDeleteWithHttpMessagesAsync(target, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static ObsoleteUiIntegrationModel IntegrationUiIntegrationsByTargetGet(this IIntegrationApi operations, string target)
            {
                return operations.IntegrationUiIntegrationsByTargetGetAsync(target).GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<ObsoleteUiIntegrationModel> IntegrationUiIntegrationsByTargetGetAsync(this IIntegrationApi operations, string target, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationUiIntegrationsByTargetGetWithHttpMessagesAsync(target, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='createUiIntegrationModel'>
            /// </param>
            public static object IntegrationUiIntegrationsByTargetPost(this IIntegrationApi operations, string target, CreateUiIntegrationModel createUiIntegrationModel)
            {
                return operations.IntegrationUiIntegrationsByTargetPostAsync(target, createUiIntegrationModel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='createUiIntegrationModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IntegrationUiIntegrationsByTargetPostAsync(this IIntegrationApi operations, string target, CreateUiIntegrationModel createUiIntegrationModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationUiIntegrationsByTargetPostWithHttpMessagesAsync(target, createUiIntegrationModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='model'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static MessageItemCollection IntegrationUiIntegrationsByTargetPut(this IIntegrationApi operations, string target, ReplaceUiIntegrationModel model)
            {
                return operations.IntegrationUiIntegrationsByTargetPutAsync(target, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<MessageItemCollection> IntegrationUiIntegrationsByTargetPutAsync(this IIntegrationApi operations, string target, ReplaceUiIntegrationModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationUiIntegrationsByTargetPutWithHttpMessagesAsync(target, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void IntegrationUiIntegrationsByTargetByIdDelete(this IIntegrationApi operations, string target, string id)
            {
                operations.IntegrationUiIntegrationsByTargetByIdDeleteAsync(target, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task IntegrationUiIntegrationsByTargetByIdDeleteAsync(this IIntegrationApi operations, string target, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.IntegrationUiIntegrationsByTargetByIdDeleteWithHttpMessagesAsync(target, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// </param>
            public static UiIntegrationItemModel IntegrationUiIntegrationsByTargetByIdGet(this IIntegrationApi operations, string target, string id)
            {
                return operations.IntegrationUiIntegrationsByTargetByIdGetAsync(target, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UiIntegrationItemModel> IntegrationUiIntegrationsByTargetByIdGetAsync(this IIntegrationApi operations, string target, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationUiIntegrationsByTargetByIdGetWithHttpMessagesAsync(target, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static MessageItemCollection IntegrationUiIntegrationsByTargetByIdPut(this IIntegrationApi operations, string target, string id, ReplaceUiIntegrationModel model)
            {
                return operations.IntegrationUiIntegrationsByTargetByIdPutAsync(target, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;br&gt;Scopes required: 'integration:ui-integrations.manage'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Possible values include: 'DashboardPropertyContext',
            /// 'DashboardAccountContext', 'ReservationDetailsTab', 'PropertyMenuReports',
            /// 'PropertyMenuApps', 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageItemCollection> IntegrationUiIntegrationsByTargetByIdPutAsync(this IIntegrationApi operations, string target, string id, ReplaceUiIntegrationModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationUiIntegrationsByTargetByIdPutWithHttpMessagesAsync(target, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tests a private source integration.
            /// </summary>
            /// <remarks>
            /// Tests that the process of getting the public url from the provided url is
            /// done correctly.
            /// If there are any errors with the process, it will provide information on
            /// what might have gone wrong.&lt;br&gt;Scopes required:
            /// 'integration:ui-integrations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Target for the integration. Possible values include:
            /// 'DashboardPropertyContext', 'DashboardAccountContext',
            /// 'ReservationDetailsTab', 'PropertyMenuReports', 'PropertyMenuApps',
            /// 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// Id of the integration to be tested
            /// </param>
            public static UiIntegrationTestResultModel IntegrationUiIntegrationsByTargetByIdtestGet(this IIntegrationApi operations, string target, string id)
            {
                return operations.IntegrationUiIntegrationsByTargetByIdtestGetAsync(target, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tests a private source integration.
            /// </summary>
            /// <remarks>
            /// Tests that the process of getting the public url from the provided url is
            /// done correctly.
            /// If there are any errors with the process, it will provide information on
            /// what might have gone wrong.&lt;br&gt;Scopes required:
            /// 'integration:ui-integrations.manage'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='target'>
            /// Target for the integration. Possible values include:
            /// 'DashboardPropertyContext', 'DashboardAccountContext',
            /// 'ReservationDetailsTab', 'PropertyMenuReports', 'PropertyMenuApps',
            /// 'AccountMenuApps', 'CompanyDetailsTab'
            /// </param>
            /// <param name='id'>
            /// Id of the integration to be tested
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UiIntegrationTestResultModel> IntegrationUiIntegrationsByTargetByIdtestGetAsync(this IIntegrationApi operations, string target, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationUiIntegrationsByTargetByIdtestGetWithHttpMessagesAsync(target, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
