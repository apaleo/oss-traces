@page "/test"
@using System.IO
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Traces.Common
@using Traces.Common.Constants
@using Traces.Web.Models.TraceFile
@using Traces.Web.Services
@inject IFileService FileService;
@inject IHttpContextAccessor HttpContextAccessor
@inject IRequestContext RequestContext

<InputFile OnChange="HandleFileSelected"/>

@if (file != null)
{
    <p>Name: @file.Name</p>
    <p>Size in bytes: @file.Size</p>
    <p>Last modified date: @file.LastModified.ToShortDateString()</p>
    <p>Content type (not always supplied by the browser): @file.Type</p>
    <p>Number of bytes read: @numLines</p>
    <button @onclick="CountLines">Count</button>
}

@code {
    long numLines;
    IFileListEntry file;
    
    protected override async Task OnInitializedAsync()
    {
        await InitializeContextAsync();
        await base.OnInitializedAsync();
    }

    void HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
    }

    async Task CountLines()
    {
        numLines = 0;

    /*

        var memoryStream = await file.ReadAllAsync(2097152);
        await memoryStream.CopyToAsync(new FileStream(@"WriteLines.png", FileMode.Create));
        
        numLines = memoryStream.Length;
        */
        await FileService.CreateTraceFileAsync(new CreateTraceFileItemModel
        {
            Name = file.Name,
            Size = file.Size,
            MimeType = file.Type,
            TraceId = 152
        });
    }
    
    async Task InitializeContextAsync()
    {
        var httpContextUser = HttpContextAccessor.HttpContext.User;
        if (RequestContext.IsInitialized || !httpContextUser.Identity.IsAuthenticated)
        {
            return;
        }

        var accessToken = await HttpContextAccessor.HttpContext.GetTokenAsync(SecurityConstants.AccessToken);
        RequestContext.Initialize(httpContextUser.Claims.ToList(), accessToken);
    }
}