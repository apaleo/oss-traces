@page "/traces/reservation"
@using Traces.Common.Constants
@using Traces.Web.ViewModels.Traces
@inherits TracesBaseViewModel

<div>
    <div class="mb-3">
        @if (HasCompletedTraces)
        {
            <div class="mb-3">
                <CheckEdit @bind-Checked="@IsCompletedTracesVisible">
                    @CompletedTracesCheckBoxText
                </CheckEdit>
            </div>
        }

        <Button Color="Color.Primary" Clicked="@ShowCreateTraceModal">
            <i class="fa fa-plus"></i>
            @TextConstants.TracesAddButtonText</Button>
    </div>

    @if (IsCompletedTracesVisible)
    {
        @if (AllTracesDictionary?.Any() == true)
        {
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>@TextConstants.TracesTableTitleText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableDescriptionText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableAssignedRoleText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableFilesCountText</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                @foreach (var (date, traces) in AllTracesDictionary)
                {
                    <TracesComponent
                        Title="@date.ToShortDateString()"
                        Traces="@traces"
                        IsPropertyVisible="false"
                        IsReservationVisible="false"
                        IsDueDateVisible="false"
                        OnCompleteClick="@CompleteTraceAsync"
                        OnDeleteClick="@DeleteItemAsync"
                        OnEditClick="@ShowReplaceTraceModal"
                        OnRevertCompleteClick="@RevertCompleteItemAsync"
                        />
                }
            </Table>
        }
    }
    else
    {
        @if (OverdueTraces?.Any() == true)
        {
            <section class="pb-4">
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>@TextConstants.TracesTableTitleText</TableHeaderCell>
                            <TableHeaderCell>@TextConstants.TracesTableDescriptionText</TableHeaderCell>
                            <TableHeaderCell>@TextConstants.TracesTableDueDateText</TableHeaderCell>
                            <TableHeaderCell>@TextConstants.TracesTableAssignedRoleText</TableHeaderCell>
                            <TableHeaderCell>@TextConstants.TracesTableFilesCountText</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TracesComponent
                        Title="@TextConstants.OverdueTracesTitleText"
                        Traces="@OverdueTraces"
                        IsPropertyVisible="false"
                        IsReservationVisible="false"
                        IsDueDateVisible="true"
                        OnCompleteClick="@CompleteTraceAsync"
                        OnDeleteClick="@DeleteItemAsync"
                        OnEditClick="@ShowReplaceTraceModal"/>
                </Table>
            </section>
        }

        @if (ActiveTracesDictionary?.Any() == true)
        {
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>@TextConstants.TracesTableTitleText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableDescriptionText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableAssignedRoleText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableFilesCountText</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                @foreach (var (date, traces) in ActiveTracesDictionary)
                {
                    <TracesComponent
                        Title="@date.ToShortDateString()"
                        Traces="@traces"
                        IsPropertyVisible="false"
                        IsReservationVisible="false"
                        IsDueDateVisible="false"
                        OnCompleteClick="@CompleteTraceAsync"
                        OnDeleteClick="@DeleteItemAsync"
                        OnEditClick="@ShowReplaceTraceModal"/>
                }
            </Table>
        }
    }

    <Modal @ref="@EditTraceModalRef">
        <ModalBackdrop/>
        <ModalContent IsCentered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@TextConstants.EditTraceModalTitle</ModalTitle>
                <CloseButton Clicked="@HideEditTraceModal"/>
            </ModalHeader>
            <ModalBody>
                @if (EditTraceModalRef.IsOpen)
                {
                    <EditTraceDialog EditTraceDialogVm="@EditTraceDialogViewModel" OnClose="@HideEditTraceModal" OnSubmit="@EditTraceItemAsync" SubmitButtonText="@TextConstants.EditTraceButtonText"/>
                }
            </ModalBody>
        </ModalContent>
    </Modal>

    <Modal @ref="@CreateTraceModalRef">
        <ModalBackdrop/>
        <ModalContent IsCentered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@TextConstants.CreateTraceModalTitle</ModalTitle>
                <CloseButton Clicked="@HideCreateTraceModal"/>
            </ModalHeader>
            <ModalBody>
                @if (CreateTraceModalRef.IsOpen)
                {
                    <EditTraceDialog EditTraceDialogVm="@EditTraceDialogViewModel" OnClose="@HideCreateTraceModal" OnSubmit="@CreateTraceItemAsync" SubmitButtonText="@TextConstants.CreateTraceButtonText"/>
                }
            </ModalBody>
        </ModalContent>
    </Modal>
</div>