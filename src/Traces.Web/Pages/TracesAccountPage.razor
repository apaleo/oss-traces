@page "/traces/account"
@using Microsoft.VisualBasic
@using Traces.Common.Constants
@using Traces.Web.ViewModels
@inject TracesAccountViewModel TracesAccountViewModel

<div class="mb-3">
    <Button class="btn btn-outline-primary" Clicked="@(() => TracesViewModel.ShowCreateTraceModal())"><i class="fa fa-plus mr-2"></i>@TextConstants.TracesAddButtonText</Button>
</div>

@if (TracesViewModel.TracesGroupModel.OverdueItems.Any())
{
    <section class="pb-4">
        <CascadingValue Value="@TracesAccountViewModel.TracesGroupModel.OverdueItems">
            <TracesOverdueTable></TracesOverdueTable>
        </CascadingValue>
    </section>
}

<div>
    <h2>@TextConstants.UpcomingTracesText</h2>
    @if (TracesAccountViewModel.Traces != null && TracesAccountViewModel.Traces.Any())
    {
        <Table>
            <TableHeader>
                    <TableRow>
                        <TableHeaderCell>@TextConstants.TracesTableTitleText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableDescriptionText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableDueDateText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableActionsText</TableHeaderCell>
                    </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var trace in TracesAccountViewModel.Traces)
                {
                    <TableRow>
                        <TableRowCell>@trace.Title</TableRowCell>
                        <TableRowCell>@trace.Description</TableRowCell>
                        <TableRowCell>@trace.DueDate.ToShortDateString()</TableRowCell>
                        <TableRowCell>
                            <Buttons>
                                <Button Color="Color.Primary" Clicked="@(() => TracesAccountViewModel.CompleteTraceAsync(trace.Id))">Complete</Button>
                                <Button Color="Color.Secondary" Clicked="@(() => TracesAccountViewModel.ShowReplaceTraceModal(trace))">Edit</Button>
                                <Button Color="Color.Danger" Clicked="@(() => TracesAccountViewModel.DeleteItemAsync(trace.Id))">Delete</Button>
                            </Buttons>
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    }

    @if (!IsLastMonth)
    {
        <div class="py-2">
            <Button class="mr-2" Color="Color.Primary" Clicked="@NextMonth">
                <i class="fa fa-angle-right mr-2"></i>
                @TextConstants.TracesShowNextMonthButtonText
            </Button>
            <Button Color="Color.Primary" Clicked="@ShowAllMonths">
                <i class="fa fa-angle-double-right mr-2"></i>
                @TextConstants.TracesShowAllMonthsButtonText
            </Button>
        </div>
    }
    <Modal @ref="@TracesAccountViewModel.EditTraceModalRef">
        <ModalBackdrop />
        <ModalContent IsCentered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@TextConstants.EditTraceModalTitle</ModalTitle>
                <CloseButton Clicked="@TracesAccountViewModel.HideEditTraceModal"/>
            </ModalHeader>
            <ModalBody>
                <EditTraceDialog EditTraceDialogVm="@TracesAccountViewModel.EditTraceDialogViewModel" OnClose="@TracesAccountViewModel.HideEditTraceModal" OnSubmit="@TracesAccountViewModel.EditTraceItemAsync" SubmitButtonText="@TextConstants.EditTraceButtonText"/>
            </ModalBody>
        </ModalContent>
    </Modal>
</div>

@code
{
    private List<DateTime> SortedDayDateTimes { get; set; } = new List<DateTime>();
    private List<DateTime> SortedMonthDateTimes { get; set; } = new List<DateTime>();
    private bool IsMonthViewAvailable => SortedMonthDateTimes.Count > 0;
    private bool IsLastMonth => CurrentMonthIndex == SortedMonthDateTimes.Count - 1;
    private int CurrentMonthIndex { get; set; } = -1;

    public void NextMonth()
    {
        if (CurrentMonthIndex + 1 < SortedMonthDateTimes.Count)
        {
            CurrentMonthIndex++;
        }
    }

    public void ShowAllMonths()
    {
        CurrentMonthIndex = SortedMonthDateTimes.Count - 1;
    }

    public void Dispose()
    {
        TracesViewModel.RefreshRequested -= OnRefresh;
    }

    protected override void OnInitialized()
    {
        TracesViewModel.RefreshRequested += OnRefresh;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await TracesAccountViewModel.LoadAsync();
        await base.OnInitializedAsync();
    }

    private void OnRefresh()
    {
        RefreshDates();
        StateHasChanged();
    }

    private void RefreshDates()
    {
        SortedDayDateTimes = TracesViewModel.TracesGroupModel.DayItems.Keys.ToList();
        SortedDayDateTimes.Sort();

        SortedMonthDateTimes = TracesViewModel.TracesGroupModel.MonthItems.Keys.ToList();
        SortedMonthDateTimes.Sort();
    }
}