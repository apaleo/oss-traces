@page "/traces/property"
@using Traces.Common.Constants
@using Traces.Web.ViewModels
@inject TracesPropertyViewModel TracesPropertyViewModel

<div>
    <Button class="mb-3" Color="Color.Primary" Clicked="@TracesPropertyViewModel.ShowCreateTraceModal">@TextConstants.TracesAddButtonText</Button>

    @if (TracesPropertyViewModel.OverdueTraces != null && TracesPropertyViewModel.OverdueTraces.Any())
    {
        <section class="pb-4">
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>@TextConstants.TracesTableTitleText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableDescriptionText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableDueDateText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTablePropertyText</TableHeaderCell>
                        <TableHeaderCell>@TextConstants.TracesTableReservationText</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TracesComponent
                    Title="@TextConstants.OverdueTracesTitleText"
                    Traces="@TracesPropertyViewModel.OverdueTraces"
                    IsPropertyVisible="true"
                    IsReservationVisible="true"
                    IsDueDateVisible="true"
                    OnCompleteClick="@TracesPropertyViewModel.CompleteTraceAsync"
                    OnDeleteClick="@TracesPropertyViewModel.DeleteItemAsync"
                    OnEditClick="@TracesPropertyViewModel.ShowReplaceTraceModal"/>
            </Table>
        </section>
    }

    @if (TracesPropertyViewModel.SortedGroupedTracesDictionary != null && TracesPropertyViewModel.SortedGroupedTracesDictionary.Any())
    {
        <Table>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>@TextConstants.TracesTableTitleText</TableHeaderCell>
                    <TableHeaderCell>@TextConstants.TracesTableDescriptionText</TableHeaderCell>
                    <TableHeaderCell>@TextConstants.TracesTableReservationText</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            @foreach (var (date, traces) in TracesPropertyViewModel.SortedGroupedTracesDictionary)
            {
                <TracesComponent
                    Title="@date.ToShortDateString()"
                    Traces="@traces"
                    IsPropertyVisible="false"
                    IsReservationVisible="true"
                    IsDueDateVisible="false"
                    OnCompleteClick="@TracesPropertyViewModel.CompleteTraceAsync"
                    OnDeleteClick="@TracesPropertyViewModel.DeleteItemAsync"
                    OnEditClick="@TracesPropertyViewModel.ShowReplaceTraceModal"
                    OnNavigateClick="@TracesPropertyViewModel.NavigateToReservationAsync"/>
            }
        </Table>
    }

    <section>
        <p>@TracesPropertyViewModel.LoadedUntilDateMessage</p>
        <Button Color="Color.Primary" Clicked="@TracesPropertyViewModel.LoadNextDaysAsync">@string.Format(TextConstants.TracesLoadMoreButtonTextFormat, TracesPropertyViewModel.CurrentDayIncrease)</Button>
    </section>

    <Modal @ref="@TracesPropertyViewModel.EditTraceModalRef">
        <ModalBackdrop/>
        <ModalContent IsCentered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@TextConstants.EditTraceModalTitle</ModalTitle>
                <CloseButton Clicked="@TracesPropertyViewModel.HideEditTraceModal"/>
            </ModalHeader>
            <ModalBody>
                <EditTraceDialog EditTraceDialogVm="@TracesPropertyViewModel.EditTraceDialogViewModel" OnClose="@TracesPropertyViewModel.HideEditTraceModal" OnSubmit="@TracesPropertyViewModel.EditTraceItemAsync" SubmitButtonText="@TextConstants.EditTraceButtonText"/>
            </ModalBody>
        </ModalContent>
    </Modal>

    <Modal @ref="@TracesPropertyViewModel.CreateTraceModalRef">
        <ModalBackdrop/>
        <ModalContent IsCentered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@TextConstants.CreateTraceModalTitle</ModalTitle>
                <CloseButton Clicked="@TracesPropertyViewModel.HideCreateTraceModal"/>
            </ModalHeader>
            <ModalBody>
                <EditTraceDialog EditTraceDialogVm="@TracesPropertyViewModel.EditTraceDialogViewModel" OnClose="@TracesPropertyViewModel.HideCreateTraceModal" OnSubmit="@TracesPropertyViewModel.CreateTraceItemAsync" SubmitButtonText="@TextConstants.CreateTraceButtonText"/>
            </ModalBody>
        </ModalContent>
    </Modal>
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        await TracesPropertyViewModel.LoadAsync();
        await base.OnInitializedAsync();
    }
}