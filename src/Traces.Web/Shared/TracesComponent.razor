@using Traces.Common.Constants
@using Traces.Web.Models
@using Traces.Web.Services
@inject IApaleoOneService ApaleoOneService 

<h4>@Title</h4>

@if (Traces != null && Traces.Any())
{
    <TableBody>
        @foreach (var trace in Traces)
        {
            <TableRow>
                <TableRowCell>@trace.Title</TableRowCell>
                <TableRowCell>@trace.Description</TableRowCell>
                @if (IsDueDateVisible)
                {
                    <TableRowCell>@trace.DueDate.ToShortDateString()</TableRowCell>
                }
                @if (IsPropertyVisible)
                {
                    <TableRowCell>@trace.PropertyId</TableRowCell>
                }
                @if (IsReservationVisible)
                {
                    <TableRowCell>
                        @if (string.IsNullOrEmpty(trace.ReservationId))
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <a href="javascript:void(0)" @onclick="@(() => OnNavigate(trace))">@trace.ReservationId</a>
                        }
                    </TableRowCell>
                }
                <TableRowCell class="fit">
                    <div class="d-flex align-items-start">
                        <Button class="mr-2" Color="Color.Primary" IsLoading="@IsLoading" Clicked="@(() => OnComplete(trace))">
                            @TextConstants.TracesCompleteButtonText
                        </Button>
                        <Button class="mr-2" Color="Color.Secondary" IsLoading="@IsLoading" Clicked="@(() => OnEdit(trace))">
                            @TextConstants.TracesEditButtonText
                        </Button>
                        <Dropdown IsRightAligned="true">
                            <DropdownToggle>
                            </DropdownToggle>
                            <DropdownMenu IsRightAligned="true">
                                <DropdownItem class="text-danger" Clicked="@(() => OnDelete(trace))">
                                    @TextConstants.TracesDeleteButtonText
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </div>
                </TableRowCell>
            </TableRow>
        }
    </TableBody>
}

@code
{
    private bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnEditClick { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnDeleteClick { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnCompleteClick { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public List<TraceItemModel> Traces { get; set; }

    [Parameter]
    public bool IsPropertyVisible { get; set; }

    [Parameter]
    public bool IsDueDateVisible { get; set; }

    [Parameter]
    public bool IsReservationVisible { get; set; }

    private async Task OnComplete(TraceItemModel trace)
    {
        IsLoading = true;

        await OnCompleteClick.InvokeAsync(trace);

        IsLoading = false;
    }

    private async Task OnEdit(TraceItemModel trace)
    {
        await OnEditClick.InvokeAsync(trace);
    }

    private async Task OnDelete(TraceItemModel trace)
    {
        IsLoading = true;

        await OnDeleteClick.InvokeAsync(trace);

        IsLoading = false;
    }

    private async Task OnNavigate(TraceItemModel trace)
    {
        await ApaleoOneService.NavigateToReservation(trace);
    }
}