@using Humanizer
@using Traces.Common.Constants
@using Traces.Common.Enums
@using Traces.Web.Models

<h4 class="mt-2 ml-2">@Title</h4>

@if (Traces != null && Traces.Any())
{
    @foreach (var trace in Traces)
    {
        <DataGrid TItem="TraceItemModel"
                  Data="@(trace.State == TraceState.Completed ? "text-muted" : "")" />

        <DataGridColumn TItem="trace" Field="nameof(@trace.Title)" Caption="Title" Editable="true" />
        <DataGridColumn TItem="trace" Field="nameof(@trace.Description)" Caption="Description" Editable="true" />
        @if (IsDueDateVisible)
        {
            <DataGridNumericColumn TItem="trace" Field="nameof(@trace.DueDate.ToShortDateString())" Caption="Date" Editable="true" />
        }
        @if (IsPropertyVisible)
        {
            <DataGridColumn TItem="trace" Field="nameof(@trace.PropertyId)" Caption="ID" Editable="true" />
        }
        @if (IsReservationVisible)
        {
            <DataGridCheckColumn TItem="trace" Field="nameof(@trace.ReservationId)" Caption="ReservationId" Editable="false" />
            <DisplayTemplate>
                @if (string.IsNullOrWhiteSpace(trace.ReservationId))
                {
                    <span>&mdash;</span>
                }
                else
                {
                    <a href="javascript:void(0)" @onclick="@(() => OnNavigate(trace))"></a>
                }
            </DisplayTemplate>
            <DataGridCheckColumn TItem="trace" Field="nameof(@trace.AssignedRole)" Caption="AssignedRole" Editable="false" />
            <DisplayTemplate>
                @if (string.IsNullOrWhiteSpace(trace.AssignedRole))
                {
                    <span>&mdash;</span>
                }
                else
                {
                    @trace.AssignedRole.Humanize()
                }
            </DisplayTemplate>
            <DataGridColumn 
               @if (trace.Files.Count>0)
                {
                        @trace.Files.Count
                        }
                        />
                        < class="fit">
                        <div class="d-flex justify-content-end">
                            @if (trace.State == TraceState.Active)
                            {
                                <Button class="mr-2" Color="Color.Primary" Disabled="@IsLoading" Loading="@IsLoading" Clicked="@(() => OnComplete(trace))">
                                    <i class="fa fa-check"></i>
                                    @TextConstants.TracesCompleteButtonText
                                </Button>
                                <Button class="mr-2" Color="Color.Secondary" Outline="true" Disabled="@IsLoading" Loading="@IsLoading" Clicked="@(() => OnEdit(trace))">
                                    <i class="fa fa-edit"></i>
                                    @TextConstants.TracesEditButtonText
                                </Button>
                                <Dropdown RightAligned="true">
                                    <DropdownToggle>
                                    </DropdownToggle>
                                    <DropdownMenu RightAligned="true">
                                        <DropdownItem class="text-danger" Clicked="@(() => OnDelete(trace))">
                                            @TextConstants.TracesDeleteButtonText
                                        </DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            }
                            else
                            {
                                <Button class="mr-2" Color="Color.Secondary" Outline="true" Disabled="@IsLoading" Loading="@IsLoading" Clicked="@(() => OnRevertComplete(trace))">
                                    <i class="fa fa-history"></i>
                                    @TextConstants.TracesRevertCompleteButtonText
                                </Button>
                            }
                        </div>
                        />
                        </DataGrid>
                    }
    }

    @code
{
private bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnEditClick { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnDeleteClick { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnCompleteClick { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnNavigateClick { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnRevertCompleteClick { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public List<TraceItemModel> Traces { get; set; }

    [Parameter]
    public bool IsPropertyVisible { get; set; }

    [Parameter]
    public bool IsDueDateVisible { get; set; }

    [Parameter]
    public bool IsReservationVisible { get; set; }

    private async Task OnComplete(TraceItemModel trace)
    {
        IsLoading = true;

        await OnCompleteClick.InvokeAsync(trace);

        IsLoading = false;
    }

    private async Task OnEdit(TraceItemModel trace)
    {
        await OnEditClick.InvokeAsync(trace);
    }

    private async Task OnDelete(TraceItemModel trace)
    {
        IsLoading = true;

        await OnDeleteClick.InvokeAsync(trace);

        IsLoading = false;
    }

    private async Task OnRevertComplete(TraceItemModel trace)
    {
        IsLoading = true;

        await OnRevertCompleteClick.InvokeAsync(trace);

        IsLoading = false;
    }

    private async Task OnNavigate(TraceItemModel trace)
    {
        await OnNavigateClick.InvokeAsync(trace);
    }
    }
