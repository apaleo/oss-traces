@using Traces.Common.Constants
@using Traces.Web.Models

<h3>@Title</h3>

@if (Traces != null && Traces.Any())
{
    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>@TextConstants.TracesTableTitleText</TableHeaderCell>
                <TableHeaderCell>@TextConstants.TracesTableDescriptionText</TableHeaderCell>
                @if (IsDueDateVisible)
                {
                    <TableHeaderCell>@TextConstants.TracesTableDueDateText</TableHeaderCell>
                }
                @if (IsPropertyVisible)
                {
                    <TableHeaderCell>@TextConstants.TracesTablePropertyText</TableHeaderCell>
                }
                <TableHeaderCell></TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var trace in Traces)
            {
                <TableRow>
                    <TableRowCell>@trace.Title</TableRowCell>
                    <TableRowCell>@trace.Description</TableRowCell>
                    @if (IsDueDateVisible)
                    {
                        <TableRowCell>@trace.DueDate.ToShortDateString()</TableRowCell>
                    }
                    @if (IsPropertyVisible)
                    {
                        <TableRowCell>@trace.PropertyId</TableRowCell>
                    }
                    <TableRowCell class="fit">
                        <div class="d-flex align-items-start">
                            <Button class="mr-2" IsLoading="@IsLoading" Clicked="@(() => OnComplete(trace.Id))">
                                @TextConstants.TracesCompleteButtonText
                            </Button>
                            <Button class="mr-2" IsLoading="@IsLoading" Clicked="@(() => OnEdit(trace))">
                                @TextConstants.TracesEditButtonText
                            </Button>
                            <Dropdown IsRightAligned="true">
                                <DropdownToggle>
                                </DropdownToggle>
                                <DropdownMenu IsRightAligned="true">
                                    <DropdownItem class="text-danger" Clicked="@(() => OnDelete(trace.Id))">
                                        @TextConstants.TracesDeleteButtonText
                                    </DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        </div>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
}

@code
{
    private bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<TraceItemModel> OnEditClick { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteClick { get; set; }

    [Parameter]
    public EventCallback<int> OnCompleteClick { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public List<TraceItemModel> Traces { get; set; }

    [Parameter]
    public bool IsPropertyVisible { get; set; }

    [Parameter]
    public bool IsDueDateVisible { get; set; }

    private async Task OnComplete(int id)
    {
        IsLoading = true;

        await OnCompleteClick.InvokeAsync(id);

        IsLoading = false;
    }

    private async Task OnEdit(TraceItemModel trace)
    {
        await OnEditClick.InvokeAsync(trace);
    }

    private async Task OnDelete(int id)
    {
        IsLoading = true;

        await OnDeleteClick.InvokeAsync(id);

        IsLoading = false;
    }
}
