@using Traces.Web.ViewModels
@inject TracesViewModel TracesViewModel

<Form>
    <Field>
        <FieldLabel>Title</FieldLabel>
        <FieldBody>
            <TextEdit @bind-Text="@TracesViewModel.EditTraceModificationModel.Title"/>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>Description</FieldLabel>
        <FieldBody>
            <MemoEdit Rows="4" @bind-Text="@TracesViewModel.EditTraceModificationModel.Description"/>
        </FieldBody>
    </Field>

    <Field>
        <FieldLabel>Due date</FieldLabel>
        <FieldBody>
            <DateEdit @bind-Date="@TracesViewModel.EditTraceModificationModel.DueDate"/>
        </FieldBody>
    </Field>
    <ModalFooter>
        <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" IsLoading="@_isLoading" Clicked="@OnCreateOrEditButtonClick">@TracesViewModel.EditTraceModificationModel.CreateOrEditButtonText</Button>
        <Button Type="ButtonType.Submit" PreventDefaultOnSubmit="true" IsLoading="@_isLoading" Clicked="@OnClose">Close</Button>
    </ModalFooter>
</Form>

@code
{

    private bool _isLoading;

    [Parameter] public EventCallback OnClose { get; set; }

    async void OnCreateOrEditButtonClick()
    {
        _isLoading = true;

        if (TracesViewModel.EditTraceModificationModel.IsReplace)
        {
            if (await TracesViewModel.ReplaceTraceItemAsync())
            {
                await OnClose.InvokeAsync(null);
            }
        }
        else
        {
            if (await TracesViewModel.CreateTraceItemAsync())
            {
                await OnClose.InvokeAsync(null);
            }
        }

        _isLoading = false;
    }

}
