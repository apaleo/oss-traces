@using Humanizer
@using Traces.Common.Constants
@using Traces.Web.Enums
@using Traces.Web.Models.Files
@using Traces.Web.Services
@using Traces.Web.ViewModels
@inject IFileService FileService;

<Form>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogTitleText</FieldLabel>
        <FieldBody>
            <TextEdit @bind-Text="@EditTraceDialogVm.Title"/>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogDescriptionText</FieldLabel>
        <FieldBody>
            <MemoEdit Rows="4" @bind-Text="@EditTraceDialogVm.Description"/>
        </FieldBody>
    </Field>

    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogDueDateText</FieldLabel>
        <FieldBody>
            <DateEdit @bind-Date="@EditTraceDialogVm.DueDate" Min="@DateTime.Today"/>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogRoleText</FieldLabel>
        <FieldBody>
            <SelectEdit @bind-SelectedValue="@EditTraceDialogVm.SelectedRole">
                @foreach (var role in EditTraceDialogVm.Roles)
                {
                    <SelectItem Value="@role">@role.Humanize()</SelectItem>
                }
            </SelectEdit>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogFilesText</FieldLabel>
        <FieldBody>
            @for (int i = 0; i < EditTraceDialogVm.TraceFiles.Count; i++)
            {
                var file = EditTraceDialogVm.TraceFiles[i];
                var index = i + 1;

                <div class="d-flex align-items-start mb-2 @(file.IsStateChanged ? "trace-file-deleted" : "")">
                    <div class="mt-2 d-flex flex-fill">
                        <span class="mr-2">@index.</span>
                        <div class="d-flex flex-column">
                            <a class="trace-file-url" href="/files/@file.PublicId" target="_blank">@file.Name</a>
                            @if (file.State == TraceFileItemModelState.ShouldDelete)
                            {
                                <small>@TextConstants.TraceFileWillBeDeletedMessage</small>
                            }
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        @if (file.IsStateChanged)
                        {
                            <Button Color="Color.Secondary" IsOutline="true" PreventDefaultOnSubmit="true" Clicked="@(() => OnUndoDeleteClick(file))">@TextConstants.TracesUndoDeleteButtonText</Button>
                        }
                        else
                        {
                            <Button Color="Color.Danger" IsOutline="true" PreventDefaultOnSubmit="true" Clicked="@(() => OnDeleteClick(file))">@TextConstants.TracesDeleteButtonText</Button>
                        }
                    </div>
                </div>
            }

            <FilesDragDropZone OnChange="@HandleFileChanged" OnLoadingChanged="@HandleLoadingChanged"></FilesDragDropZone>
        </FieldBody>
    </Field>
    <ModalFooter>
        <Button Color="Color.Primary" IsDisabled="@_isLoading" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" IsLoading="@_isLoading" Clicked="@OnCreateOrEditButtonClick">@SubmitButtonText</Button>
        <Button Color="Color.Secondary" PreventDefaultOnSubmit="true" Clicked="@OnClose">@TextConstants.TracesCloseButtonText</Button>
    </ModalFooter>
</Form>

@code
{
    private bool _isLoading;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EditTraceDialogViewModel EditTraceDialogVm { get; set; }

    [Parameter]
    public string SubmitButtonText { get; set; }

    void HandleFileChanged(List<FileToUploadModel> files)
    {
        EditTraceDialogVm.FilesToUpload.Clear();
        EditTraceDialogVm.FilesToUpload.AddRange(files);
    }

    void HandleLoadingChanged(bool loading)
    {
        _isLoading = loading;

        StateHasChanged();
    }

    async Task OnCreateOrEditButtonClick()
    {
        _isLoading = true;

        await OnSubmit.InvokeAsync(null);

        _isLoading = false;

        StateHasChanged();
    }

    void OnDeleteClick(TraceFileItemModel traceFileItemModel)
    {
        _isLoading = true;

        traceFileItemModel.State = TraceFileItemModelState.ShouldDelete;

        _isLoading = false;

        StateHasChanged();
    }

    void OnUndoDeleteClick(TraceFileItemModel traceFileItemModel)
    {
        _isLoading = true;

        traceFileItemModel.State = TraceFileItemModelState.NoChanges;

        _isLoading = false;

        StateHasChanged();
    }
}