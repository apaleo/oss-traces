@using Humanizer
@using Traces.Common.Constants
@using Traces.Web.Models.Files
@using Traces.Web.Services
@using Traces.Web.ViewModels
@inject IFileService FileService;

<Form>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogTitleText</FieldLabel>
        <FieldBody>
            <TextEdit @bind-Text="@EditTraceDialogVm.Title"/>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogDescriptionText</FieldLabel>
        <FieldBody>
            <MemoEdit Rows="4" @bind-Text="@EditTraceDialogVm.Description"/>
        </FieldBody>
    </Field>

    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogDueDateText</FieldLabel>
        <FieldBody>
            <DateEdit @bind-Date="@EditTraceDialogVm.DueDate" Min="@DateTime.Today"/>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogRoleText</FieldLabel>
        <FieldBody>
            <SelectEdit @bind-SelectedValue="@EditTraceDialogVm.SelectedRole">
                @foreach (var role in EditTraceDialogVm.Roles)
                {
                    <SelectItem Value="@role">@role.Humanize()</SelectItem>
                }
            </SelectEdit>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogFilesText</FieldLabel>
        <FieldBody>
            @for (int i = 0; i < EditTraceDialogVm.TraceFiles.Count; i++)
            {
                var file = EditTraceDialogVm.TraceFiles[i];
                var index = i + 1;

                <div class="d-flex align-items-start mb-2">
                    <span class="mr-2 mt-2">@index.</span>
                    <a class="mt-2" href="/files/@file.PublicId" target="_blank">@file.Name</a>
                    <div class="d-flex flex-fill justify-content-end">
                        <Button Color="Color.Danger" IsOutline="true" PreventDefaultOnSubmit="true" Clicked="@(() => OnDeleteClick(file))">@TextConstants.TracesDeleteButtonText</Button>
                    </div>
                </div>
            }

            <FilesDragDropZone OnChange="@HandleFileChanged" OnLoadingChanged="@HandleLoadingChanged"></FilesDragDropZone>
        </FieldBody>
    </Field>
    <ModalFooter>
        <Button Color="Color.Primary" IsDisabled="@_loading" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" IsLoading="@_loading" Clicked="@OnCreateOrEditButtonClick">@SubmitButtonText</Button>
        <Button Color="Color.Secondary" PreventDefaultOnSubmit="true" Clicked="@OnClose">@TextConstants.TracesCloseButtonText</Button>
    </ModalFooter>
</Form>

@code
{
    private bool _loading;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter]
    public EditTraceDialogViewModel EditTraceDialogVm { get; set; }

    [Parameter]
    public string SubmitButtonText { get; set; }

    void HandleFileChanged(List<FileToUploadModel> files)
    {
        EditTraceDialogVm.FilesToUpload = files;
    }

    void HandleLoadingChanged(bool loading)
    {
        _loading = loading;

        StateHasChanged();
    }

    async Task OnCreateOrEditButtonClick()
    {
        _loading = true;

        await OnSubmit.InvokeAsync(null);

        _loading = false;

        StateHasChanged();
    }

    async Task OnDeleteClick(TraceFileItemModel traceFileItemModel)
    {
        await OnDelete.InvokeAsync(traceFileItemModel.Id);
    }
}