@using System.IO
@using Humanizer
@using Traces.Common.Constants
@using Traces.Web.Models.File
@using Traces.Web.Services
@using Traces.Web.ViewModels
@inject IFileService FileService;

<Form>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogTitleText</FieldLabel>
        <FieldBody>
            <TextEdit @bind-Text="@EditTraceDialogVm.Title"/>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogDescriptionText</FieldLabel>
        <FieldBody>
            <MemoEdit Rows="4" @bind-Text="@EditTraceDialogVm.Description"/>
        </FieldBody>
    </Field>

    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogDueDateText</FieldLabel>
        <FieldBody>
            <DateEdit @bind-Date="@EditTraceDialogVm.DueDate" Min="@DateTime.Today"/>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>@TextConstants.TracesEditDialogRoleText</FieldLabel>
        <FieldBody>
            <SelectEdit @bind-SelectedValue="@EditTraceDialogVm.SelectedRole">
                @foreach (var role in EditTraceDialogVm.Roles)
                {
                    <SelectItem Value="@role">@role.Humanize()</SelectItem>
                }
            </SelectEdit>
        </FieldBody>
    </Field>
    <Field>
        <FieldBody>
            <!-- TODO: reset state -->
            <InputFile multiple OnChange="HandleFileSelectedAsync"/>

            @for (int i = 1; i <= EditTraceDialogVm.FilesToUpload.Count; i++)
            {
                var file = EditTraceDialogVm.FilesToUpload[i - 1];
                var index = i;

                <div class="d-flex align-items-start mt-2">
                    <span class="mr-2 mt-2">@index.</span>
                    <div class="d-flex flex-fill flex-column">
                        <TextEdit @bind-Text="@file.Name">
                        </TextEdit>
                        <small class="text-muted mt-1">Progress @((100.0 * file.Entry.Data.Position / file.Entry.Size).ToString("0"))%</small>
                    </div>
                </div>
            }
        </FieldBody>
    </Field>
    <ModalFooter>
        <Button Color="Color.Primary" IsDisabled="@_isLoading" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" IsLoading="@_isLoading" Clicked="@OnCreateOrEditButtonClick">@SubmitButtonText</Button>
        <Button Color="Color.Secondary" PreventDefaultOnSubmit="true" IsLoading="@_isLoading" Clicked="@OnClose">Close</Button>
    </ModalFooter>
</Form>

@code
{
    private bool _isLoading;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EditTraceDialogViewModel EditTraceDialogVm { get; set; }

    [Parameter]
    public string SubmitButtonText { get; set; }

    async void HandleFileSelectedAsync(IFileListEntry[] fileListEntries)
    {
        EditTraceDialogVm.FilesToUpload.Clear();

        foreach (var entry in fileListEntries)
        {
            EditTraceDialogVm.FilesToUpload.Add(new FileToUploadModel
            {
                Name = entry.Name,
                Entry = entry
            });
        }

        _isLoading = true;

        foreach (var file in EditTraceDialogVm.FilesToUpload)
        {
            await UploadAsync(file);
        }

        _isLoading = false;

        StateHasChanged();
    }

    async Task UploadAsync(FileToUploadModel file)
    {
        file.Entry.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

        var ms = new MemoryStream();
        await file.Entry.Data.CopyToAsync(ms);

        file.Data = ms;
    }

    async void OnCreateOrEditButtonClick()
    {
        _isLoading = true;

        await OnSubmit.InvokeAsync(null);

        _isLoading = false;

        StateHasChanged();
    }
}